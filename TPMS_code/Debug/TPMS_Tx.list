
TPMS_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b80  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d70  08007d70  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007d70  08007d70  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d70  08007d70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  20000010  08007d88  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08007d88  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f66  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0a  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c499  00000000  00000000  0003d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151c9  00000000  00000000  00059731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab0bf  00000000  00000000  0006e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001199b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  00119a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf8 	.word	0x08007cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007cf8 	.word	0x08007cf8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <pressure_sensor_struct_init>:

#define DEV_ADDRESS    0x76  // 01110110
#define TIMEOUT		   50

void pressure_sensor_struct_init(Pressure_Sensor *pr, I2C_HandleTypeDef *i2c_Handle, GPIO_TypeDef* VSENSE_port, uint16_t VSENSE_pin)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	807b      	strh	r3, [r7, #2]

	pr->i2cHandle = i2c_Handle;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	601a      	str	r2, [r3, #0]

	pr->VSENSE_port = VSENSE_port;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	605a      	str	r2, [r3, #4]
	pr->VSENSE_pin  = VSENSE_pin;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	811a      	strh	r2, [r3, #8]

	/* Memory */
	for (uint8_t i = 0; i < 8; ++i)
 80009cc:	2300      	movs	r3, #0
 80009ce:	75fb      	strb	r3, [r7, #23]
 80009d0:	e009      	b.n	80009e6 <pressure_sensor_struct_init+0x3a>
	  pr->PROM[i] = 0;
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	3304      	adds	r3, #4
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	805a      	strh	r2, [r3, #2]
	for (uint8_t i = 0; i < 8; ++i)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	3301      	adds	r3, #1
 80009e4:	75fb      	strb	r3, [r7, #23]
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d9f2      	bls.n	80009d2 <pressure_sensor_struct_init+0x26>

	pr->temperature_reg = 0;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
	pr->pressure_reg    = 0;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
	pr->temperature     = 0.0;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
	pr->pressure    	= 0.0;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28

	pr->prom_crc       = 0;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pr->calculated_crc = 0;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8000a18:	bf00      	nop
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <reset>:


I2Cstatus_t reset(const Pressure_Sensor *pr) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]

	uint8_t reset_command = reset_cmd;
 8000a2c:	231e      	movs	r3, #30
 8000a2e:	73fb      	strb	r3, [r7, #15]
	 if (HAL_I2C_Master_Transmit(pr->i2cHandle, DEV_ADDRESS << 1, &reset_command, 1, TIMEOUT) != HAL_OK)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	f107 020f 	add.w	r2, r7, #15
 8000a38:	2332      	movs	r3, #50	; 0x32
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	21ec      	movs	r1, #236	; 0xec
 8000a40:	f004 f820 	bl	8004a84 <HAL_I2C_Master_Transmit>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <reset+0x2a>
		 return I2C_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <reset+0x2c>
	 return I2C_OK;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <read_prom>:


I2Cstatus_t read_prom(Pressure_Sensor *pr, const uint8_t reg_address) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]

	uint8_t prom_data[2];
	uint8_t PROM_read_command = prom_read_cmd | (reg_address << 1);
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(pr->i2cHandle, DEV_ADDRESS << 1, &PROM_read_command, 1, TIMEOUT) != HAL_OK)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f107 020b 	add.w	r2, r7, #11
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2301      	movs	r3, #1
 8000a82:	21ec      	movs	r1, #236	; 0xec
 8000a84:	f003 fffe 	bl	8004a84 <HAL_I2C_Master_Transmit>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <read_prom+0x3a>
		return I2C_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e01e      	b.n	8000ad0 <read_prom+0x78>

	if (HAL_I2C_Master_Receive(pr->i2cHandle, DEV_ADDRESS << 1, prom_data, 2, TIMEOUT) != HAL_OK)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	f107 020c 	add.w	r2, r7, #12
 8000a9a:	2332      	movs	r3, #50	; 0x32
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	21ec      	movs	r1, #236	; 0xec
 8000aa2:	f004 f8e3 	bl	8004c6c <HAL_I2C_Master_Receive>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <read_prom+0x58>
		return I2C_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e00f      	b.n	8000ad0 <read_prom+0x78>

	pr->PROM[reg_address] = (prom_data[0] << 8) | prom_data[1];
 8000ab0:	7b3b      	ldrb	r3, [r7, #12]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	b291      	uxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	460a      	mov	r2, r1
 8000acc:	805a      	strh	r2, [r3, #2]

	return I2C_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <get_temperatures>:


I2Cstatus_t get_temperatures(Pressure_Sensor *pr, const Temp_osr_t osr) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]

	if (get_adc_conversion(pr, osr) != I2C_OK)
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f8b0 	bl	8000c4e <get_adc_conversion>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <get_temperatures+0x20>
		return I2C_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <get_temperatures+0x22>

	return I2C_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <read_pressure_register>:


I2Cstatus_t read_pressure_register(Pressure_Sensor *pr, const Press_osr_t osr) {
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	70fb      	strb	r3, [r7, #3]

	if (get_adc_conversion(pr, osr) != I2C_OK)
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	4619      	mov	r1, r3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f89b 	bl	8000c4e <get_adc_conversion>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <read_pressure_register+0x20>
		return I2C_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <read_pressure_register+0x22>

	return I2C_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <check_crc>:

	return;
}


I2Cstatus_t check_crc(Pressure_Sensor *pr) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

	pr->prom_crc = pr->PROM[0] >> 12;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	895b      	ldrh	r3, [r3, #10]
 8000b38:	0b1b      	lsrs	r3, r3, #12
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pr->calculated_crc = crc4(pr->PROM);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	330a      	adds	r3, #10
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8e1 	bl	8000d10 <crc4>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	if (pr->prom_crc != pr->calculated_crc)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d001      	beq.n	8000b6c <check_crc+0x40>
		return I2C_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <check_crc+0x42>

	return I2C_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <sensor_init>:


I2Cstatus_t sensor_init(Pressure_Sensor *pr, I2C_HandleTypeDef *i2c_Handle, GPIO_TypeDef* VSENSE_port, uint16_t VSENSE_pin) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	807b      	strh	r3, [r7, #2]

	pressure_sensor_struct_init(pr, i2c_Handle, VSENSE_port, VSENSE_pin);
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ff0e 	bl	80009ac <pressure_sensor_struct_init>
	HAL_Delay(2);
 8000b90:	2002      	movs	r0, #2
 8000b92:	f003 fa8b 	bl	80040ac <HAL_Delay>

	HAL_GPIO_WritePin(pr->VSENSE_port, pr->VSENSE_pin, GPIO_PIN_SET);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6858      	ldr	r0, [r3, #4]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	891b      	ldrh	r3, [r3, #8]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f003 fe81 	bl	80048a8 <HAL_GPIO_WritePin>

	if (reset(pr) != I2C_OK)
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff ff3c 	bl	8000a24 <reset>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <sensor_init+0x40>
		return I2C_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e01b      	b.n	8000bee <sensor_init+0x78>

	for (uint8_t reg_address = 0; reg_address < 7; ++reg_address)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	75fb      	strb	r3, [r7, #23]
 8000bba:	e00c      	b.n	8000bd6 <sensor_init+0x60>
		if (read_prom(pr, reg_address) != I2C_OK)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff ff49 	bl	8000a58 <read_prom>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <sensor_init+0x5a>
			return I2C_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e00e      	b.n	8000bee <sensor_init+0x78>
	for (uint8_t reg_address = 0; reg_address < 7; ++reg_address)
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	75fb      	strb	r3, [r7, #23]
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	d9ef      	bls.n	8000bbc <sensor_init+0x46>

	if (check_crc(pr) != I2C_OK)
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f7ff ffa5 	bl	8000b2c <check_crc>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <sensor_init+0x76>
		return I2C_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <sensor_init+0x78>

	return I2C_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <sensor_measure>:


I2Cstatus_t sensor_measure(Pressure_Sensor *pr, const Temp_osr_t temp_osr, const Press_osr_t press_osr) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70bb      	strb	r3, [r7, #2]

	HAL_GPIO_WritePin(pr->VSENSE_port, pr->VSENSE_pin, GPIO_PIN_SET);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6858      	ldr	r0, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	891b      	ldrh	r3, [r3, #8]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	f003 fe49 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f003 fa48 	bl	80040ac <HAL_Delay>

	if (get_temperatures(pr, temp_osr) != I2C_OK)
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff59 	bl	8000ad8 <get_temperatures>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <sensor_measure+0x3a>
		return I2C_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e00a      	b.n	8000c46 <sensor_measure+0x50>

	if (read_pressure_register(pr, press_osr) != I2C_OK)
 8000c30:	78bb      	ldrb	r3, [r7, #2]
 8000c32:	4619      	mov	r1, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff64 	bl	8000b02 <read_pressure_register>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <sensor_measure+0x4e>
		return I2C_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <sensor_measure+0x50>

#if FUNCTION != TPMS_RELEASE
	calibrate(pr);
#endif

	return I2C_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <get_adc_conversion>:


/* ---------------------------------- Private Functions --------------------------------------- */
I2Cstatus_t get_adc_conversion(Pressure_Sensor *pr, uint8_t osr) {
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]

	uint8_t adc_data_array[3];

	if (HAL_I2C_Master_Transmit(pr->i2cHandle, DEV_ADDRESS << 1, &osr, 1, TIMEOUT) != HAL_OK)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	1cfa      	adds	r2, r7, #3
 8000c60:	2332      	movs	r3, #50	; 0x32
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2301      	movs	r3, #1
 8000c66:	21ec      	movs	r1, #236	; 0xec
 8000c68:	f003 ff0c 	bl	8004a84 <HAL_I2C_Master_Transmit>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <get_adc_conversion+0x28>
		return I2C_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e048      	b.n	8000d08 <get_adc_conversion+0xba>

	if ((osr < PRESS_OSR_2048) || ((osr >= TEMP_OSR_256) && (osr < TEMP_OSR_2048)))
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	2b45      	cmp	r3, #69	; 0x45
 8000c7a:	d905      	bls.n	8000c88 <get_adc_conversion+0x3a>
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b4f      	cmp	r3, #79	; 0x4f
 8000c80:	d906      	bls.n	8000c90 <get_adc_conversion+0x42>
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	2b55      	cmp	r3, #85	; 0x55
 8000c86:	d803      	bhi.n	8000c90 <get_adc_conversion+0x42>
		delay(4);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f000 f89e 	bl	8000dca <delay>
 8000c8e:	e002      	b.n	8000c96 <get_adc_conversion+0x48>
	else
		delay(11);
 8000c90:	200b      	movs	r0, #11
 8000c92:	f000 f89a 	bl	8000dca <delay>

	uint8_t adc_read_command = adc_read_cmd;
 8000c96:	2300      	movs	r3, #0
 8000c98:	72fb      	strb	r3, [r7, #11]
	if (HAL_I2C_Master_Transmit(pr->i2cHandle, DEV_ADDRESS << 1, &adc_read_command, 1, TIMEOUT) != HAL_OK)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f107 020b 	add.w	r2, r7, #11
 8000ca2:	2332      	movs	r3, #50	; 0x32
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	21ec      	movs	r1, #236	; 0xec
 8000caa:	f003 feeb 	bl	8004a84 <HAL_I2C_Master_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <get_adc_conversion+0x6a>
		return I2C_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e027      	b.n	8000d08 <get_adc_conversion+0xba>

	if (HAL_I2C_Master_Receive(pr->i2cHandle, DEV_ADDRESS << 1, adc_data_array, 3, TIMEOUT) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	f107 020c 	add.w	r2, r7, #12
 8000cc0:	2332      	movs	r3, #50	; 0x32
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	21ec      	movs	r1, #236	; 0xec
 8000cc8:	f003 ffd0 	bl	8004c6c <HAL_I2C_Master_Receive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <get_adc_conversion+0x88>
		return I2C_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e018      	b.n	8000d08 <get_adc_conversion+0xba>

	if (osr < TEMP_OSR_256) // Pressure measurement
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	2b4f      	cmp	r3, #79	; 0x4f
 8000cda:	d80a      	bhi.n	8000cf2 <get_adc_conversion+0xa4>
		pr->pressure_reg = (adc_data_array[0] << 16) | (adc_data_array[1] << 8) | adc_data_array[0];
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	041a      	lsls	r2, r3, #16
 8000ce0:	7b7b      	ldrb	r3, [r7, #13]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	7b3a      	ldrb	r2, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	621a      	str	r2, [r3, #32]
 8000cf0:	e009      	b.n	8000d06 <get_adc_conversion+0xb8>

	else			  // Temperature measurement
		pr->temperature_reg = (adc_data_array[0] << 16) | (adc_data_array[1] << 8) | adc_data_array[0];
 8000cf2:	7b3b      	ldrb	r3, [r7, #12]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	7b7b      	ldrb	r3, [r7, #13]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	7b3a      	ldrb	r2, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	61da      	str	r2, [r3, #28]

	return I2C_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <crc4>:


unsigned char crc4(unsigned short int n_prom[]) {  // Firstly, n_prom[] was unsigned int  // n_prom defined as 8x unsigned int (n_prom[8])
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

	int cnt; // simple counter
	unsigned int n_rem = 0; // crc remainder
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
	unsigned char n_bit;
	n_prom[0] = ((n_prom[0]) & 0x0FFF); // CRC byte is replaced by 0
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	801a      	strh	r2, [r3, #0]
	n_prom[7] = 0; // Subsidiary value, set to 0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	330e      	adds	r3, #14
 8000d2e:	2200      	movs	r2, #0
 8000d30:	801a      	strh	r2, [r3, #0]

	for (cnt = 0; cnt < 16; cnt++) {  // operation is performed on bytes
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e038      	b.n	8000daa <crc4+0x9a>
		if (cnt % 2 == 1)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	bfb8      	it	lt
 8000d42:	425b      	neglt	r3, r3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10a      	bne.n	8000d5e <crc4+0x4e>
			n_rem ^= (unsigned short) ((n_prom[cnt>>1]) & 0x00FF);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	105b      	asrs	r3, r3, #1
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4053      	eors	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	e00b      	b.n	8000d76 <crc4+0x66>
		else
			n_rem ^= (unsigned short) (n_prom[cnt>>1]>>8);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	105b      	asrs	r3, r3, #1
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4053      	eors	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]

		for (n_bit = 8; n_bit > 0; n_bit--) {
 8000d76:	2308      	movs	r3, #8
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e010      	b.n	8000d9e <crc4+0x8e>
			if (n_rem & (0x8000))
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <crc4+0x82>
				n_rem = (n_rem << 1) ^ 0x3000;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	e002      	b.n	8000d98 <crc4+0x88>
			else
				n_rem = (n_rem << 1);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
		for (n_bit = 8; n_bit > 0; n_bit--) {
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1eb      	bne.n	8000d7c <crc4+0x6c>
	for (cnt = 0; cnt < 16; cnt++) {  // operation is performed on bytes
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	ddc3      	ble.n	8000d38 <crc4+0x28>
		}
	}

	n_rem = ((n_rem >> 12) & 0x000F); // final 4-bit remainder is CRC code
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	0b1b      	lsrs	r3, r3, #12
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	613b      	str	r3, [r7, #16]
	return (n_rem ^ 0x00);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	b2db      	uxtb	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <delay>:


void delay(const uint16_t ms) {
 8000dca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	81fb      	strh	r3, [r7, #14]

	uint64_t tick0 = HAL_GetTick();
 8000dd6:	f003 f95d 	bl	8004094 <HAL_GetTick>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while(HAL_GetTick() - tick0 < ms);
 8000dea:	bf00      	nop
 8000dec:	f003 f952 	bl	8004094 <HAL_GetTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2200      	movs	r2, #0
 8000df4:	469a      	mov	sl, r3
 8000df6:	4693      	mov	fp, r2
 8000df8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dfc:	ebba 0402 	subs.w	r4, sl, r2
 8000e00:	eb6b 0503 	sbc.w	r5, fp, r3
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	2200      	movs	r2, #0
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4691      	mov	r9, r2
 8000e0c:	4544      	cmp	r4, r8
 8000e0e:	eb75 0309 	sbcs.w	r3, r5, r9
 8000e12:	d3eb      	bcc.n	8000dec <delay+0x22>
	return;
 8000e14:	bf00      	nop
}
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000e1e <SX1262SetStandby>:
/*****************************************************************************
*  @Description	  Sets the Radio chip to Standby Mode. This is a mode where
*                 it awaits for further commands
******************************************************************************/
void SX1262SetStandby(MCU* mcu, Radio* radio, StandbyMode_t standby_mode)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af02      	add	r7, sp, #8
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71fb      	strb	r3, [r7, #7]
	SX1262WriteCommand(mcu, radio, SET_STANDBY, &standby_mode, 4);
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	2204      	movs	r2, #4
 8000e30:	9200      	str	r2, [sp, #0]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f001 fb88 	bl	800254c <SX1262WriteCommand>

#if (FUNCTION == TPMS_RELEASE)
	radio->opMode = standby_mode;
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
#else
	SX1262GetStatus(mcu, radio);
#endif
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SX1262SetPacketType>:

/*****************************************************************************
*  @Description	  Sets the protocol used for the wireless communication
******************************************************************************/
void SX1262SetPacketType(MCU *mcu, Radio* radio, PacketType_t packet_type)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71fb      	strb	r3, [r7, #7]
	SX1262WriteCommand(mcu, radio, SET_PACKET_TYPE, &packet_type, 1);
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	228a      	movs	r2, #138	; 0x8a
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f001 fb71 	bl	800254c <SX1262WriteCommand>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <SX1262SetRfFrequency>:

/*****************************************************************************
*  @Description	  Sets the wireless communication frequency (430 - 928 MHz)
******************************************************************************/
void SX1262SetRfFrequency(MCU *mcu, Radio* radio, uint32_t rf_frequency)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	uint8_t tx_msg[4];
	uint32_t rf_freq;


	SX1262CalibrateImage(mcu, radio, rf_frequency);
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 fdcd 	bl	8001a28 <SX1262CalibrateImage>

	rf_freq = (uint32_t)((double)rf_frequency * FREQ_DIV / XTAL_FREQ); // can change with shifting <<25
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fae0 	bl	8000454 <__aeabi_ui2d>
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000e9c:	f7ff fb54 	bl	8000548 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	a317      	add	r3, pc, #92	; (adr r3, 8000f08 <SX1262SetRfFrequency+0x90>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fc75 	bl	800079c <__aeabi_ddiv>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fd57 	bl	800096c <__aeabi_d2uiz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	617b      	str	r3, [r7, #20]
	tx_msg[0] = rf_freq >> 24;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	0e1b      	lsrs	r3, r3, #24
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	743b      	strb	r3, [r7, #16]
	tx_msg[1] = rf_freq >> 16;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	0c1b      	lsrs	r3, r3, #16
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	747b      	strb	r3, [r7, #17]
	tx_msg[2] = rf_freq >> 8;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	74bb      	strb	r3, [r7, #18]
	tx_msg[3] = rf_freq;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	74fb      	strb	r3, [r7, #19]

	SX1262WriteCommand(mcu, radio, SET_RF_FREQUENCY, tx_msg, 4);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	2286      	movs	r2, #134	; 0x86
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f001 fb2d 	bl	800254c <SX1262WriteCommand>

	radio->rfFrequency = rf_frequency;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	417e8480 	.word	0x417e8480

08000f10 <SX1262SetPaConfig>:
 * +20 dBm				  0x03			  0x05			*
 * +17 dBm				  0x02			  0x03			*
 * +14 dBm				  0x02			  0x02			*
 */
void SX1262SetPaConfig(MCU* mcu, Radio* radio, int8_t power)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	71fb      	strb	r3, [r7, #7]

	uint8_t pa_duty_cycle;
	uint8_t hp_max;
	uint8_t tx_msg[4];

	if (power <= 14)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b0e      	cmp	r3, #14
 8000f24:	dc04      	bgt.n	8000f30 <SX1262SetPaConfig+0x20>
	{
		pa_duty_cycle = 0x02;
 8000f26:	2302      	movs	r3, #2
 8000f28:	75fb      	strb	r3, [r7, #23]
		hp_max = 0x02;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	75bb      	strb	r3, [r7, #22]
 8000f2e:	e015      	b.n	8000f5c <SX1262SetPaConfig+0x4c>
	}
	else if (power <= 17)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	dc04      	bgt.n	8000f42 <SX1262SetPaConfig+0x32>
	{
		pa_duty_cycle = 0x02;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	75fb      	strb	r3, [r7, #23]
		hp_max = 0x03;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	75bb      	strb	r3, [r7, #22]
 8000f40:	e00c      	b.n	8000f5c <SX1262SetPaConfig+0x4c>
	}
	else if (power <= 20)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b14      	cmp	r3, #20
 8000f48:	dc04      	bgt.n	8000f54 <SX1262SetPaConfig+0x44>
	{
		pa_duty_cycle = 0x03;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	75fb      	strb	r3, [r7, #23]
		hp_max = 0x05;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	e003      	b.n	8000f5c <SX1262SetPaConfig+0x4c>
	}
	else
	{
		pa_duty_cycle = 0x04;
 8000f54:	2304      	movs	r3, #4
 8000f56:	75fb      	strb	r3, [r7, #23]
		hp_max = 0x07;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	75bb      	strb	r3, [r7, #22]
	}

	tx_msg[0] = pa_duty_cycle;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	743b      	strb	r3, [r7, #16]
	tx_msg[1] = hp_max;
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	747b      	strb	r3, [r7, #17]
	tx_msg[2] = 0x00;
 8000f64:	2300      	movs	r3, #0
 8000f66:	74bb      	strb	r3, [r7, #18]
	tx_msg[3] = 0x01;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	74fb      	strb	r3, [r7, #19]
	SX1262WriteCommand(mcu, radio, SET_PA_CONFIG, tx_msg, 4);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2204      	movs	r2, #4
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	2295      	movs	r2, #149	; 0x95
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f001 fae7 	bl	800254c <SX1262WriteCommand>

	radio->paDutyCycle = pa_duty_cycle;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	7dfa      	ldrb	r2, [r7, #23]
 8000f82:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
	radio->hpMax = hp_max;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	7dba      	ldrb	r2, [r7, #22]
 8000f8a:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <SX1262SetTxParams>:

/******************************************************************************
*  @Description	  Sets the transmitted signal power in dBm and the PA ramp time
*******************************************************************************/
void SX1262SetTxParams(MCU* mcu, Radio* radio, int8_t power, RampTime_t ramp_time, bool workaround_on)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af02      	add	r7, sp, #8
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
	 uint8_t tx_msg[2];
	 uint8_t reg_data[1];

	 if (workaround_on) {
 8000fac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01c      	beq.n	8000fee <SX1262SetTxParams+0x58>
		 // WORKAROUND BEGIN - Protection of the chip against antenna mismatch - datasheet chapter 15.2
		 SX1262ReadRegister(mcu, radio, TX_CLAMP_CONFIG_REG, reg_data, 1);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2201      	movs	r2, #1
 8000fba:	9200      	str	r2, [sp, #0]
 8000fbc:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f001 fd4d 	bl	8002a62 <SX1262ReadRegister>
		 reg_data[0] = reg_data[0] | 0x1E;
 8000fc8:	7c3b      	ldrb	r3, [r7, #16]
 8000fca:	f043 031e 	orr.w	r3, r3, #30
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	743b      	strb	r3, [r7, #16]
		 SX1262WriteRegister(mcu, radio, TX_CLAMP_CONFIG_REG, reg_data, 1);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	9200      	str	r2, [sp, #0]
 8000fda:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f001 fccf 	bl	8002984 <SX1262WriteRegister>
	 	 // WORKAROUND END
		 radio->workaround_on = true;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
	 }

	 if (power > 22)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b16      	cmp	r3, #22
 8000ff4:	dd02      	ble.n	8000ffc <SX1262SetTxParams+0x66>
		 power = 22;
 8000ff6:	2316      	movs	r3, #22
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e006      	b.n	800100a <SX1262SetTxParams+0x74>
	 else if (power < -9)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	f113 0f09 	cmn.w	r3, #9
 8001004:	da01      	bge.n	800100a <SX1262SetTxParams+0x74>
		 power = -9;
 8001006:	23f7      	movs	r3, #247	; 0xf7
 8001008:	71fb      	strb	r3, [r7, #7]

	 tx_msg[0] = power;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	753b      	strb	r3, [r7, #20]
	 tx_msg[1] = (uint8_t) ramp_time;
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	757b      	strb	r3, [r7, #21]
	 SX1262WriteCommand(mcu, radio, SET_TX_PARAMS, tx_msg, 2);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2202      	movs	r2, #2
 8001018:	9200      	str	r2, [sp, #0]
 800101a:	228e      	movs	r2, #142	; 0x8e
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 fa94 	bl	800254c <SX1262WriteCommand>

	 radio->power = power;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
	 radio->rampTime = ramp_time;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SX1262SetBufferBaseAddress>:
/*****************************************************************************
*  @Description	  Sets the base address (offset from 0 to 255) for the
*                 transmitted / received payload. Data buffer has 256 Bytes
******************************************************************************/
void SX1262SetBufferBaseAddress(MCU* mcu, Radio* radio, uint8_t tx_base_address, uint8_t rx_base_address)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	460b      	mov	r3, r1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	4613      	mov	r3, r2
 8001050:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_msg[2];

    tx_msg[0] = tx_base_address;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	753b      	strb	r3, [r7, #20]
    tx_msg[1] = rx_base_address;
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	757b      	strb	r3, [r7, #21]
    SX1262WriteCommand(mcu, radio, SET_BUFFER_BASE_ADDRESS, tx_msg, 2);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2202      	movs	r2, #2
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	228f      	movs	r2, #143	; 0x8f
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f001 fa70 	bl	800254c <SX1262WriteCommand>

    radio->txBaseAddress = tx_base_address;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
    radio->rxBaseAddress = rx_base_address;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	79ba      	ldrb	r2, [r7, #6]
 8001078:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <SX1262SetPacketParams>:
/*****************************************************************************
*  @Description	  Sets the packet parameters for the protocol selected before.
*                 If the parameters correspond to a different packet
*                 type, it changes the packet type and then gives the params.
******************************************************************************/
void SX1262SetPacketParams(MCU *mcu, Radio *radio, PacketParams_t *packetParams) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	uint8_t tx_msg_len;
	uint8_t crcType = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	77bb      	strb	r3, [r7, #30]
	uint8_t tx_msg[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001094:	4a5c      	ldr	r2, [pc, #368]	; (8001208 <SX1262SetPacketParams+0x184>)
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	ca07      	ldmia	r2, {r0, r1, r2}
 800109c:	c303      	stmia	r3!, {r0, r1}
 800109e:	701a      	strb	r2, [r3, #0]

	/* Check if required configuration corresponds to the stored packet type
	   If not, silently update radio packet type     */
	if (radio->packetType != packetParams->PacketType) {
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d00b      	beq.n	80010c6 <SX1262SetPacketParams+0x42>
		SX1262SetPacketType(mcu, radio, packetParams->PacketType);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fec8 	bl	8000e4c <SX1262SetPacketType>
		radio->packetType = packetParams->PacketType;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
	}
	switch (packetParams->PacketType)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	f000 808c 	beq.w	80011e8 <SX1262SetPacketParams+0x164>
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	f300 808a 	bgt.w	80011ea <SX1262SetPacketParams+0x166>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <SX1262SetPacketParams+0x5c>
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d052      	beq.n	8001184 <SX1262SetPacketParams+0x100>
 80010de:	e084      	b.n	80011ea <SX1262SetPacketParams+0x166>
	{
	case PACKET_TYPE_GFSK:
		crcType = packetParams->Params.Gfsk.CrcType;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a5b      	ldrb	r3, [r3, #9]
 80010e4:	77bb      	strb	r3, [r7, #30]
		if (packetParams->Params.Gfsk.SyncWordLength > 0x40)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	2b40      	cmp	r3, #64	; 0x40
 80010ec:	d902      	bls.n	80010f4 <SX1262SetPacketParams+0x70>
			packetParams->Params.Gfsk.SyncWordLength = 0x40;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	715a      	strb	r2, [r3, #5]

		tx_msg_len = 9;
 80010f4:	2309      	movs	r3, #9
 80010f6:	77fb      	strb	r3, [r7, #31]
		tx_msg[0] = packetParams->Params.Gfsk.PreambleLength >> 8;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	885b      	ldrh	r3, [r3, #2]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	753b      	strb	r3, [r7, #20]
		tx_msg[1] = packetParams->Params.Gfsk.PreambleLength;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	885b      	ldrh	r3, [r3, #2]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	757b      	strb	r3, [r7, #21]
		tx_msg[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	75bb      	strb	r3, [r7, #22]
		tx_msg[3] = packetParams->Params.Gfsk.SyncWordLength;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	795b      	ldrb	r3, [r3, #5]
 8001116:	75fb      	strb	r3, [r7, #23]
		tx_msg[4] = packetParams->Params.Gfsk.AddrComp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	799b      	ldrb	r3, [r3, #6]
 800111c:	763b      	strb	r3, [r7, #24]
		tx_msg[5] = packetParams->Params.Gfsk.HeaderType;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	79db      	ldrb	r3, [r3, #7]
 8001122:	767b      	strb	r3, [r7, #25]
		tx_msg[6] = packetParams->Params.Gfsk.PayloadLength;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7a1b      	ldrb	r3, [r3, #8]
 8001128:	76bb      	strb	r3, [r7, #26]
		tx_msg[7] = crcType;
 800112a:	7fbb      	ldrb	r3, [r7, #30]
 800112c:	76fb      	strb	r3, [r7, #27]
		tx_msg[8] = packetParams->Params.Gfsk.DcFree;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7a9b      	ldrb	r3, [r3, #10]
 8001132:	773b      	strb	r3, [r7, #28]
		radio->packetParams.Params.Gfsk.PreambleLength = packetParams->Params.Gfsk.PreambleLength;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	885a      	ldrh	r2, [r3, #2]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
		radio->packetParams.Params.Gfsk.PreambleMinDetect = packetParams->Params.Gfsk.PreambleMinDetect;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791a      	ldrb	r2, [r3, #4]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
		radio->packetParams.Params.Gfsk.SyncWordLength = packetParams->Params.Gfsk.SyncWordLength;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	795a      	ldrb	r2, [r3, #5]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
		radio->packetParams.Params.Gfsk.AddrComp = packetParams->Params.Gfsk.AddrComp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	799a      	ldrb	r2, [r3, #6]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
		radio->packetParams.Params.Gfsk.HeaderType = packetParams->Params.Gfsk.HeaderType;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	79da      	ldrb	r2, [r3, #7]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
		radio->packetParams.Params.Gfsk.PayloadLength = packetParams->Params.Gfsk.PayloadLength;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7a1a      	ldrb	r2, [r3, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		radio->packetParams.Params.Gfsk.CrcType = crcType;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	7fba      	ldrb	r2, [r7, #30]
 8001174:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
		radio->packetParams.Params.Gfsk.DcFree = packetParams->Params.Gfsk.DcFree;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7a9a      	ldrb	r2, [r3, #10]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
		break;
 8001182:	e032      	b.n	80011ea <SX1262SetPacketParams+0x166>

	case PACKET_TYPE_LORA:
		tx_msg_len = 6;
 8001184:	2306      	movs	r3, #6
 8001186:	77fb      	strb	r3, [r7, #31]
		tx_msg[0] = packetParams->Params.LoRa.PreambleLength >> 8;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	899b      	ldrh	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	753b      	strb	r3, [r7, #20]
		tx_msg[1] = packetParams->Params.LoRa.PreambleLength;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	899b      	ldrh	r3, [r3, #12]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	757b      	strb	r3, [r7, #21]
		tx_msg[2] = packetParams->Params.LoRa.HeaderType;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7b9b      	ldrb	r3, [r3, #14]
 80011a0:	75bb      	strb	r3, [r7, #22]
		tx_msg[3] = packetParams->Params.LoRa.PayloadLength;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7bdb      	ldrb	r3, [r3, #15]
 80011a6:	75fb      	strb	r3, [r7, #23]
		tx_msg[4] = packetParams->Params.LoRa.CrcMode;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7c1b      	ldrb	r3, [r3, #16]
 80011ac:	763b      	strb	r3, [r7, #24]
		tx_msg[5] = packetParams->Params.LoRa.InvertIQ;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	767b      	strb	r3, [r7, #25]
		radio->packetParams.Params.LoRa.PreambleLength = packetParams->Params.LoRa.PreambleLength;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	899a      	ldrh	r2, [r3, #12]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		radio->packetParams.Params.LoRa.HeaderType = packetParams->Params.LoRa.HeaderType;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b9a      	ldrb	r2, [r3, #14]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
		radio->packetParams.Params.LoRa.PayloadLength = packetParams->Params.LoRa.PayloadLength;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7bda      	ldrb	r2, [r3, #15]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
		radio->packetParams.Params.LoRa.CrcMode = packetParams->Params.LoRa.CrcMode;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7c1a      	ldrb	r2, [r3, #16]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
		radio->packetParams.Params.LoRa.InvertIQ = packetParams->Params.LoRa.InvertIQ;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c5a      	ldrb	r2, [r3, #17]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
		break;
 80011e6:	e000      	b.n	80011ea <SX1262SetPacketParams+0x166>

	case PACKET_TYPE_LR_FHSS:
		// Not implemented
		break;
 80011e8:	bf00      	nop
	}

	SX1262WriteCommand(mcu, radio, SET_PACKET_PARAMS, tx_msg, tx_msg_len);
 80011ea:	f107 0214 	add.w	r2, r7, #20
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	228c      	movs	r2, #140	; 0x8c
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f001 f9a7 	bl	800254c <SX1262WriteCommand>
}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	08007d10 	.word	0x08007d10
 800120c:	00000000 	.word	0x00000000

08001210 <SX1262SetModulationParams>:
*  @Description	  Sets the modulation parameters for the protocol selected
*                 before. If the parameters correspond to a different packet
*                 type, it changes the packet type and then gives the params.
******************************************************************************/
void SX1262SetModulationParams(MCU* mcu, Radio* radio, ModulationParams_t *modulationParams)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af02      	add	r7, sp, #8
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
    uint8_t tx_msg_len;
    uint32_t bitrate;
    uint8_t tx_msg[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800121c:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <SX1262SetModulationParams+0x1a8>)
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001226:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if(radio->packetType != modulationParams->PacketType)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f893 23e0 	ldrb.w	r2, [r3, #992]	; 0x3e0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d00b      	beq.n	8001250 <SX1262SetModulationParams+0x40>
    {
       SX1262SetPacketType(mcu, radio, modulationParams->PacketType);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fe03 	bl	8000e4c <SX1262SetPacketType>
       radio->packetType = modulationParams->PacketType;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }


    switch(modulationParams->PacketType)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	f000 80a1 	beq.w	800139c <SX1262SetModulationParams+0x18c>
 800125a:	2b03      	cmp	r3, #3
 800125c:	f300 8092 	bgt.w	8001384 <SX1262SetModulationParams+0x174>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <SX1262SetModulationParams+0x5a>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d069      	beq.n	800133c <SX1262SetModulationParams+0x12c>
 8001268:	e08c      	b.n	8001384 <SX1262SetModulationParams+0x174>
    {
    case PACKET_TYPE_GFSK:

        tx_msg_len = 8;
 800126a:	2308      	movs	r3, #8
 800126c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        bitrate = (uint32_t)(32 * XTAL_FREQ / modulationParams->Params.Gfsk.BitRate);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8ed 	bl	8000454 <__aeabi_ui2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	a14a      	add	r1, pc, #296	; (adr r1, 80013a8 <SX1262SetModulationParams+0x198>)
 8001280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001284:	f7ff fa8a 	bl	800079c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fb6c 	bl	800096c <__aeabi_d2uiz>
 8001294:	4603      	mov	r3, r0
 8001296:	623b      	str	r3, [r7, #32]
        tx_msg[0] = bitrate >> 16;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	b2db      	uxtb	r3, r3
 800129e:	753b      	strb	r3, [r7, #20]
        tx_msg[1] = bitrate >> 8;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	757b      	strb	r3, [r7, #21]
        tx_msg[2] = bitrate;
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	75bb      	strb	r3, [r7, #22]
        tx_msg[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7b1b      	ldrb	r3, [r3, #12]
 80012b2:	75fb      	strb	r3, [r7, #23]
        tx_msg[4] = modulationParams->Params.Gfsk.Bandwidth;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7b5b      	ldrb	r3, [r3, #13]
 80012b8:	763b      	strb	r3, [r7, #24]
        uint32_t fdev = (uint32_t) ((float)(modulationParams->Params.Gfsk.FdevHz) * FREQ_DIV / XTAL_FREQ);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff f8e5 	bl	8000498 <__aeabi_f2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80012d6:	f7ff f937 	bl	8000548 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a333      	add	r3, pc, #204	; (adr r3, 80013b0 <SX1262SetModulationParams+0x1a0>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff fa58 	bl	800079c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fb3a 	bl	800096c <__aeabi_d2uiz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	61fb      	str	r3, [r7, #28]
        tx_msg[5] = fdev >> 16;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	0c1b      	lsrs	r3, r3, #16
 8001300:	b2db      	uxtb	r3, r3
 8001302:	767b      	strb	r3, [r7, #25]
        tx_msg[6] = fdev >> 8;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	76bb      	strb	r3, [r7, #26]
        tx_msg[7] = fdev;
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	76fb      	strb	r3, [r7, #27]

        radio->modulationParams.Params.Gfsk.BitRate = modulationParams->Params.Gfsk.BitRate;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
        radio->modulationParams.Params.Gfsk.ModulationShaping = modulationParams->Params.Gfsk.ModulationShaping;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7b1a      	ldrb	r2, [r3, #12]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
        radio->modulationParams.Params.Gfsk.Bandwidth = modulationParams->Params.Gfsk.Bandwidth;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7b5a      	ldrb	r2, [r3, #13]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
        radio->modulationParams.Params.Gfsk.FdevHz = modulationParams->Params.Gfsk.FdevHz;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
        break;
 800133a:	e023      	b.n	8001384 <SX1262SetModulationParams+0x174>

    case PACKET_TYPE_LORA:
        tx_msg_len = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        tx_msg[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7c1b      	ldrb	r3, [r3, #16]
 8001346:	753b      	strb	r3, [r7, #20]
        tx_msg[1] = modulationParams->Params.LoRa.Bandwidth;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7c5b      	ldrb	r3, [r3, #17]
 800134c:	757b      	strb	r3, [r7, #21]
        tx_msg[2] = modulationParams->Params.LoRa.CodingRate;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7c9b      	ldrb	r3, [r3, #18]
 8001352:	75bb      	strb	r3, [r7, #22]
        tx_msg[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7cdb      	ldrb	r3, [r3, #19]
 8001358:	75fb      	strb	r3, [r7, #23]

        radio->modulationParams.Params.LoRa.SpreadingFactor = modulationParams->Params.LoRa.SpreadingFactor;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7c1a      	ldrb	r2, [r3, #16]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        radio->modulationParams.Params.LoRa.Bandwidth = modulationParams->Params.LoRa.Bandwidth;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7c5a      	ldrb	r2, [r3, #17]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
        radio->modulationParams.Params.LoRa.CodingRate = modulationParams->Params.LoRa.CodingRate;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7c9a      	ldrb	r2, [r3, #18]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
        radio->modulationParams.Params.LoRa.LowDatarateOptimize = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7cda      	ldrb	r2, [r3, #19]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
        break;
 8001382:	bf00      	nop
    case PACKET_TYPE_LR_FHSS:
    	/* NOT IMPLEMENTED */
        return;
    }

    SX1262WriteCommand(mcu, radio, SET_MODULATION_PARAMS, tx_msg, tx_msg_len);
 8001384:	f107 0214 	add.w	r2, r7, #20
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4613      	mov	r3, r2
 8001390:	228b      	movs	r2, #139	; 0x8b
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f001 f8d9 	bl	800254c <SX1262WriteCommand>
 800139a:	e000      	b.n	800139e <SX1262SetModulationParams+0x18e>
        return;
 800139c:	bf00      	nop
}
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	41ce8480 	.word	0x41ce8480
 80013b0:	00000000 	.word	0x00000000
 80013b4:	417e8480 	.word	0x417e8480
 80013b8:	08007d1c 	.word	0x08007d1c

080013bc <SX1262SetDioIrqParams>:
*                 be created and stored in the device registers. dio_Mask
*                 determines which of these interrupts will create an interrupt
*                 on this specific DIO (set pin).
******************************************************************************/
void SX1262SetDioIrqParams(MCU* mcu, Radio* radio, Irq_t irqMask, Irq_t dio1Mask, Irq_t dio2Mask, Irq_t dio3Mask)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	460b      	mov	r3, r1
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_msg[8];

    tx_msg[0] = irqMask  >> 8;
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = irqMask;
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = dio1Mask >> 8;
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = dio1Mask;
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = dio2Mask >> 8;
 80013f2:	8c3b      	ldrh	r3, [r7, #32]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = dio2Mask;
 80013fc:	8c3b      	ldrh	r3, [r7, #32]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = dio3Mask >> 8;
 8001402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b29b      	uxth	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = dio3Mask;
 800140c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140e:	b2db      	uxtb	r3, r3
 8001410:	75fb      	strb	r3, [r7, #23]

    SX1262WriteCommand(mcu, radio, SET_DIO_IRQ_PARAMS, tx_msg, 8);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2208      	movs	r2, #8
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	2208      	movs	r2, #8
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f001 f894 	bl	800254c <SX1262WriteCommand>

    radio->irqMask  = irqMask;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
    radio->dio1Mask = dio1Mask;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	88ba      	ldrh	r2, [r7, #4]
 8001430:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a
    radio->dio2Mask = dio2Mask;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	8c3a      	ldrh	r2, [r7, #32]
 8001438:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
    radio->dio3Mask = dio3Mask;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001440:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SX1262SetGfskSyncWord>:

/*****************************************************************************
*  @Description	  Sets the syncWord by accessing the register in GFSK
******************************************************************************/
RadioState_t SX1262SetGfskSyncWord(MCU* mcu, Radio* radio, uint8_t *GfskSyncWord, uint8_t len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	70fb      	strb	r3, [r7, #3]
	return SX1262SafeWriteRegister(mcu, radio, SYNC_WORD_0_REG, GfskSyncWord, len);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f001 fbfd 	bl	8002c66 <SX1262SafeWriteRegister>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <SX1262SetTx>:
*                 whatever is present in the Buffer starting from the txBufBaseAddr
*                 until the TxLength has been completed. After the Tx it will get
*                 information of the status and return to fallback mode
***********************************************************************************/
void SX1262SetTx(MCU* mcu, Radio* radio, uint16_t timeout_duration /* [msec] */, bool wait)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b08a      	sub	sp, #40	; 0x28
 800147a:	af02      	add	r7, sp, #8
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	4611      	mov	r1, r2
 8001482:	461a      	mov	r2, r3
 8001484:	460b      	mov	r3, r1
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	4613      	mov	r3, r2
 800148a:	717b      	strb	r3, [r7, #5]



    uint8_t tx_msg[3];

    uint32_t timeout = timeout_duration << 6;
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	61fb      	str	r3, [r7, #28]

    if (timeout > 0xFFFFFF)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d302      	bcc.n	80014a0 <SX1262SetTx+0x2a>
    	timeout = 0xFFFFFF;
 800149a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800149e:	61fb      	str	r3, [r7, #28]

    tx_msg[0] = timeout >> 16;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	0c1b      	lsrs	r3, r3, #16
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	753b      	strb	r3, [r7, #20]
    tx_msg[1] = timeout >> 8;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	757b      	strb	r3, [r7, #21]
    tx_msg[2] = timeout;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	75bb      	strb	r3, [r7, #22]

    // function returns when Tx has started
    if (!wait)
 80014b6:	797b      	ldrb	r3, [r7, #5]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00f      	beq.n	80014e2 <SX1262SetTx+0x6c>
    {
    	SX1262WriteCommand(mcu, radio, SET_TX, tx_msg, 3);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2203      	movs	r2, #3
 80014c8:	9200      	str	r2, [sp, #0]
 80014ca:	2283      	movs	r2, #131	; 0x83
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f001 f83c 	bl	800254c <SX1262WriteCommand>
    	SX1262GetIrqStatus(mcu, radio);

    	if (radio->irq.txDone != 1)
    		radio->tx_failures++;
#endif
    	SX1262ClearIrqStatus(mcu, radio, 0xFFFF);
 80014d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f8a3 	bl	8001626 <SX1262ClearIrqStatus>
        		radio->tx_failures++;
        		break;
        	}
    	}
    }
}
 80014e0:	e038      	b.n	8001554 <SX1262SetTx+0xde>
    	SX1262ClearIrqStatus(mcu, radio, 0xFFFF);
 80014e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f89c 	bl	8001626 <SX1262ClearIrqStatus>
    	SX1262WriteCommand(mcu, radio, SET_TX, tx_msg, 3);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2203      	movs	r2, #3
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	2283      	movs	r2, #131	; 0x83
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f001 f826 	bl	800254c <SX1262WriteCommand>
    	SX1262GetStatus(mcu, radio);
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fc60 	bl	8001dc8 <SX1262GetStatus>
    	SX1262GetIrqStatus(mcu, radio);
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 f8f1 	bl	80016f2 <SX1262GetIrqStatus>
    	uint32_t current_tick = HAL_GetTick();
 8001510:	f002 fdc0 	bl	8004094 <HAL_GetTick>
 8001514:	61b8      	str	r0, [r7, #24]
    	while(radio->irq.txDone != 1)
 8001516:	e015      	b.n	8001544 <SX1262SetTx+0xce>
        	SX1262GetIrqStatus(mcu, radio);
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f8e9 	bl	80016f2 <SX1262GetIrqStatus>
        	if (HAL_GetTick() - current_tick > timeout_duration)
 8001520:	f002 fdb8 	bl	8004094 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	429a      	cmp	r2, r3
 800152e:	d909      	bls.n	8001544 <SX1262SetTx+0xce>
        		radio->tx_failures++;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f8b3 344c 	ldrh.w	r3, [r3, #1100]	; 0x44c
 8001536:	3301      	adds	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8a3 244c 	strh.w	r2, [r3, #1100]	; 0x44c
        		break;
 8001540:	bf00      	nop
}
 8001542:	e007      	b.n	8001554 <SX1262SetTx+0xde>
    	while(radio->irq.txDone != 1)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0e1      	beq.n	8001518 <SX1262SetTx+0xa2>
}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <SX1262SetSleep>:

/*****************************************************************************
*  @Description	  Sets the chip to sleep mode, minimuzing its current consumption
******************************************************************************/
void SX1262SetSleep(MCU* mcu, Radio* radio, SleepParams_t sleepConfig )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	80ba      	strh	r2, [r7, #4]
    uint8_t value = (sleepConfig.startMode << 2) | sleepConfig.rtcMode;
 8001568:	793b      	ldrb	r3, [r7, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	b25a      	sxtb	r2, r3
 800156e:	797b      	ldrb	r3, [r7, #5]
 8001570:	b25b      	sxtb	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b25b      	sxtb	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	75fb      	strb	r3, [r7, #23]

    SX1262WriteCommand(mcu, radio, SET_SLEEP, &value, 1);
 800157a:	f107 0317 	add.w	r3, r7, #23
 800157e:	2201      	movs	r2, #1
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	2284      	movs	r2, #132	; 0x84
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 ffe0 	bl	800254c <SX1262WriteCommand>
    radio->opMode = SLEEP_MODE;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2208      	movs	r2, #8
 8001590:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <SX1262SetRx>:
*  @Description	  Sets the chip to Rx mode with a given timeout. If the timeout
*                 is over or a message is detected, it gets to the fallbac mode,
*                 except if the timeout is 0xFFFF (continuous RX mode)
******************************************************************************/
RadioState_t SX1262SetRx(MCU* mcu, Radio* radio, uint16_t timeout_duration /* [ms] */)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	80fb      	strh	r3, [r7, #6]
	if ((radio->opMode != RX_MODE) && (radio->opMode != RX_DC_MODE))
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d008      	beq.n	80015c6 <SX1262SetRx+0x2a>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d003      	beq.n	80015c6 <SX1262SetRx+0x2a>
		radio->msg_pending = false;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5

    uint8_t tx_msg[3];

    uint32_t timeout = timeout_duration * 1000 << 6;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	019b      	lsls	r3, r3, #6
 80015d2:	617b      	str	r3, [r7, #20]
    if ((timeout_duration == 0xFFFF) || (timeout > 0xFFFFFF))
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	4293      	cmp	r3, r2
 80015dc:	d003      	beq.n	80015e6 <SX1262SetRx+0x4a>
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d302      	bcc.n	80015ec <SX1262SetRx+0x50>
    	timeout = 0xFFFFFF;  // Rx Continuous Mode
 80015e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015ea:	617b      	str	r3, [r7, #20]
    {
    	return RADIO_SAFE_WRITE_ERROR;
    }
#endif

    tx_msg[0] = timeout >> 16;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = timeout >> 8;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = timeout;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	74bb      	strb	r3, [r7, #18]
    SX1262WriteCommand(mcu, radio, SET_RX, tx_msg, 3);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	2203      	movs	r2, #3
 8001608:	9200      	str	r2, [sp, #0]
 800160a:	2282      	movs	r2, #130	; 0x82
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 ff9c 	bl	800254c <SX1262WriteCommand>

#if ((FUNCTION != TPMS_DEBUG) && (FUNCTION != TPMS_RELEASE))
    SX1262GetStatus(mcu, radio);
#else
    radio->opMode = RX_MODE;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2204      	movs	r2, #4
 8001618:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
#endif

    return RADIO_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <SX1262ClearIrqStatus>:
/*****************************************************************************
*  @Description	  Clears all the generated interrupts from the chip and from
*                 the radio struct
******************************************************************************/
void SX1262ClearIrqStatus(MCU* mcu, Radio* radio, uint16_t irq)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b088      	sub	sp, #32
 800162a:	af02      	add	r7, sp, #8
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	4613      	mov	r3, r2
 8001632:	80fb      	strh	r3, [r7, #6]
    uint8_t tx_msg[2];

    tx_msg[0] = irq >> 8;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	b29b      	uxth	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	753b      	strb	r3, [r7, #20]
    tx_msg[1] = irq;
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	757b      	strb	r3, [r7, #21]
    SX1262WriteCommand(mcu, radio, CLEAR_IRQ_STATUS, tx_msg, 2);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2202      	movs	r2, #2
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	2202      	movs	r2, #2
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 ff7b 	bl	800254c <SX1262WriteCommand>

    radio->irq_status = 0x0000;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2200      	movs	r2, #0
 800165a:	f8a3 2440 	strh.w	r2, [r3, #1088]	; 0x440

	radio->irq.txDone 			= 0;
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001664:	f36f 0300 	bfc	r3, #0, #1
 8001668:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.rxDone			= 0;
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001672:	f36f 0341 	bfc	r3, #1, #1
 8001676:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.preambleDetected = 0;
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001680:	f36f 0382 	bfc	r3, #2, #1
 8001684:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.syncWordValid 	= 0;
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800168e:	f36f 03c3 	bfc	r3, #3, #1
 8001692:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.headerValid		= 0;
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800169c:	f36f 1304 	bfc	r3, #4, #1
 80016a0:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.headerError 		= 0;
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80016aa:	f36f 1345 	bfc	r3, #5, #1
 80016ae:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.crcError 		= 0;
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80016b8:	f36f 1386 	bfc	r3, #6, #1
 80016bc:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.cadDone 			= 0;
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80016c6:	f36f 13c7 	bfc	r3, #7, #1
 80016ca:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
	radio->irq.cadDetected 		= 0;
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 80016d4:	f36f 0300 	bfc	r3, #0, #1
 80016d8:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443
	radio->irq.timeout 			= 0;
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 80016e2:	f36f 0341 	bfc	r3, #1, #1
 80016e6:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <SX1262GetIrqStatus>:
/*****************************************************************************
*  @Description	  Returns all the interrupts generated by the chip and updates
*                 the radio struct
******************************************************************************/
void SX1262GetIrqStatus(MCU* mcu, Radio* radio)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
    SX1262ReadCommand(mcu, radio, GET_IRQ_STATUS, 2);
 80016fc:	2302      	movs	r3, #2
 80016fe:	2212      	movs	r2, #18
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f001 f846 	bl	8002794 <SX1262ReadCommand>

    uint16_t irq_status = (radio->spi_read_msg[2] << 8) | radio->spi_read_msg[3];
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	78db      	ldrb	r3, [r3, #3]
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	81fb      	strh	r3, [r7, #14]

    /* Updates the struct irq */
    if ((irq_status & IRQ_TX_DONE) == IRQ_TX_DONE)
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <SX1262GetIrqStatus+0x44>
    	radio->irq.txDone = 1;
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 8001734:	e006      	b.n	8001744 <SX1262GetIrqStatus+0x52>
    else
    	radio->irq.txDone = 0;
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800173c:	f36f 0300 	bfc	r3, #0, #1
 8001740:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_RX_DONE) == IRQ_RX_DONE)
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <SX1262GetIrqStatus+0x6c>
    	radio->irq.rxDone = 1;
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 800175c:	e006      	b.n	800176c <SX1262GetIrqStatus+0x7a>
    else
    	radio->irq.rxDone = 0;
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001764:	f36f 0341 	bfc	r3, #1, #1
 8001768:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED)
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <SX1262GetIrqStatus+0x94>
    	radio->irq.preambleDetected = 1;
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 8001784:	e006      	b.n	8001794 <SX1262GetIrqStatus+0xa2>
    else
    	radio->irq.preambleDetected = 0;
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800178c:	f36f 0382 	bfc	r3, #2, #1
 8001790:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_SYNC_WORD_VALID) == IRQ_SYNC_WORD_VALID)
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <SX1262GetIrqStatus+0xbc>
    	radio->irq.syncWordValid = 1;
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 80017ac:	e006      	b.n	80017bc <SX1262GetIrqStatus+0xca>
    else
    	radio->irq.syncWordValid = 0;
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80017b4:	f36f 03c3 	bfc	r3, #3, #1
 80017b8:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_HEADER_VALID) == IRQ_HEADER_VALID)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <SX1262GetIrqStatus+0xe4>
    	radio->irq.headerValid = 1;
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 80017d4:	e006      	b.n	80017e4 <SX1262GetIrqStatus+0xf2>
    else
    	radio->irq.headerValid = 0;
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80017dc:	f36f 1304 	bfc	r3, #4, #1
 80017e0:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR)
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <SX1262GetIrqStatus+0x10c>
    	radio->irq.headerError = 1;
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 80017f4:	f043 0320 	orr.w	r3, r3, #32
 80017f8:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 80017fc:	e006      	b.n	800180c <SX1262GetIrqStatus+0x11a>
    else
    	radio->irq.headerError = 0;
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001804:	f36f 1345 	bfc	r3, #5, #1
 8001808:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_CRC_ERROR) == IRQ_CRC_ERROR)
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <SX1262GetIrqStatus+0x134>
    	radio->irq.crcError = 1;
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800181c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001820:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 8001824:	e006      	b.n	8001834 <SX1262GetIrqStatus+0x142>
    else
    	radio->irq.crcError = 0;
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 800182c:	f36f 1386 	bfc	r3, #6, #1
 8001830:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_CAD_DONE) == IRQ_CAD_DONE)
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <SX1262GetIrqStatus+0x15c>
    	radio->irq.cadDone = 1;
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442
 800184c:	e006      	b.n	800185c <SX1262GetIrqStatus+0x16a>
    else
    	radio->irq.cadDone = 0;
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	f892 3442 	ldrb.w	r3, [r2, #1090]	; 0x442
 8001854:	f36f 13c7 	bfc	r3, #7, #1
 8001858:	f882 3442 	strb.w	r3, [r2, #1090]	; 0x442

    if ((irq_status & IRQ_CAD_DETECTED) == IRQ_CAD_DETECTED)
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <SX1262GetIrqStatus+0x184>
    	radio->irq.cadDetected = 1;
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443
 8001874:	e006      	b.n	8001884 <SX1262GetIrqStatus+0x192>
    else
    	radio->irq.cadDetected = 0;
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 800187c:	f36f 0300 	bfc	r3, #0, #1
 8001880:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443

    if ((irq_status & IRQ_TIMEOUT) == IRQ_TIMEOUT)
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <SX1262GetIrqStatus+0x1ac>
    	radio->irq.timeout = 1;
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443
    else
    	radio->irq.timeout = 0;
}
 800189c:	e006      	b.n	80018ac <SX1262GetIrqStatus+0x1ba>
    	radio->irq.timeout = 0;
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	f892 3443 	ldrb.w	r3, [r2, #1091]	; 0x443
 80018a4:	f36f 0341 	bfc	r3, #1, #1
 80018a8:	f882 3443 	strb.w	r3, [r2, #1091]	; 0x443
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <SX1262GetRxBufferStatus>:
/*****************************************************************************
*  @Description	  Gets the position of the first byte of the received message
*                 as well as its length in the Buffer
******************************************************************************/
void SX1262GetRxBufferStatus(MCU* mcu, Radio* radio)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
    SX1262ReadCommand(mcu, radio, GET_RX_BUFFER_STATUS, 2);
 80018be:	2302      	movs	r3, #2
 80018c0:	2213      	movs	r2, #19
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 ff65 	bl	8002794 <SX1262ReadCommand>

    radio->payloadLength = radio->spi_read_msg[2];
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	789a      	ldrb	r2, [r3, #2]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
    radio->rxStartBufferPointer = radio->spi_read_msg[3];
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	78da      	ldrb	r2, [r3, #3]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <SX1262Calibrate>:

/*****************************************************************************
*  @Description	  Begins the calibration of the parts declared in calibParams
******************************************************************************/
void SX1262Calibrate(MCU* mcu, Radio* radio, CalibrationParams_t calibParam)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b088      	sub	sp, #32
 80018ea:	af02      	add	r7, sp, #8
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	713a      	strb	r2, [r7, #4]
    uint8_t value = (calibParam.Img << 6) 	   |
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	019b      	lsls	r3, r3, #6
 80018fc:	b25a      	sxtb	r2, r3
    				(calibParam.ADCBulkP << 5) |
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	015b      	lsls	r3, r3, #5
    uint8_t value = (calibParam.Img << 6) 	   |
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b25a      	sxtb	r2, r3
					(calibParam.ADCBulkN << 4) |
 800190e:	793b      	ldrb	r3, [r7, #4]
 8001910:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	011b      	lsls	r3, r3, #4
    				(calibParam.ADCBulkP << 5) |
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b25a      	sxtb	r2, r3
    		        (calibParam.ADCPulse << 3) |
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	00db      	lsls	r3, r3, #3
					(calibParam.ADCBulkN << 4) |
 8001928:	b25b      	sxtb	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b25a      	sxtb	r2, r3
					(calibParam.PLL << 2) 	   |
 800192e:	793b      	ldrb	r3, [r7, #4]
 8001930:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	009b      	lsls	r3, r3, #2
    		        (calibParam.ADCPulse << 3) |
 8001938:	b25b      	sxtb	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b25a      	sxtb	r2, r3
					(calibParam.RC13M << 1)    |
 800193e:	793b      	ldrb	r3, [r7, #4]
 8001940:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	005b      	lsls	r3, r3, #1
					(calibParam.PLL << 2) 	   |
 8001948:	b25b      	sxtb	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b25a      	sxtb	r2, r3
					(calibParam.RC64K);
 800194e:	793b      	ldrb	r3, [r7, #4]
 8001950:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	b25b      	sxtb	r3, r3
					(calibParam.RC13M << 1)    |
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2db      	uxtb	r3, r3
    uint8_t value = (calibParam.Img << 6) 	   |
 800195e:	75fb      	strb	r3, [r7, #23]

    SX1262WriteCommand(mcu, radio, CALIBRATE, &value, 1);
 8001960:	f107 0317 	add.w	r3, r7, #23
 8001964:	2201      	movs	r2, #1
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	2289      	movs	r2, #137	; 0x89
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 fded 	bl	800254c <SX1262WriteCommand>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <SX1262SetDio2AsRfSwitchCtrl>:
*  @Description	  Enables / Disables the DIO2 pin to control the RF switch.
*                 If it is enabled, it can generate no other interrupts even
*                 if they are mapped on it
******************************************************************************/
void SX1262SetDio2AsRfSwitchCtrl(MCU* mcu, Radio* radio, bool enable)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b088      	sub	sp, #32
 800197e:	af02      	add	r7, sp, #8
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	4613      	mov	r3, r2
 8001986:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_switch = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
	if (enable)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SX1262SetDio2AsRfSwitchCtrl+0x1c>
		enable_switch = 1;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]

    SX1262WriteCommand(mcu, radio, SET_RF_SWITCH_MODE, &enable_switch, 1);
 8001996:	f107 0317 	add.w	r3, r7, #23
 800199a:	2201      	movs	r2, #1
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	229d      	movs	r2, #157	; 0x9d
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fdd2 	bl	800254c <SX1262WriteCommand>
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <SX1262SetDio3AsTcxoCtrl>:
*                 If it is enabled, it can generate no interrupts even
*                 if they are mapped on it.
*                 IMAGE CALIBRATION SHOULD BE CALLED AFTER THIS COMMAND
******************************************************************************/
void SX1262SetDio3AsTcxoCtrl(MCU* mcu, Radio* radio, TcxoCtrlVoltage_t tcxoVoltage, uint8_t delay_duration)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	460b      	mov	r3, r1
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71bb      	strb	r3, [r7, #6]
	if (radio->opMode != STDBY_RC_MODE)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <SX1262SetDio3AsTcxoCtrl+0x2a>
		SX1262SetStandby(mcu, radio, STDBY_RC);
 80019d0:	2200      	movs	r2, #0
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fa22 	bl	8000e1e <SX1262SetStandby>

	uint8_t tx_msg[4];

	uint32_t delay = delay_duration << 6;
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	617b      	str	r3, [r7, #20]

    if (tcxoVoltage > TCXO_MAX_VOLTAGE) {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <SX1262SetDio3AsTcxoCtrl+0x3a>
    	tcxoVoltage = TCXO_MAX_VOLTAGE;   // Voltage limit for protection of the TCXO
 80019e6:	2302      	movs	r3, #2
 80019e8:	71fb      	strb	r3, [r7, #7]
    }

    tx_msg[0] = tcxoVoltage;
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = delay >> 16;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = delay >> 8;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = delay;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	74fb      	strb	r3, [r7, #19]

    SX1262WriteCommand(mcu, radio, SET_TCXO_MODE, tx_msg, 4);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2204      	movs	r2, #4
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	2297      	movs	r2, #151	; 0x97
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fd9b 	bl	800254c <SX1262WriteCommand>
    radio->tcxoVolt = tcxoVoltage;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <SX1262CalibrateImage>:
/*****************************************************************************
*  @Description	  It calibrates the frequency band in which the chip is
*                 about to transmit / receive
******************************************************************************/
void SX1262CalibrateImage(MCU* mcu, Radio* radio, uint32_t freq)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <SX1262CalibrateImage+0x88>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d904      	bls.n	8001a46 <SX1262CalibrateImage+0x1e>
    {
        calFreq[0] = 0xE1;
 8001a3c:	23e1      	movs	r3, #225	; 0xe1
 8001a3e:	753b      	strb	r3, [r7, #20]
        calFreq[1] = 0xE9;
 8001a40:	23e9      	movs	r3, #233	; 0xe9
 8001a42:	757b      	strb	r3, [r7, #21]
 8001a44:	e022      	b.n	8001a8c <SX1262CalibrateImage+0x64>
    }
    else if( freq > 850000000 )
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <SX1262CalibrateImage+0x8c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d904      	bls.n	8001a58 <SX1262CalibrateImage+0x30>
    {
        calFreq[0] = 0xD7;
 8001a4e:	23d7      	movs	r3, #215	; 0xd7
 8001a50:	753b      	strb	r3, [r7, #20]
        calFreq[1] = 0xDB;
 8001a52:	23db      	movs	r3, #219	; 0xdb
 8001a54:	757b      	strb	r3, [r7, #21]
 8001a56:	e019      	b.n	8001a8c <SX1262CalibrateImage+0x64>
    }
    else if( freq > 770000000 )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <SX1262CalibrateImage+0x90>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d904      	bls.n	8001a6a <SX1262CalibrateImage+0x42>
    {
        calFreq[0] = 0xC1;
 8001a60:	23c1      	movs	r3, #193	; 0xc1
 8001a62:	753b      	strb	r3, [r7, #20]
        calFreq[1] = 0xC5;
 8001a64:	23c5      	movs	r3, #197	; 0xc5
 8001a66:	757b      	strb	r3, [r7, #21]
 8001a68:	e010      	b.n	8001a8c <SX1262CalibrateImage+0x64>
    }
    else if( freq > 460000000 )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <SX1262CalibrateImage+0x94>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d904      	bls.n	8001a7c <SX1262CalibrateImage+0x54>
    {
        calFreq[0] = 0x75;
 8001a72:	2375      	movs	r3, #117	; 0x75
 8001a74:	753b      	strb	r3, [r7, #20]
        calFreq[1] = 0x81;
 8001a76:	2381      	movs	r3, #129	; 0x81
 8001a78:	757b      	strb	r3, [r7, #21]
 8001a7a:	e007      	b.n	8001a8c <SX1262CalibrateImage+0x64>
    }
    else if( freq > 425000000 )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <SX1262CalibrateImage+0x98>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d903      	bls.n	8001a8c <SX1262CalibrateImage+0x64>
    {
        calFreq[0] = 0x6B;
 8001a84:	236b      	movs	r3, #107	; 0x6b
 8001a86:	753b      	strb	r3, [r7, #20]
        calFreq[1] = 0x6F;
 8001a88:	236f      	movs	r3, #111	; 0x6f
 8001a8a:	757b      	strb	r3, [r7, #21]
    }
    SX1262WriteCommand(mcu, radio, CALIBRATE_IMAGE, calFreq, 2);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2202      	movs	r2, #2
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	2298      	movs	r2, #152	; 0x98
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 fd57 	bl	800254c <SX1262WriteCommand>
    radio->ImageCalibrated = true;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	35a4e900 	.word	0x35a4e900
 8001ab4:	32a9f880 	.word	0x32a9f880
 8001ab8:	2de54480 	.word	0x2de54480
 8001abc:	1b6b0b00 	.word	0x1b6b0b00
 8001ac0:	1954fc40 	.word	0x1954fc40

08001ac4 <SX1262SetRegulatorMode>:
/*****************************************************************************
*  @Description	  Used to choose between internal LDO and internal DC-DC.
*                 When using Dc-DC the consumption can be dropped to a half
******************************************************************************/
void SX1262SetRegulatorMode(MCU* mcu, Radio* radio, RegulatorMode_t mode)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	71fb      	strb	r3, [r7, #7]
    SX1262WriteCommand(mcu, radio, SET_REGULATOR_MODE, &mode, 1);
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	2296      	movs	r2, #150	; 0x96
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fd35 	bl	800254c <SX1262WriteCommand>

    radio->regMode = mode;
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <SX1262SetRxTxFallbackMode>:
/*****************************************************************************
*  @Description	  Dictates in which mode the chip will get to after a packet
*                 transmission / reception
******************************************************************************/
void SX1262SetRxTxFallbackMode(MCU* mcu, Radio* radio, FallbackMode_t fallback_mode)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af02      	add	r7, sp, #8
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71fb      	strb	r3, [r7, #7]
	SX1262WriteCommand(mcu, radio, SET_RX_TX_FALLBACK_MODE, &fallback_mode, 1);
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	2201      	movs	r2, #1
 8001b04:	9200      	str	r2, [sp, #0]
 8001b06:	2293      	movs	r2, #147	; 0x93
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fd1e 	bl	800254c <SX1262WriteCommand>

	radio->fallbackMode = fallback_mode;
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <SX1262SetPayload>:

/*****************************************************************************
*  @Description	  Writes the data to be transmitted to the Data Buffer
******************************************************************************/
void SX1262SetPayload(MCU* mcu, Radio* radio, uint8_t *payload, uint8_t size)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	70fb      	strb	r3, [r7, #3]
    SX1262WriteBuffer(mcu, radio, 0x00, payload, size);
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f001 f903 	bl	8002d44 <SX1262WriteBuffer>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <SX1262SendPayload>:
*                 sets the chip to TX mode, in order to start the transmission
*                 wait boolean defines if the function returns when the TX has
*                 started (false) or when it is completed (true)
******************************************************************************/
void SX1262SendPayload(MCU* mcu, Radio* radio, uint8_t *payload, uint8_t size, uint8_t timeout, bool wait)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	70fb      	strb	r3, [r7, #3]
    SX1262SetPayload(mcu, radio, payload, size);
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff ffe0 	bl	8001b20 <SX1262SetPayload>
    SX1262SetTx(mcu, radio, timeout, wait);
 8001b60:	7e3b      	ldrb	r3, [r7, #24]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	7f3b      	ldrb	r3, [r7, #28]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff fc84 	bl	8001476 <SX1262SetTx>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <SX1262GetPacketType>:

/*****************************************************************************
*  @Description	  Returns the packet type stored in the chip's registers
******************************************************************************/
void SX1262GetPacketType(MCU* mcu, Radio* radio)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	SX1262ReadCommand(mcu, radio, GET_PACKET_TYPE, 1);
 8001b80:	2301      	movs	r3, #1
 8001b82:	2211      	movs	r2, #17
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fe04 	bl	8002794 <SX1262ReadCommand>

	radio->packetType = radio->spi_read_msg[2];
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	789a      	ldrb	r2, [r3, #2]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <SX1262GetPacketStatus>:
/*****************************************************************************
*  @Description	  Returns information about the received signal power and
*                 possible errors (according to the protocol used)
******************************************************************************/
void SX1262GetPacketStatus(MCU* mcu, Radio* radio)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
    SX1262ReadCommand(mcu, radio, GET_PACKET_STATUS, 3);
 8001ba8:	2303      	movs	r3, #3
 8001baa:	2214      	movs	r2, #20
 8001bac:	6839      	ldr	r1, [r7, #0]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fdf0 	bl	8002794 <SX1262ReadCommand>

    switch(radio->function)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <SX1262GetPacketStatus+0x26>
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d033      	beq.n	8001c2a <SX1262GetPacketStatus+0x8c>

    case TPMS:
    	radio->TpmsRssiAvg = -radio->spi_read_msg[4] >> 1;
    	break;
    }
}
 8001bc2:	e03b      	b.n	8001c3c <SX1262GetPacketStatus+0x9e>
    	switch(radio->packetType)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <SX1262GetPacketStatus+0x36>
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d011      	beq.n	8001bf6 <SX1262GetPacketStatus+0x58>
    		break;
 8001bd2:	e029      	b.n	8001c28 <SX1262GetPacketStatus+0x8a>
    		radio->packetStatus.Gfsk.RssiSync = -radio->spi_read_msg[3] >> 1;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	425b      	negs	r3, r3
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
    		radio->packetStatus.Gfsk.RssiAvg  = -radio->spi_read_msg[4] >> 1;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	425b      	negs	r3, r3
 8001bea:	105b      	asrs	r3, r3, #1
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
    		break;
 8001bf4:	e018      	b.n	8001c28 <SX1262GetPacketStatus+0x8a>
    		radio->packetStatus.LoRa.RssiPacket       = -radio->spi_read_msg[2] >> 1;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	105b      	asrs	r3, r3, #1
 8001bfe:	b25a      	sxtb	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    		radio->packetStatus.LoRa.SnrPacket        = ((int8_t)radio->spi_read_msg[3]) >> 2;   // Returns SNR value [dB] rounded to the nearest integer value
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	109b      	asrs	r3, r3, #2
 8001c0e:	b25a      	sxtb	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    		radio->packetStatus.LoRa.SignalRssiPacket = -radio->spi_read_msg[4] >> 1;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	105b      	asrs	r3, r3, #1
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    		break;
 8001c26:	bf00      	nop
    	break;
 8001c28:	e008      	b.n	8001c3c <SX1262GetPacketStatus+0x9e>
    	radio->TpmsRssiAvg = -radio->spi_read_msg[4] >> 1;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	425b      	negs	r3, r3
 8001c30:	105b      	asrs	r3, r3, #1
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
    	break;
 8001c3a:	bf00      	nop
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SX1262GetDeviceErrors>:
*  @Description	  Returns possible device errors during calibration. The most
*                 common is the XoscStartErr and special care must be given to
*                 the soldering of the TCXO as well as the commands order
******************************************************************************/
void SX1262GetDeviceErrors(MCU* mcu, Radio* radio)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    SX1262ReadCommand(mcu, radio, GET_DEVICE_ERRORS, 2);
 8001c4e:	2302      	movs	r3, #2
 8001c50:	2217      	movs	r2, #23
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fd9d 	bl	8002794 <SX1262ReadCommand>

    radio->errors.PaRampErr     = (radio->spi_read_msg[2] & 0x01);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	b2d9      	uxtb	r1, r3
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001c6a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001c6e:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.PllLockErr    = (radio->spi_read_msg[3] & 0x40) >> 6;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	78db      	ldrb	r3, [r3, #3]
 8001c76:	119b      	asrs	r3, r3, #6
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	b2d9      	uxtb	r1, r3
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001c84:	f361 1386 	bfi	r3, r1, #6, #1
 8001c88:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.XoscStartErr  = (radio->spi_read_msg[3] & 0x20) >> 5;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	78db      	ldrb	r3, [r3, #3]
 8001c90:	115b      	asrs	r3, r3, #5
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	b2d9      	uxtb	r1, r3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001c9e:	f361 1345 	bfi	r3, r1, #5, #1
 8001ca2:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.ImgCalibErr   = (radio->spi_read_msg[3] & 0x10) >> 4;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	78db      	ldrb	r3, [r3, #3]
 8001caa:	111b      	asrs	r3, r3, #4
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	b2d9      	uxtb	r1, r3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001cb8:	f361 1304 	bfi	r3, r1, #4, #1
 8001cbc:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.AdcCalibErr   = (radio->spi_read_msg[3] & 0x08) >> 3;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	78db      	ldrb	r3, [r3, #3]
 8001cc4:	10db      	asrs	r3, r3, #3
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	b2d9      	uxtb	r1, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001cd2:	f361 03c3 	bfi	r3, r1, #3, #1
 8001cd6:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.PllCalibErr   = (radio->spi_read_msg[3] & 0x04) >> 2;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	109b      	asrs	r3, r3, #2
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	b2d9      	uxtb	r1, r3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001cec:	f361 0382 	bfi	r3, r1, #2, #1
 8001cf0:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.Rc13mCalibErr = (radio->spi_read_msg[3] & 0x02) >> 1;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	105b      	asrs	r3, r3, #1
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	b2d9      	uxtb	r1, r3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d06:	f361 0341 	bfi	r3, r1, #1, #1
 8001d0a:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.Rc64kCalibErr = (radio->spi_read_msg[3] & 0x01);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	78db      	ldrb	r3, [r3, #3]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	b2d9      	uxtb	r1, r3
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d1e:	f361 0300 	bfi	r3, r1, #0, #1
 8001d22:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <SX1262ClearDeviceErrors>:
/*****************************************************************************
*  @Description	  Clears the aforementioned calibration errors from the chip's
*                 registers as well as the radio struct
******************************************************************************/
void SX1262ClearDeviceErrors(MCU* mcu, Radio* radio)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af02      	add	r7, sp, #8
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    uint8_t tx_msg[2] = {0x00, 0x00};
 8001d38:	2300      	movs	r3, #0
 8001d3a:	81bb      	strh	r3, [r7, #12]
    SX1262WriteCommand(mcu, radio, CLEAR_DEVICE_ERRORS, tx_msg, 2);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	2202      	movs	r2, #2
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	2207      	movs	r2, #7
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fbff 	bl	800254c <SX1262WriteCommand>

    radio->errors.PaRampErr     = 0;
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d54:	f36f 13c7 	bfc	r3, #7, #1
 8001d58:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.PllLockErr    = 0;
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d62:	f36f 1386 	bfc	r3, #6, #1
 8001d66:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.XoscStartErr  = 0;
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d70:	f36f 1345 	bfc	r3, #5, #1
 8001d74:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.ImgCalibErr   = 0;
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d7e:	f36f 1304 	bfc	r3, #4, #1
 8001d82:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.AdcCalibErr   = 0;
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d8c:	f36f 03c3 	bfc	r3, #3, #1
 8001d90:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.PllCalibErr   = 0;
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001d9a:	f36f 0382 	bfc	r3, #2, #1
 8001d9e:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.Rc13mCalibErr = 0;
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001da8:	f36f 0341 	bfc	r3, #1, #1
 8001dac:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
    radio->errors.Rc64kCalibErr = 0;
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8001db6:	f36f 0300 	bfc	r3, #0, #1
 8001dba:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <SX1262GetStatus>:

/*****************************************************************************
*  @Description	  Returns the operating mode of the chip
******************************************************************************/
void SX1262GetStatus(MCU* mcu, Radio* radio)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	SX1262ReadCommand(mcu, radio, GET_STATUS, 1);
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	22c0      	movs	r2, #192	; 0xc0
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fcdb 	bl	8002794 <SX1262ReadCommand>

	uint8_t chip_mode = (radio->spi_read_msg[1] >> 4) & 0x07;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	73fb      	strb	r3, [r7, #15]

	switch (chip_mode)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3b02      	subs	r3, #2
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d826      	bhi.n	8001e42 <SX1262GetStatus+0x7a>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <SX1262GetStatus+0x34>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e1b 	.word	0x08001e1b
 8001e04:	08001e25 	.word	0x08001e25
 8001e08:	08001e2f 	.word	0x08001e2f
 8001e0c:	08001e39 	.word	0x08001e39
		{
		case 0x02:
			radio->opMode = STDBY_RC_MODE;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
			break;
 8001e18:	e018      	b.n	8001e4c <SX1262GetStatus+0x84>
		case 0x03:
			radio->opMode = STDBY_XOSC_MODE;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
			break;
 8001e22:	e013      	b.n	8001e4c <SX1262GetStatus+0x84>
		case 0x04:
			radio->opMode = FS_MODE;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
			break;
 8001e2c:	e00e      	b.n	8001e4c <SX1262GetStatus+0x84>
		case 0x05:
			radio->opMode = RX_MODE;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2204      	movs	r2, #4
 8001e32:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
			break;
 8001e36:	e009      	b.n	8001e4c <SX1262GetStatus+0x84>
		case 0x06:
			radio->opMode = TX_MODE;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
			break;
 8001e40:	e004      	b.n	8001e4c <SX1262GetStatus+0x84>
		default:
			radio->opMode = UNDEFINED;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2205      	movs	r2, #5
 8001e46:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
	if (radio->opMode == TX_MODE)
		HAL_GPIO_WritePin(mcu->radio_tx_led.type, mcu->radio_tx_led.pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(mcu->radio_tx_led.type, mcu->radio_tx_led.pin, GPIO_PIN_RESET);
#endif
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <SX1262Reset>:
/********************************************************************************
*  @Description	  Drives the NRESET pin low, so it erases all registers / buffers
*                 and fully resets the chip, before getting it high again
*********************************************************************************/
void SX1262Reset(MCU* mcu)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(mcu->nreset.type, mcu->nreset.pin, GPIO_PIN_RESET);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68d8      	ldr	r0, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8a1b      	ldrh	r3, [r3, #16]
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	f002 fd1e 	bl	80048a8 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f002 f91d 	bl	80040ac <HAL_Delay>
  HAL_GPIO_WritePin(mcu->nreset.type, mcu->nreset.pin, GPIO_PIN_SET);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68d8      	ldr	r0, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a1b      	ldrh	r3, [r3, #16]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f002 fd13 	bl	80048a8 <HAL_GPIO_WritePin>

  while(HAL_GPIO_ReadPin(mcu->busy.type, mcu->busy.pin) != GPIO_PIN_RESET);  // Wait until BUSY pin goes LOW
 8001e82:	bf00      	nop
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8b1b      	ldrh	r3, [r3, #24]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f002 fcf2 	bl	8004878 <HAL_GPIO_ReadPin>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f4      	bne.n	8001e84 <SX1262Reset+0x30>
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <SX1262SetOCP>:
/*****************************************************************************
*  @Description	  Sets maximum draw current in the chip for overcurrent
*                 protection purposes
******************************************************************************/
void SX1262SetOCP(MCU* mcu, Radio* radio, uint16_t value /* [mA] */)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ocp_value = 0xFF;//(uint8_t)(1.0 * value / 2.5);
 8001eb2:	23ff      	movs	r3, #255	; 0xff
 8001eb4:	75fb      	strb	r3, [r7, #23]

  SX1262WriteRegister(mcu, radio, OCP_CONFIGURATION_REG, &ocp_value, 1);
 8001eb6:	f107 0317 	add.w	r3, r7, #23
 8001eba:	2201      	movs	r2, #1
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fd5d 	bl	8002984 <SX1262WriteRegister>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <SX1262RfSwitchInit>:
*                 it connects the antenna to the Rx path
*                 Control  LOW : Rx
*                 Control HIGH : Tx
******************************************************************************/
void SX1262RfSwitchInit(MCU* mcu)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mcu->rf_switch_supp.type, mcu->rf_switch_supp.pin, GPIO_PIN_SET);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f002 fcde 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(mcu->rf_switch.type, mcu->rf_switch.pin, GPIO_PIN_RESET);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f002 fcd6 	bl	80048a8 <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SX1262GfskInit>:
/*****************************************************************************
*  @Description	  Initializes the radio for the GFSK modulation. The user can
*                 define in the arguments the frequency and the power in dBm
******************************************************************************/
RadioState_t SX1262GfskInit(MCU* mcu, Radio* radio, int8_t power, uint16_t freqInMHz)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	; 0x50
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	460b      	mov	r3, r1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80bb      	strh	r3, [r7, #4]
	SX1262Reset(mcu);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff ff9a 	bl	8001e54 <SX1262Reset>
	SX1262RfSwitchInit(mcu);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff ffd6 	bl	8001ed2 <SX1262RfSwitchInit>
	SX1262GetStatus(mcu, radio);
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff ff4d 	bl	8001dc8 <SX1262GetStatus>

	SX1262SetStandby(mcu, radio, STDBY_RC);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7fe ff73 	bl	8000e1e <SX1262SetStandby>
	SX1262SetDio3AsTcxoCtrl(mcu, radio, TCXO_1_8V, TCXO_SETUP_TIME);
 8001f38:	2301      	movs	r3, #1
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff fd36 	bl	80019b0 <SX1262SetDio3AsTcxoCtrl>

 	SX1262ClearDeviceErrors(mcu, radio);
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff fef1 	bl	8001d2e <SX1262ClearDeviceErrors>
	CalibrationParams_t calib;
	calib.ADCBulkN = 1;
 8001f4c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.ADCBulkP = 1;
 8001f58:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.ADCPulse = 1;
 8001f64:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.Img = 1;
 8001f70:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f78:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.PLL = 1;
 8001f7c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.RC13M = 1;
 8001f88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	calib.RC64K = 1;
 8001f94:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	SX1262Calibrate(mcu, radio, calib);
 8001fa0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fc9d 	bl	80018e6 <SX1262Calibrate>
 	SX1262GetDeviceErrors(mcu, radio);
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fe48 	bl	8001c44 <SX1262GetDeviceErrors>

	SX1262SetDio2AsRfSwitchCtrl(mcu, radio, true);  // STM32 controls the RF switch through interrupts from DIO2
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fcde 	bl	800197a <SX1262SetDio2AsRfSwitchCtrl>

	SX1262SetStandby(mcu, radio, STDBY_RC);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7fe ff2b 	bl	8000e1e <SX1262SetStandby>
	SX1262SetRegulatorMode(mcu, radio, USE_DCDC);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fd79 	bl	8001ac4 <SX1262SetRegulatorMode>
	SX1262SetBufferBaseAddress(mcu, radio, 0, 0);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff f82f 	bl	800103c <SX1262SetBufferBaseAddress>

	SX1262SetPaConfig(mcu, radio, power);
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7fe ff92 	bl	8000f10 <SX1262SetPaConfig>

	SX1262SetOCP(mcu, radio, 500);
 8001fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff56 	bl	8001ea4 <SX1262SetOCP>

	SX1262SetTxParams(mcu, radio, power, PA_RAMP_200_US, false);  // WORKAROUND OFF
 8001ff8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2304      	movs	r3, #4
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe ffc6 	bl	8000f96 <SX1262SetTxParams>

	SX1262SetDioIrqParams(mcu, radio, IRQ_ALL, IRQ_RX_DONE, IRQ_NONE, IRQ_NONE);
 800200a:	2300      	movs	r3, #0
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2300      	movs	r3, #0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2302      	movs	r3, #2
 8002014:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff f9ce 	bl	80013bc <SX1262SetDioIrqParams>
 	SX1262ClearIrqStatus(mcu, radio,  0xFFFF);
 8002020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fafd 	bl	8001626 <SX1262ClearIrqStatus>

	SX1262SetRfFrequency(mcu, radio, freqInMHz * 1000000);
 800202c:	88bb      	ldrh	r3, [r7, #4]
 800202e:	4a49      	ldr	r2, [pc, #292]	; (8002154 <SX1262GfskInit+0x250>)
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	461a      	mov	r2, r3
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7fe ff1d 	bl	8000e78 <SX1262SetRfFrequency>

	SX1262SetPacketType(mcu, radio, PACKET_TYPE_GFSK);
 800203e:	2200      	movs	r2, #0
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7fe ff02 	bl	8000e4c <SX1262SetPacketType>
	SX1262GetPacketType(mcu, radio);
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fd93 	bl	8001b76 <SX1262GetPacketType>

#if ((FUNCTION == TPMS_DEBUG) || (FUNCTION == TPMS_RELEASE))
	uint8_t GfskSyncWord[3] = {0xF0, 0xF0, 0xF0};
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <SX1262GfskInit+0x254>)
 8002052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4611      	mov	r1, r2
 800205a:	8019      	strh	r1, [r3, #0]
 800205c:	3302      	adds	r3, #2
 800205e:	0c12      	lsrs	r2, r2, #16
 8002060:	701a      	strb	r2, [r3, #0]
	if (SX1262SetGfskSyncWord(mcu, radio, GfskSyncWord, sizeof(GfskSyncWord)) != RADIO_OK)
 8002062:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002066:	2303      	movs	r3, #3
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff f9ee 	bl	800144c <SX1262SetGfskSyncWord>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <SX1262GfskInit+0x176>
		return RADIO_SAFE_WRITE_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e067      	b.n	800214a <SX1262GfskInit+0x246>

//	if (SX1262SetCrcPolynomial(mcu, radio, 0x1021) != RADIO_OK)
//		return RADIO_SAFE_WRITE_ERROR;

	ModulationParams_t mod;
	mod.PacketType = PACKET_TYPE_GFSK;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	mod.Params.Gfsk.BitRate = 60000;
 8002080:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
	mod.Params.Gfsk.FdevHz  = 30000;
 8002086:	f247 5330 	movw	r3, #30000	; 0x7530
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
	mod.Params.Gfsk.ModulationShaping = NO_FILTER; //MOD_SHAPING_G_BT_05;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	mod.Params.Gfsk.Bandwidth = GFSK_BW_156200;
 8002092:	231a      	movs	r3, #26
 8002094:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	SX1262SetModulationParams(mcu, radio, &mod);
 8002098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209c:	461a      	mov	r2, r3
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff f8b5 	bl	8001210 <SX1262SetModulationParams>

#if ((FUNCTION == TPMS_DEBUG) || (FUNCTION == TPMS_RELEASE))
	PacketParams_t packet;
	packet.PacketType = PACKET_TYPE_GFSK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	763b      	strb	r3, [r7, #24]
	packet.Params.Gfsk.PreambleLength = 24;
 80020aa:	2318      	movs	r3, #24
 80020ac:	837b      	strh	r3, [r7, #26]
	packet.Params.Gfsk.PreambleMinDetect = PREAMBLE_DETECTOR_08_BITS;
 80020ae:	2304      	movs	r3, #4
 80020b0:	773b      	strb	r3, [r7, #28]
	packet.Params.Gfsk.SyncWordLength = 0x18;
 80020b2:	2318      	movs	r3, #24
 80020b4:	777b      	strb	r3, [r7, #29]
	packet.Params.Gfsk.AddrComp = ADDRESSCOMP_FILT_OFF;
 80020b6:	2300      	movs	r3, #0
 80020b8:	77bb      	strb	r3, [r7, #30]
	packet.Params.Gfsk.HeaderType = GFSK_PACKET_FIXED_LENGTH;
 80020ba:	2300      	movs	r3, #0
 80020bc:	77fb      	strb	r3, [r7, #31]
	packet.Params.Gfsk.PayloadLength = 5 + 1;  // Payload plus CRC
 80020be:	2306      	movs	r3, #6
 80020c0:	f887 3020 	strb.w	r3, [r7, #32]
	packet.Params.Gfsk.CrcType = GFSK_CRC_1_BYTES;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	packet.Params.Gfsk.DcFree = WHITENING_ON;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	SX1262SetPacketParams(mcu, radio, &packet);
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	461a      	mov	r2, r3
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7fe ffd3 	bl	8001084 <SX1262SetPacketParams>
	//radio->function = TPMS;

	SX1262SetStandby(mcu, radio, STDBY_RC);
 80020de:	2200      	movs	r2, #0
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7fe fe9b 	bl	8000e1e <SX1262SetStandby>
	SX1262SetRxTxFallbackMode(mcu, radio, STBY_RC);
 80020e8:	2220      	movs	r2, #32
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff fd00 	bl	8001af2 <SX1262SetRxTxFallbackMode>

 	SX1262SetStandby(mcu, radio, STDBY_XOSC);
 	SX1262SetRxTxFallbackMode(mcu, radio, STBY_XOSC);
#endif

 	SX1262GetStatus(mcu, radio);
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fe67 	bl	8001dc8 <SX1262GetStatus>

#if ((FUNCTION == TPMS_DEBUG) || (FUNCTION == TPMS_RELEASE))

 	uint8_t reg_data = 0x94;
 80020fa:	2394      	movs	r3, #148	; 0x94
 80020fc:	75fb      	strb	r3, [r7, #23]
 	SX1262SafeWriteRegister(mcu, radio, RX_GAIN_REG, &reg_data, 1);
 80020fe:	f107 0317 	add.w	r3, r7, #23
 8002102:	2201      	movs	r2, #1
 8002104:	9200      	str	r2, [sp, #0]
 8002106:	f640 02ac 	movw	r2, #2220	; 0x8ac
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fdaa 	bl	8002c66 <SX1262SafeWriteRegister>

 	reg_data = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]
 	SX1262ReadRegister(mcu, radio, TX_MODULATION_REG, &reg_data, 1);
 8002116:	f107 0317 	add.w	r3, r7, #23
 800211a:	2201      	movs	r2, #1
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	f640 0289 	movw	r2, #2185	; 0x889
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fc9c 	bl	8002a62 <SX1262ReadRegister>
 	reg_data = reg_data | 0x04;
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	75fb      	strb	r3, [r7, #23]
 	SX1262SafeWriteRegister(mcu, radio, TX_MODULATION_REG, &reg_data, 1);
 8002134:	f107 0317 	add.w	r3, r7, #23
 8002138:	2201      	movs	r2, #1
 800213a:	9200      	str	r2, [sp, #0]
 800213c:	f640 0289 	movw	r2, #2185	; 0x889
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fd8f 	bl	8002c66 <SX1262SafeWriteRegister>

#endif

 	return RADIO_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3748      	adds	r7, #72	; 0x48
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	000f4240 	.word	0x000f4240
 8002158:	08007d2c 	.word	0x08007d2c

0800215c <Radio_struct_init>:


void Radio_struct_init(Radio* radio)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	radio->per.first_reception = true;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	radio->msg_pending = false;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
	radio->ImageCalibrated = false;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1

	radio->errors.AdcCalibErr   = 1;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.ImgCalibErr   = 1;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.PaRampErr     = 1;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.PllCalibErr   = 1;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.PllLockErr    = 1;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80021ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021be:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.Rc13mCalibErr = 1;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.Rc64kCalibErr = 1;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
	radio->errors.XoscStartErr  = 1;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448

#if ((FUNCTION == TPMS_DEBUG) || (FUNCTION == TPMS_RELEASE))
	radio->function = TPMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
#else
	radio->function = TELEMETRY;
#endif
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SX1262ReceiveMessage>:
/*****************************************************************************
*  @Description	  Gets the received packet length and start address and then
*                 reads it from the buffer
******************************************************************************/
RadioState_t SX1262ReceiveMessage(MCU* mcu, Radio* radio)
{
 8002200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002204:	b089      	sub	sp, #36	; 0x24
 8002206:	af02      	add	r7, sp, #8
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
 800220c:	466b      	mov	r3, sp
 800220e:	461e      	mov	r6, r3
	SX1262GetRxBufferStatus(mcu, radio);
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fb4e 	bl	80018b4 <SX1262GetRxBufferStatus>

	if (radio->payloadLength != radio->packetParams.Params.Gfsk.PayloadLength)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f893 244e 	ldrb.w	r2, [r3, #1102]	; 0x44e
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <SX1262ReceiveMessage+0x2c>
		return RADIO_PAYLOAD_LENGTH_ERROR;
 8002228:	2302      	movs	r3, #2
 800222a:	e0a8      	b.n	800237e <SX1262ReceiveMessage+0x17e>

	uint8_t received_data[radio->payloadLength];
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f893 144e 	ldrb.w	r1, [r3, #1102]	; 0x44e
 8002232:	460b      	mov	r3, r1
 8002234:	3b01      	subs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	b2cb      	uxtb	r3, r1
 800223a:	2200      	movs	r2, #0
 800223c:	4698      	mov	r8, r3
 800223e:	4691      	mov	r9, r2
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002250:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002254:	b2cb      	uxtb	r3, r1
 8002256:	2200      	movs	r2, #0
 8002258:	461c      	mov	r4, r3
 800225a:	4615      	mov	r5, r2
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	00eb      	lsls	r3, r5, #3
 8002266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226a:	00e2      	lsls	r2, r4, #3
 800226c:	460b      	mov	r3, r1
 800226e:	3307      	adds	r3, #7
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	ebad 0d03 	sub.w	sp, sp, r3
 8002278:	ab02      	add	r3, sp, #8
 800227a:	3300      	adds	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
	SX1262ReadBuffer(mcu, radio, radio->rxStartBufferPointer, received_data, radio->payloadLength);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f893 244f 	ldrb.w	r2, [r3, #1103]	; 0x44f
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f893 344e 	ldrb.w	r3, [r3, #1102]	; 0x44e
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fdc9 	bl	8002e28 <SX1262ReadBuffer>

	if (radio->function == TELEMETRY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13a      	bne.n	8002316 <SX1262ReceiveMessage+0x116>
	{
		if (radio->irq.crcError == 0)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11c      	bne.n	80022ea <SX1262ReceiveMessage+0xea>
		{
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 80022b0:	2300      	movs	r3, #0
 80022b2:	753b      	strb	r3, [r7, #20]
 80022b4:	e00b      	b.n	80022ce <SX1262ReceiveMessage+0xce>
				radio->rx_msg[i] = received_data[i];
 80022b6:	7d3a      	ldrb	r2, [r7, #20]
 80022b8:	7d3b      	ldrb	r3, [r7, #20]
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	5c89      	ldrb	r1, [r1, r2]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	460a      	mov	r2, r1
 80022c4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 80022c8:	7d3b      	ldrb	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	753b      	strb	r3, [r7, #20]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f893 344e 	ldrb.w	r3, [r3, #1102]	; 0x44e
 80022d4:	7d3a      	ldrb	r2, [r7, #20]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3ed      	bcc.n	80022b6 <SX1262ReceiveMessage+0xb6>

			radio->per.received_msgs++;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 80022e8:	e048      	b.n	800237c <SX1262ReceiveMessage+0x17c>
		}
		else   /* Wrong CRC telemetry message */
		{
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 80022ea:	2300      	movs	r3, #0
 80022ec:	757b      	strb	r3, [r7, #21]
 80022ee:	e00b      	b.n	8002308 <SX1262ReceiveMessage+0x108>
				radio->wrong_CRC_msg[i] = received_data[i];
 80022f0:	7d7a      	ldrb	r2, [r7, #21]
 80022f2:	7d7b      	ldrb	r3, [r7, #21]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	5c89      	ldrb	r1, [r1, r2]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	460a      	mov	r2, r1
 80022fe:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 8002302:	7d7b      	ldrb	r3, [r7, #21]
 8002304:	3301      	adds	r3, #1
 8002306:	757b      	strb	r3, [r7, #21]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f893 344e 	ldrb.w	r3, [r3, #1102]	; 0x44e
 800230e:	7d7a      	ldrb	r2, [r7, #21]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3ed      	bcc.n	80022f0 <SX1262ReceiveMessage+0xf0>
 8002314:	e032      	b.n	800237c <SX1262ReceiveMessage+0x17c>
		}
	}

	else   /* radio->function == TPMS */
		if (radio->irq.crcError == 0)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d115      	bne.n	8002352 <SX1262ReceiveMessage+0x152>
		{
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 8002326:	2300      	movs	r3, #0
 8002328:	75bb      	strb	r3, [r7, #22]
 800232a:	e00b      	b.n	8002344 <SX1262ReceiveMessage+0x144>
				radio->tpms_rx_msg[i] = received_data[i];
 800232c:	7dba      	ldrb	r2, [r7, #22]
 800232e:	7dbb      	ldrb	r3, [r7, #22]
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	5c89      	ldrb	r1, [r1, r2]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	460a      	mov	r2, r1
 800233a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	3301      	adds	r3, #1
 8002342:	75bb      	strb	r3, [r7, #22]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f893 344e 	ldrb.w	r3, [r3, #1102]	; 0x44e
 800234a:	7dba      	ldrb	r2, [r7, #22]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3ed      	bcc.n	800232c <SX1262ReceiveMessage+0x12c>
 8002350:	e014      	b.n	800237c <SX1262ReceiveMessage+0x17c>
		}
		else   /* Wrong CRC TPMS message */
		{
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
 8002356:	e00b      	b.n	8002370 <SX1262ReceiveMessage+0x170>
				radio->tpms_wrong_CRC_msg[i] = received_data[i];
 8002358:	7dfa      	ldrb	r2, [r7, #23]
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	5c89      	ldrb	r1, [r1, r2]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	460a      	mov	r2, r1
 8002366:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
			for (uint8_t i = 0; i < radio->payloadLength; ++i)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	3301      	adds	r3, #1
 800236e:	75fb      	strb	r3, [r7, #23]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f893 344e 	ldrb.w	r3, [r3, #1102]	; 0x44e
 8002376:	7dfa      	ldrb	r2, [r7, #23]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3ed      	bcc.n	8002358 <SX1262ReceiveMessage+0x158>
		}

	return RADIO_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	46b5      	mov	sp, r6
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800238a <SX1262dio1Interrupt>:
/*****************************************************************************
*  @Description	  Defines the behavior of the chip when an interrupt from the
*                 DIO1 pin has been received
******************************************************************************/
void SX1262dio1Interrupt(MCU* mcu, Radio* radio)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	SX1262GetIrqStatus(mcu, radio);
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f9ab 	bl	80016f2 <SX1262GetIrqStatus>
	if (radio->irq.rxDone == 1)  /* Message received */
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02a      	beq.n	8002402 <SX1262dio1Interrupt+0x78>
	{
		if (radio->irq.crcError == 0)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f893 3442 	ldrb.w	r3, [r3, #1090]	; 0x442
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <SX1262dio1Interrupt+0x44>
		{
#if ((FUNCTION != TPMS_DEBUG) && (FUNCTION != TPMS_RELEASE))
			HAL_GPIO_WritePin(mcu->radio_rx_led.type, mcu->radio_rx_led.pin, GPIO_PIN_SET);
#endif
			SX1262ReceiveMessage(mcu, radio);  /* Message stored in the Radio struct */
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff1e 	bl	8002200 <SX1262ReceiveMessage>
			SX1262GetPacketStatus(mcu, radio);
 80023c4:	6839      	ldr	r1, [r7, #0]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fbe9 	bl	8001b9e <SX1262GetPacketStatus>
			SX1262GetPacketStatus(mcu, radio);
		}
	}

	//SX1262ClearIrqStatus(mcu, radio, 0xFFFF);  // Clears both the SX1262 registers and the radio.irq struct
}
 80023cc:	e019      	b.n	8002402 <SX1262dio1Interrupt+0x78>
			if (radio->function == TELEMETRY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <SX1262dio1Interrupt+0x60>
				radio->wrongCRC++;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f8b3 344a 	ldrh.w	r3, [r3, #1098]	; 0x44a
 80023de:	3301      	adds	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a
 80023e8:	e003      	b.n	80023f2 <SX1262dio1Interrupt+0x68>
				radio->tpmsWrongCRC = true;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
			SX1262ReceiveMessage(mcu, radio);  /* The message is received even if the CRC is wrong, but is stored in a different array */
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff03 	bl	8002200 <SX1262ReceiveMessage>
			SX1262GetPacketStatus(mcu, radio);
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fbce 	bl	8001b9e <SX1262GetPacketStatus>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <SX1262dio2Interrupt>:
*  @Description	  Defines the behavior of the chip when an interrupt from the
*                 DIO2 pin has been received. This interrupt is generated both
*                 in rising and falling edges of DIO2
******************************************************************************/
void SX1262dio2Interrupt(MCU* mcu, Radio* radio)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	if (HAL_GPIO_ReadPin(mcu->dio2.type, mcu->dio2.pin) == GPIO_PIN_SET)            // If the interrupt occured from a rising edge
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f002 fa2a 	bl	8004878 <HAL_GPIO_ReadPin>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <SX1262dio2Interrupt+0x32>
		HAL_GPIO_WritePin(mcu->rf_switch.type, mcu->rf_switch.pin, GPIO_PIN_SET);   // Connect the antenna to the TX path
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002432:	2201      	movs	r2, #1
 8002434:	4619      	mov	r1, r3
 8002436:	f002 fa37 	bl	80048a8 <HAL_GPIO_WritePin>
	else																			// If the interrupt occured from a falling edge
		HAL_GPIO_WritePin(mcu->rf_switch.type, mcu->rf_switch.pin, GPIO_PIN_RESET); // Connect the antenna to the RX path
}
 800243a:	e007      	b.n	800244c <SX1262dio2Interrupt+0x42>
		HAL_GPIO_WritePin(mcu->rf_switch.type, mcu->rf_switch.pin, GPIO_PIN_RESET); // Connect the antenna to the RX path
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	4619      	mov	r1, r3
 8002448:	f002 fa2e 	bl	80048a8 <HAL_GPIO_WritePin>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <Gpio_init>:
#include <SX1262_board.h>
#include "stm32l4xx_hal.h"
#include "SX1262.h"


void Gpio_init(Gpio_t* GPIO, GPIO_TypeDef *type, uint16_t pin) {
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]

	GPIO->type = type;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	601a      	str	r2, [r3, #0]
	GPIO->pin  = pin;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	809a      	strh	r2, [r3, #4]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <SPI_init>:


void SPI_init(Spi_t* SPI, SPI_HandleTypeDef *handle, GPIO_TypeDef *type, uint16_t pin) {
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	807b      	strh	r3, [r7, #2]

    SPI->spiHandle = handle;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	601a      	str	r2, [r3, #0]
    SPI->NSS.pin    = pin;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	811a      	strh	r2, [r3, #8]
    SPI->NSS.type   = type;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <MCU_init>:
			  GPIO_TypeDef *DIO1, uint16_t DIO1_pin,
			  GPIO_TypeDef *DIO2, uint16_t DIO2_pin,
			  GPIO_TypeDef *DIO3, uint16_t DIO3_pin,
			  GPIO_TypeDef *RF_SWITCH, uint16_t RF_SWITCH_pin,
			  GPIO_TypeDef *RF_SWITCH_SUPP, uint16_t RF_SWITCH_SUPP_pin)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	807b      	strh	r3, [r7, #2]
	Gpio_init(&(mcu->spi.NSS), NSS, NSS_pin);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3304      	adds	r3, #4
 80024b8:	887a      	ldrh	r2, [r7, #2]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ffc9 	bl	8002454 <Gpio_init>

	SPI_init(&(mcu->spi), spiHandle, NSS, NSS_pin);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	f7ff ffd6 	bl	800247a <SPI_init>

	Gpio_init(&(mcu->nreset), NRESET, NRESET_pin);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	330c      	adds	r3, #12
 80024d2:	8bba      	ldrh	r2, [r7, #28]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffbc 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->busy), BUSY, BUSY_pin);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3314      	adds	r3, #20
 80024e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffb5 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->dio1), DIO1, DIO1_pin);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	331c      	adds	r3, #28
 80024ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80024f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ffae 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->dio2), DIO2, DIO2_pin);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3324      	adds	r3, #36	; 0x24
 80024fc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ffa7 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->dio3), DIO3, DIO3_pin);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	332c      	adds	r3, #44	; 0x2c
 800250a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800250c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffa0 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->rf_switch), RF_SWITCH, RF_SWITCH_pin);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3334      	adds	r3, #52	; 0x34
 8002518:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800251c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff98 	bl	8002454 <Gpio_init>
	Gpio_init(&(mcu->rf_switch_supp), RF_SWITCH_SUPP, RF_SWITCH_SUPP_pin);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800252c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff90 	bl	8002454 <Gpio_init>

	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_SET);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6858      	ldr	r0, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	891b      	ldrh	r3, [r3, #8]
 800253c:	2201      	movs	r2, #1
 800253e:	4619      	mov	r1, r3
 8002540:	f002 f9b2 	bl	80048a8 <HAL_GPIO_WritePin>
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <SX1262WriteCommand>:
/*****************************************************************************
*  @Description	  Transmits through SPI the requested command and writes
*                 the data to the chip
******************************************************************************/
void SX1262WriteCommand(MCU* mcu, Radio* radio, uint8_t command, uint8_t* data, uint8_t len)
{
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b091      	sub	sp, #68	; 0x44
 8002552:	af02      	add	r7, sp, #8
 8002554:	61f8      	str	r0, [r7, #28]
 8002556:	61b9      	str	r1, [r7, #24]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4613      	mov	r3, r2
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	466b      	mov	r3, sp
 8002560:	607b      	str	r3, [r7, #4]
	uint8_t write_msg[len + 1];
 8002562:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002566:	1c5e      	adds	r6, r3, #1
 8002568:	1e73      	subs	r3, r6, #1
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256c:	4632      	mov	r2, r6
 800256e:	2300      	movs	r3, #0
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	00cb      	lsls	r3, r1, #3
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	00ca      	lsls	r2, r1, #3
 800258a:	4632      	mov	r2, r6
 800258c:	2300      	movs	r3, #0
 800258e:	4692      	mov	sl, r2
 8002590:	469b      	mov	fp, r3
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800259e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025a6:	4633      	mov	r3, r6
 80025a8:	3307      	adds	r3, #7
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	ebad 0d03 	sub.w	sp, sp, r3
 80025b2:	ab02      	add	r3, sp, #8
 80025b4:	3300      	adds	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t read_msg[len + 1];
 80025b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80025bc:	1c59      	adds	r1, r3, #1
 80025be:	1e4b      	subs	r3, r1, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	460a      	mov	r2, r1
 80025c4:	2300      	movs	r3, #0
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025de:	460a      	mov	r2, r1
 80025e0:	2300      	movs	r3, #0
 80025e2:	4614      	mov	r4, r2
 80025e4:	461d      	mov	r5, r3
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	00eb      	lsls	r3, r5, #3
 80025f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025f4:	00e2      	lsls	r2, r4, #3
 80025f6:	460b      	mov	r3, r1
 80025f8:	3307      	adds	r3, #7
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002602:	ab02      	add	r3, sp, #8
 8002604:	3300      	adds	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < len + 1; ++i)
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800260e:	e00e      	b.n	800262e <SX1262WriteCommand+0xe2>
	{
		write_msg[i] = 0;
 8002610:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002616:	2100      	movs	r1, #0
 8002618:	54d1      	strb	r1, [r2, r3]
		read_msg[i]  = 0;
 800261a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	2100      	movs	r1, #0
 8002622:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len + 1; ++i)
 8002624:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002628:	3301      	adds	r3, #1
 800262a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800262e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8002632:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002636:	429a      	cmp	r2, r3
 8002638:	d2ea      	bcs.n	8002610 <SX1262WriteCommand+0xc4>
	}

	write_msg[0] = command;
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	7dfa      	ldrb	r2, [r7, #23]
 800263e:	701a      	strb	r2, [r3, #0]
	for (uint8_t pos = 0; pos < len; ++pos)
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002646:	e00e      	b.n	8002666 <SX1262WriteCommand+0x11a>
		write_msg[pos + 1] = data[pos];
 8002648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	441a      	add	r2, r3
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002654:	3301      	adds	r3, #1
 8002656:	7811      	ldrb	r1, [r2, #0]
 8002658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t pos = 0; pos < len; ++pos)
 800265c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002660:	3301      	adds	r3, #1
 8002662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002666:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800266a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800266e:	429a      	cmp	r2, r3
 8002670:	d3ea      	bcc.n	8002648 <SX1262WriteCommand+0xfc>

	if (len > 20)
 8002672:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002676:	2b14      	cmp	r3, #20
 8002678:	d905      	bls.n	8002686 <SX1262WriteCommand+0x13a>
		test++;
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <SX1262WriteCommand+0x244>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b43      	ldr	r3, [pc, #268]	; (8002790 <SX1262WriteCommand+0x244>)
 8002684:	701a      	strb	r2, [r3, #0]

	if (radio->opMode != SLEEP_MODE || command != SET_STANDBY) // Wakeup command is sent even when Busy Pin is HIGH
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800268c:	2b08      	cmp	r3, #8
 800268e:	d102      	bne.n	8002696 <SX1262WriteCommand+0x14a>
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d00b      	beq.n	80026ae <SX1262WriteCommand+0x162>
		while(HAL_GPIO_ReadPin(mcu->busy.type, mcu->busy.pin) != GPIO_PIN_RESET);  // Wait until BUSY pin goes LOW
 8002696:	bf00      	nop
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	8b1b      	ldrh	r3, [r3, #24]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f002 f8e8 	bl	8004878 <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f4      	bne.n	8002698 <SX1262WriteCommand+0x14c>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_RESET);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	6858      	ldr	r0, [r3, #4]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	891b      	ldrh	r3, [r3, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	4619      	mov	r1, r3
 80026ba:	f002 f8f5 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcu->spi.spiHandle, write_msg, read_msg, sizeof(write_msg), SPI_TIMEOUT);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	b2b3      	uxth	r3, r6
 80026c4:	2232      	movs	r2, #50	; 0x32
 80026c6:	9200      	str	r2, [sp, #0]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026cc:	f004 ff71 	bl	80075b2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_SET);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	6858      	ldr	r0, [r3, #4]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	891b      	ldrh	r3, [r3, #8]
 80026d8:	2201      	movs	r2, #1
 80026da:	4619      	mov	r1, r3
 80026dc:	f002 f8e4 	bl	80048a8 <HAL_GPIO_WritePin>

	// Debugging
	uint8_t limit;
	if (len + 1 <= READ_MSG_LEN)
 80026e0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80026e4:	2bc7      	cmp	r3, #199	; 0xc7
 80026e6:	d805      	bhi.n	80026f4 <SX1262WriteCommand+0x1a8>
		limit = len + 1;
 80026e8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80026ec:	3301      	adds	r3, #1
 80026ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026f2:	e002      	b.n	80026fa <SX1262WriteCommand+0x1ae>
	else
		limit = READ_MSG_LEN;
 80026f4:	23c8      	movs	r3, #200	; 0xc8
 80026f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	for (uint8_t i = 0; i < limit; ++i)
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002700:	e00c      	b.n	800271c <SX1262WriteCommand+0x1d0>
		radio->spi_read_msg[i] = read_msg[i];
 8002702:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002706:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800270a:	6a39      	ldr	r1, [r7, #32]
 800270c:	5c89      	ldrb	r1, [r1, r2]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < limit; ++i)
 8002712:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002716:	3301      	adds	r3, #1
 8002718:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800271c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002724:	429a      	cmp	r2, r3
 8002726:	d3ec      	bcc.n	8002702 <SX1262WriteCommand+0x1b6>
	for (uint8_t i = len + 1; i < READ_MSG_LEN; ++i)
 8002728:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800272c:	3301      	adds	r3, #1
 800272e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002732:	e009      	b.n	8002748 <SX1262WriteCommand+0x1fc>
		radio->spi_read_msg[i] = 0;
 8002734:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	2100      	movs	r1, #0
 800273c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = len + 1; i < READ_MSG_LEN; ++i)
 800273e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002742:	3301      	adds	r3, #1
 8002744:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002748:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800274c:	2bc7      	cmp	r3, #199	; 0xc7
 800274e:	d9f1      	bls.n	8002734 <SX1262WriteCommand+0x1e8>

	for (uint8_t cnt = 15; cnt < 199; ++cnt)
 8002750:	230f      	movs	r3, #15
 8002752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002756:	e010      	b.n	800277a <SX1262WriteCommand+0x22e>
		if (radio->spi_read_msg[cnt] != 0)
 8002758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <SX1262WriteCommand+0x224>
			test++;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <SX1262WriteCommand+0x244>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <SX1262WriteCommand+0x244>)
 800276e:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 15; cnt < 199; ++cnt)
 8002770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002774:	3301      	adds	r3, #1
 8002776:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800277a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800277e:	2bc6      	cmp	r3, #198	; 0xc6
 8002780:	d9ea      	bls.n	8002758 <SX1262WriteCommand+0x20c>
 8002782:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8002786:	bf00      	nop
 8002788:	373c      	adds	r7, #60	; 0x3c
 800278a:	46bd      	mov	sp, r7
 800278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002790:	2000002c 	.word	0x2000002c

08002794 <SX1262ReadCommand>:
/*****************************************************************************
*  @Description	  Transmits through SPI the requested command and reads the
*                 data sent from the chip
******************************************************************************/
void SX1262ReadCommand(MCU* mcu, Radio* radio, uint8_t command, uint8_t len)
{
 8002794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002798:	b08f      	sub	sp, #60	; 0x3c
 800279a:	af02      	add	r7, sp, #8
 800279c:	6178      	str	r0, [r7, #20]
 800279e:	6139      	str	r1, [r7, #16]
 80027a0:	4611      	mov	r1, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	460b      	mov	r3, r1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	4613      	mov	r3, r2
 80027aa:	73bb      	strb	r3, [r7, #14]
 80027ac:	466b      	mov	r3, sp
 80027ae:	60bb      	str	r3, [r7, #8]
	uint8_t write_msg[len + 2];
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	1c9e      	adds	r6, r3, #2
 80027b4:	1e73      	subs	r3, r6, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	4632      	mov	r2, r6
 80027ba:	2300      	movs	r3, #0
 80027bc:	603a      	str	r2, [r7, #0]
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4632      	mov	r2, r6
 80027d8:	2300      	movs	r3, #0
 80027da:	4692      	mov	sl, r2
 80027dc:	469b      	mov	fp, r3
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f2:	4633      	mov	r3, r6
 80027f4:	3307      	adds	r3, #7
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	ebad 0d03 	sub.w	sp, sp, r3
 80027fe:	ab02      	add	r3, sp, #8
 8002800:	3300      	adds	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
	uint8_t read_msg[len + 2];
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	1c99      	adds	r1, r3, #2
 8002808:	1e4b      	subs	r3, r1, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	460a      	mov	r2, r1
 800280e:	2300      	movs	r3, #0
 8002810:	4690      	mov	r8, r2
 8002812:	4699      	mov	r9, r3
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002820:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002824:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002828:	460a      	mov	r2, r1
 800282a:	2300      	movs	r3, #0
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	460b      	mov	r3, r1
 8002842:	3307      	adds	r3, #7
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	ebad 0d03 	sub.w	sp, sp, r3
 800284c:	ab02      	add	r3, sp, #8
 800284e:	3300      	adds	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < len + 2; ++i)
 8002852:	2300      	movs	r3, #0
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002858:	e00e      	b.n	8002878 <SX1262ReadCommand+0xe4>
	{
		write_msg[i] = 0;
 800285a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800285e:	6a3a      	ldr	r2, [r7, #32]
 8002860:	2100      	movs	r1, #0
 8002862:	54d1      	strb	r1, [r2, r3]
		read_msg[i]  = 0;
 8002864:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	2100      	movs	r1, #0
 800286c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len + 2; ++i)
 800286e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002872:	3301      	adds	r3, #1
 8002874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002880:	429a      	cmp	r2, r3
 8002882:	daea      	bge.n	800285a <SX1262ReadCommand+0xc6>
	}

	write_msg[0] = command;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	701a      	strb	r2, [r3, #0]

	while(HAL_GPIO_ReadPin(mcu->busy.type, mcu->busy.pin) != GPIO_PIN_RESET);  // Wait until BUSY pin goes LOW
 800288a:	bf00      	nop
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	8b1b      	ldrh	r3, [r3, #24]
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f001 ffee 	bl	8004878 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f4      	bne.n	800288c <SX1262ReadCommand+0xf8>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_RESET);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	6858      	ldr	r0, [r3, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	891b      	ldrh	r3, [r3, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	4619      	mov	r1, r3
 80028ae:	f001 fffb 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcu->spi.spiHandle, write_msg, read_msg, sizeof(write_msg), SPI_TIMEOUT);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	b2b3      	uxth	r3, r6
 80028b8:	2232      	movs	r2, #50	; 0x32
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	f004 fe77 	bl	80075b2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_SET);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	6858      	ldr	r0, [r3, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	891b      	ldrh	r3, [r3, #8]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4619      	mov	r1, r3
 80028d0:	f001 ffea 	bl	80048a8 <HAL_GPIO_WritePin>

	// Debugging
	uint8_t limit;
	if (len + 2 <= READ_MSG_LEN)
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	2bc6      	cmp	r3, #198	; 0xc6
 80028d8:	d804      	bhi.n	80028e4 <SX1262ReadCommand+0x150>
		limit = len + 2;
 80028da:	7bbb      	ldrb	r3, [r7, #14]
 80028dc:	3302      	adds	r3, #2
 80028de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80028e2:	e002      	b.n	80028ea <SX1262ReadCommand+0x156>
	else
		limit = READ_MSG_LEN;
 80028e4:	23c8      	movs	r3, #200	; 0xc8
 80028e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (uint8_t i = 0; i < limit; ++i)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80028f0:	e00c      	b.n	800290c <SX1262ReadCommand+0x178>
		radio->spi_read_msg[i] = read_msg[i];
 80028f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80028f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	5c89      	ldrb	r1, [r1, r2]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < limit; ++i)
 8002902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002906:	3301      	adds	r3, #1
 8002908:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800290c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002910:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002914:	429a      	cmp	r2, r3
 8002916:	d3ec      	bcc.n	80028f2 <SX1262ReadCommand+0x15e>
	for (uint8_t i = len + 2; i < READ_MSG_LEN; ++i)
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	3302      	adds	r3, #2
 800291c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002920:	e009      	b.n	8002936 <SX1262ReadCommand+0x1a2>
		radio->spi_read_msg[i] = 0;
 8002922:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	2100      	movs	r1, #0
 800292a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = len + 2; i < READ_MSG_LEN; ++i)
 800292c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002930:	3301      	adds	r3, #1
 8002932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002936:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800293a:	2bc7      	cmp	r3, #199	; 0xc7
 800293c:	d9f1      	bls.n	8002922 <SX1262ReadCommand+0x18e>

	for (uint8_t cnt = 15; cnt < 199; ++cnt)
 800293e:	230f      	movs	r3, #15
 8002940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002944:	e010      	b.n	8002968 <SX1262ReadCommand+0x1d4>
		if (radio->spi_read_msg[cnt] != 0)
 8002946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <SX1262ReadCommand+0x1ca>
			test++;
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <SX1262ReadCommand+0x1ec>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <SX1262ReadCommand+0x1ec>)
 800295c:	701a      	strb	r2, [r3, #0]
	for (uint8_t cnt = 15; cnt < 199; ++cnt)
 800295e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002962:	3301      	adds	r3, #1
 8002964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800296c:	2bc6      	cmp	r3, #198	; 0xc6
 800296e:	d9ea      	bls.n	8002946 <SX1262ReadCommand+0x1b2>
 8002970:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8002974:	bf00      	nop
 8002976:	3734      	adds	r7, #52	; 0x34
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop
 8002980:	2000002c 	.word	0x2000002c

08002984 <SX1262WriteRegister>:
*  @Description	  Writes to the requested register. Each Register address
*                 corresponds to 1 Byte memory. If data is more than
*                 1 byte, the given address is the address of the 1st Byte
******************************************************************************/
void SX1262WriteRegister(MCU* mcu, Radio* radio, uint16_t address, uint8_t* data, uint8_t len)
{
 8002984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002988:	b08b      	sub	sp, #44	; 0x2c
 800298a:	af02      	add	r7, sp, #8
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
 8002996:	466b      	mov	r3, sp
 8002998:	461e      	mov	r6, r3

	uint8_t write_msg[len + 2];
 800299a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800299e:	1c99      	adds	r1, r3, #2
 80029a0:	1e4b      	subs	r3, r1, #1
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	460a      	mov	r2, r1
 80029a6:	2300      	movs	r3, #0
 80029a8:	4690      	mov	r8, r2
 80029aa:	4699      	mov	r9, r3
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c0:	460a      	mov	r2, r1
 80029c2:	2300      	movs	r3, #0
 80029c4:	4614      	mov	r4, r2
 80029c6:	461d      	mov	r5, r3
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	460b      	mov	r3, r1
 80029da:	3307      	adds	r3, #7
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	ebad 0d03 	sub.w	sp, sp, r3
 80029e4:	ab02      	add	r3, sp, #8
 80029e6:	3300      	adds	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len + 2; ++i)
 80029ea:	2300      	movs	r3, #0
 80029ec:	77bb      	strb	r3, [r7, #30]
 80029ee:	e006      	b.n	80029fe <SX1262WriteRegister+0x7a>
		write_msg[i] = 0;
 80029f0:	7fbb      	ldrb	r3, [r7, #30]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	2000      	movs	r0, #0
 80029f6:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 0; i < len + 2; ++i)
 80029f8:	7fbb      	ldrb	r3, [r7, #30]
 80029fa:	3301      	adds	r3, #1
 80029fc:	77bb      	strb	r3, [r7, #30]
 80029fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	7fbb      	ldrb	r3, [r7, #30]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	daf2      	bge.n	80029f0 <SX1262WriteRegister+0x6c>

	write_msg[0] = address >> 8;
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	701a      	strb	r2, [r3, #0]
	write_msg[1] = address;
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 2; i < len + 2; ++i)
 8002a1e:	2302      	movs	r3, #2
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	e00a      	b.n	8002a3a <SX1262WriteRegister+0xb6>
		write_msg[i] = data[i - 2];
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	3b02      	subs	r3, #2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	441a      	add	r2, r3
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
 8002a2e:	7810      	ldrb	r0, [r2, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 2; i < len + 2; ++i)
 8002a34:	7ffb      	ldrb	r3, [r7, #31]
 8002a36:	3301      	adds	r3, #1
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	daee      	bge.n	8002a24 <SX1262WriteRegister+0xa0>

	SX1262WriteCommand(mcu, radio, WRITE_REGISTER, write_msg, sizeof(write_msg));
 8002a46:	b2cb      	uxtb	r3, r1
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	220d      	movs	r2, #13
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fd7b 	bl	800254c <SX1262WriteCommand>
 8002a56:	46b5      	mov	sp, r6
}
 8002a58:	bf00      	nop
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002a62 <SX1262ReadRegister>:
*                 corresponds to 1 Byte memory. If the requested data is more
*                 than 1 byte (len > 1), the given address is the address of
*                 the 1st Byte
******************************************************************************/
void SX1262ReadRegister(MCU* mcu, Radio* radio, uint16_t address, uint8_t *data, uint8_t len) // len = # of Bytes of the received message
{
 8002a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a66:	b091      	sub	sp, #68	; 0x44
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	61f8      	str	r0, [r7, #28]
 8002a6c:	61b9      	str	r1, [r7, #24]
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	4613      	mov	r3, r2
 8002a72:	82fb      	strh	r3, [r7, #22]
 8002a74:	466b      	mov	r3, sp
 8002a76:	607b      	str	r3, [r7, #4]
	uint8_t write_msg[len + 4];
 8002a78:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a7c:	1d1e      	adds	r6, r3, #4
 8002a7e:	1e73      	subs	r3, r6, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	4632      	mov	r2, r6
 8002a84:	2300      	movs	r3, #0
 8002a86:	60ba      	str	r2, [r7, #8]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	00cb      	lsls	r3, r1, #3
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	00ca      	lsls	r2, r1, #3
 8002aa0:	4632      	mov	r2, r6
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4692      	mov	sl, r2
 8002aa6:	469b      	mov	fp, r3
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002abc:	4633      	mov	r3, r6
 8002abe:	3307      	adds	r3, #7
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	ebad 0d03 	sub.w	sp, sp, r3
 8002ac8:	ab02      	add	r3, sp, #8
 8002aca:	3300      	adds	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t read_msg[len + 4];
 8002ace:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002ad2:	1d19      	adds	r1, r3, #4
 8002ad4:	1e4b      	subs	r3, r1, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad8:	460a      	mov	r2, r1
 8002ada:	2300      	movs	r3, #0
 8002adc:	4690      	mov	r8, r2
 8002ade:	4699      	mov	r9, r3
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af4:	460a      	mov	r2, r1
 8002af6:	2300      	movs	r3, #0
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	00eb      	lsls	r3, r5, #3
 8002b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0a:	00e2      	lsls	r2, r4, #3
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	3307      	adds	r3, #7
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	ebad 0d03 	sub.w	sp, sp, r3
 8002b18:	ab02      	add	r3, sp, #8
 8002b1a:	3300      	adds	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < len + 4; ++i)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002b24:	e00e      	b.n	8002b44 <SX1262ReadRegister+0xe2>
	{
		write_msg[i] = 0;
 8002b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	54d1      	strb	r1, [r2, r3]
		read_msg[i]  = 0;
 8002b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	2100      	movs	r1, #0
 8002b38:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len + 4; ++i)
 8002b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002b44:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002b48:	1cda      	adds	r2, r3, #3
 8002b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dae9      	bge.n	8002b26 <SX1262ReadRegister+0xc4>
	}

	write_msg[0] = READ_REGISTER;
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	221d      	movs	r2, #29
 8002b56:	701a      	strb	r2, [r3, #0]
	write_msg[1] = address >> 8;
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	705a      	strb	r2, [r3, #1]
	write_msg[2] = address;
 8002b64:	8afb      	ldrh	r3, [r7, #22]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	709a      	strb	r2, [r3, #2]

	while(HAL_GPIO_ReadPin(mcu->busy.type, mcu->busy.pin) != GPIO_PIN_RESET);  // Wait until BUSY pin goes LOW
 8002b6c:	bf00      	nop
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	8b1b      	ldrh	r3, [r3, #24]
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f001 fe7d 	bl	8004878 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f4      	bne.n	8002b6e <SX1262ReadRegister+0x10c>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_RESET);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	6858      	ldr	r0, [r3, #4]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	891b      	ldrh	r3, [r3, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f001 fe8a 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcu->spi.spiHandle, write_msg, read_msg, sizeof(write_msg), SPI_TIMEOUT);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	b2b3      	uxth	r3, r6
 8002b9a:	2232      	movs	r2, #50	; 0x32
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	6a3a      	ldr	r2, [r7, #32]
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba2:	f004 fd06 	bl	80075b2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_SET);
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	6858      	ldr	r0, [r3, #4]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	891b      	ldrh	r3, [r3, #8]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f001 fe79 	bl	80048a8 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < len; ++i)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002bbc:	e00e      	b.n	8002bdc <SX1262ReadRegister+0x17a>
		data[i] = read_msg[i + 4];
 8002bbe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bc2:	1d1a      	adds	r2, r3, #4
 8002bc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bc8:	6939      	ldr	r1, [r7, #16]
 8002bca:	440b      	add	r3, r1
 8002bcc:	6a39      	ldr	r1, [r7, #32]
 8002bce:	5c8a      	ldrb	r2, [r1, r2]
 8002bd0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; ++i)
 8002bd2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002bdc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002be0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3ea      	bcc.n	8002bbe <SX1262ReadRegister+0x15c>

	// Debugging
	uint8_t limit;
	if (len + 4 <= READ_MSG_LEN)
 8002be8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002bec:	2bc4      	cmp	r3, #196	; 0xc4
 8002bee:	d805      	bhi.n	8002bfc <SX1262ReadRegister+0x19a>
		limit = len + 4;
 8002bf0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002bfa:	e002      	b.n	8002c02 <SX1262ReadRegister+0x1a0>
	else
		limit = READ_MSG_LEN;
 8002bfc:	23c8      	movs	r3, #200	; 0xc8
 8002bfe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	for (uint8_t i = 0; i < limit; ++i)
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002c08:	e00c      	b.n	8002c24 <SX1262ReadRegister+0x1c2>
		radio->spi_read_msg[i] = read_msg[i];
 8002c0a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	5c89      	ldrb	r1, [r1, r2]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < limit; ++i)
 8002c1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002c24:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002c28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3ec      	bcc.n	8002c0a <SX1262ReadRegister+0x1a8>
	for (uint8_t i = len + 4; i < READ_MSG_LEN; ++i)
 8002c30:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002c34:	3304      	adds	r3, #4
 8002c36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c3a:	e009      	b.n	8002c50 <SX1262ReadRegister+0x1ee>
		radio->spi_read_msg[i] = 0;
 8002c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	2100      	movs	r1, #0
 8002c44:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = len + 4; i < READ_MSG_LEN; ++i)
 8002c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c54:	2bc7      	cmp	r3, #199	; 0xc7
 8002c56:	d9f1      	bls.n	8002c3c <SX1262ReadRegister+0x1da>
 8002c58:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8002c5c:	bf00      	nop
 8002c5e:	373c      	adds	r7, #60	; 0x3c
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c66 <SX1262SafeWriteRegister>:
/*****************************************************************************
*  @Description	  Writes to the requested register and then reads back to
*                 ensure that the data has been written successfully.
******************************************************************************/
RadioState_t SX1262SafeWriteRegister(MCU* mcu, Radio* radio, uint16_t address, uint8_t* data, uint8_t len)
{
 8002c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
 8002c78:	466b      	mov	r3, sp
 8002c7a:	469a      	mov	sl, r3
	uint8_t received_data[len];
 8002c7c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8002c80:	4633      	mov	r3, r6
 8002c82:	3b01      	subs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	b2f3      	uxtb	r3, r6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4698      	mov	r8, r3
 8002c8c:	4691      	mov	r9, r2
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca2:	b2f3      	uxtb	r3, r6
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	461c      	mov	r4, r3
 8002ca8:	4615      	mov	r5, r2
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	00eb      	lsls	r3, r5, #3
 8002cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb8:	00e2      	lsls	r2, r4, #3
 8002cba:	4633      	mov	r3, r6
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	ebad 0d03 	sub.w	sp, sp, r3
 8002cc6:	ab02      	add	r3, sp, #8
 8002cc8:	3300      	adds	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; ++i)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	77bb      	strb	r3, [r7, #30]
 8002cd0:	e006      	b.n	8002ce0 <SX1262SafeWriteRegister+0x7a>
		received_data[i] = 0;
 8002cd2:	7fbb      	ldrb	r3, [r7, #30]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len; ++i)
 8002cda:	7fbb      	ldrb	r3, [r7, #30]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	77bb      	strb	r3, [r7, #30]
 8002ce0:	7fba      	ldrb	r2, [r7, #30]
 8002ce2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d3f3      	bcc.n	8002cd2 <SX1262SafeWriteRegister+0x6c>

	SX1262WriteRegister(mcu, radio, address, data, len);
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fe44 	bl	8002984 <SX1262WriteRegister>
	SX1262ReadRegister(mcu, radio, address, received_data, sizeof(received_data));
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	9600      	str	r6, [sp, #0]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff feac 	bl	8002a62 <SX1262ReadRegister>

	for (uint8_t i = 0; i < len; ++i)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e00d      	b.n	8002d2c <SX1262SafeWriteRegister+0xc6>
		if (data[i] != received_data[i])
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	7ffb      	ldrb	r3, [r7, #31]
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	5ccb      	ldrb	r3, [r1, r3]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <SX1262SafeWriteRegister+0xc0>
			return RADIO_SAFE_WRITE_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e008      	b.n	8002d38 <SX1262SafeWriteRegister+0xd2>
	for (uint8_t i = 0; i < len; ++i)
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	7ffa      	ldrb	r2, [r7, #31]
 8002d2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3ec      	bcc.n	8002d10 <SX1262SafeWriteRegister+0xaa>
	return RADIO_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	46d5      	mov	sp, sl
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d44 <SX1262WriteBuffer>:
*  @Description	  Writes to the buffer. The buffer has 256 positions so the
*                 offset (0 - 255) has to be given. The buffer is used for
*                 transmitted / received payload
******************************************************************************/
void SX1262WriteBuffer(MCU* mcu, Radio* radio, uint8_t offset, uint8_t *data, uint8_t len)
{
 8002d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d48:	b08b      	sub	sp, #44	; 0x2c
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71fb      	strb	r3, [r7, #7]
 8002d56:	466b      	mov	r3, sp
 8002d58:	461e      	mov	r6, r3
	uint8_t write_msg[len + 1];
 8002d5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002d5e:	1c59      	adds	r1, r3, #1
 8002d60:	1e4b      	subs	r3, r1, #1
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	460a      	mov	r2, r1
 8002d66:	2300      	movs	r3, #0
 8002d68:	4690      	mov	r8, r2
 8002d6a:	4699      	mov	r9, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d80:	460a      	mov	r2, r1
 8002d82:	2300      	movs	r3, #0
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	00eb      	lsls	r3, r5, #3
 8002d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d96:	00e2      	lsls	r2, r4, #3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	3307      	adds	r3, #7
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	ebad 0d03 	sub.w	sp, sp, r3
 8002da4:	ab02      	add	r3, sp, #8
 8002da6:	3300      	adds	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len + 1; ++i)
 8002daa:	2300      	movs	r3, #0
 8002dac:	77bb      	strb	r3, [r7, #30]
 8002dae:	e006      	b.n	8002dbe <SX1262WriteBuffer+0x7a>
		write_msg[i] = 0;
 8002db0:	7fbb      	ldrb	r3, [r7, #30]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	2000      	movs	r0, #0
 8002db6:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 0; i < len + 1; ++i)
 8002db8:	7fbb      	ldrb	r3, [r7, #30]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	77bb      	strb	r3, [r7, #30]
 8002dbe:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8002dc2:	7fbb      	ldrb	r3, [r7, #30]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d2f3      	bcs.n	8002db0 <SX1262WriteBuffer+0x6c>

	write_msg[0] = offset;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	79fa      	ldrb	r2, [r7, #7]
 8002dcc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; ++i)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e00a      	b.n	8002dea <SX1262WriteBuffer+0xa6>
		write_msg[i + 1] = data[i];
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	441a      	add	r2, r3
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	7810      	ldrb	r0, [r2, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	54d0      	strb	r0, [r2, r3]
	for (uint8_t i = 0; i < len; ++i)
 8002de4:	7ffb      	ldrb	r3, [r7, #31]
 8002de6:	3301      	adds	r3, #1
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	7ffa      	ldrb	r2, [r7, #31]
 8002dec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3ef      	bcc.n	8002dd4 <SX1262WriteBuffer+0x90>

	if (len > 40)
 8002df4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002df8:	2b28      	cmp	r3, #40	; 0x28
 8002dfa:	d905      	bls.n	8002e08 <SX1262WriteBuffer+0xc4>
		test++;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <SX1262WriteBuffer+0xe0>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <SX1262WriteBuffer+0xe0>)
 8002e06:	701a      	strb	r2, [r3, #0]

	SX1262WriteCommand(mcu, radio, WRITE_BUFFER, write_msg, sizeof(write_msg));
 8002e08:	b2cb      	uxtb	r3, r1
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	220e      	movs	r2, #14
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff fb9a 	bl	800254c <SX1262WriteCommand>
 8002e18:	46b5      	mov	sp, r6
}
 8002e1a:	bf00      	nop
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e24:	2000002c 	.word	0x2000002c

08002e28 <SX1262ReadBuffer>:
*  @Description	  Reads from the buffer. The buffer has 256 positions so the
*                 offset (0 - 255) has to be given. The buffer is used for
*                 transmitted / received payload
******************************************************************************/
void SX1262ReadBuffer(MCU* mcu, Radio* radio, uint8_t offset, uint8_t *received_data, uint8_t len)
{
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	b091      	sub	sp, #68	; 0x44
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	61f8      	str	r0, [r7, #28]
 8002e32:	61b9      	str	r1, [r7, #24]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	4613      	mov	r3, r2
 8002e38:	75fb      	strb	r3, [r7, #23]
 8002e3a:	466b      	mov	r3, sp
 8002e3c:	607b      	str	r3, [r7, #4]
	    return 1;
	}
	while(digitalRead(SX126x_BUSY));
	*/

	uint8_t write_msg[len + 3];
 8002e3e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002e42:	1cde      	adds	r6, r3, #3
 8002e44:	1e73      	subs	r3, r6, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e48:	4632      	mov	r2, r6
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	00cb      	lsls	r3, r1, #3
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	00ca      	lsls	r2, r1, #3
 8002e66:	4632      	mov	r2, r6
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4692      	mov	sl, r2
 8002e6c:	469b      	mov	fp, r3
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e82:	4633      	mov	r3, r6
 8002e84:	3307      	adds	r3, #7
 8002e86:	08db      	lsrs	r3, r3, #3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	ebad 0d03 	sub.w	sp, sp, r3
 8002e8e:	ab02      	add	r3, sp, #8
 8002e90:	3300      	adds	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t read_msg[len + 3];
 8002e94:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002e98:	1cd9      	adds	r1, r3, #3
 8002e9a:	1e4b      	subs	r3, r1, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4690      	mov	r8, r2
 8002ea4:	4699      	mov	r9, r3
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eba:	460a      	mov	r2, r1
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4614      	mov	r4, r2
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	00eb      	lsls	r3, r5, #3
 8002ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed0:	00e2      	lsls	r2, r4, #3
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	3307      	adds	r3, #7
 8002ed6:	08db      	lsrs	r3, r3, #3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	ebad 0d03 	sub.w	sp, sp, r3
 8002ede:	ab02      	add	r3, sp, #8
 8002ee0:	3300      	adds	r3, #0
 8002ee2:	623b      	str	r3, [r7, #32]
	for (uint8_t i = 0; i < len + 3; ++i)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002eea:	e00e      	b.n	8002f0a <SX1262ReadBuffer+0xe2>
	{
		write_msg[i] = 0;
 8002eec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	54d1      	strb	r1, [r2, r3]
		read_msg[i]  = 0;
 8002ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002efa:	6a3a      	ldr	r2, [r7, #32]
 8002efc:	2100      	movs	r1, #0
 8002efe:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len + 3; ++i)
 8002f00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f04:	3301      	adds	r3, #1
 8002f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002f0a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002f0e:	1c9a      	adds	r2, r3, #2
 8002f10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dae9      	bge.n	8002eec <SX1262ReadBuffer+0xc4>
	}

	write_msg[0] = READ_BUFFER;
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	221e      	movs	r2, #30
 8002f1c:	701a      	strb	r2, [r3, #0]
	write_msg[1] = offset;
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	7dfa      	ldrb	r2, [r7, #23]
 8002f22:	705a      	strb	r2, [r3, #1]

	while(HAL_GPIO_ReadPin(mcu->busy.type, mcu->busy.pin) != GPIO_PIN_RESET);  // Wait until BUSY pin goes LOW
 8002f24:	bf00      	nop
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	8b1b      	ldrh	r3, [r3, #24]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f001 fca1 	bl	8004878 <HAL_GPIO_ReadPin>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f4      	bne.n	8002f26 <SX1262ReadBuffer+0xfe>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_RESET);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	6858      	ldr	r0, [r3, #4]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	891b      	ldrh	r3, [r3, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	4619      	mov	r1, r3
 8002f48:	f001 fcae 	bl	80048a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(mcu->spi.spiHandle, write_msg, read_msg, sizeof(write_msg), SPI_TIMEOUT);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	b2b3      	uxth	r3, r6
 8002f52:	2232      	movs	r2, #50	; 0x32
 8002f54:	9200      	str	r2, [sp, #0]
 8002f56:	6a3a      	ldr	r2, [r7, #32]
 8002f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5a:	f004 fb2a 	bl	80075b2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(mcu->spi.NSS.type, mcu->spi.NSS.pin, GPIO_PIN_SET);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	6858      	ldr	r0, [r3, #4]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	891b      	ldrh	r3, [r3, #8]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f001 fc9d 	bl	80048a8 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < len; ++i)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002f74:	e00e      	b.n	8002f94 <SX1262ReadBuffer+0x16c>
		received_data[i] = read_msg[i + 3];
 8002f76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f7a:	1cda      	adds	r2, r3, #3
 8002f7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f80:	6939      	ldr	r1, [r7, #16]
 8002f82:	440b      	add	r3, r1
 8002f84:	6a39      	ldr	r1, [r7, #32]
 8002f86:	5c8a      	ldrb	r2, [r1, r2]
 8002f88:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; ++i)
 8002f8a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002f94:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002f98:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3ea      	bcc.n	8002f76 <SX1262ReadBuffer+0x14e>


	// Debugging
	uint8_t limit;
	if (len + 3 <= READ_MSG_LEN)
 8002fa0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002fa4:	2bc5      	cmp	r3, #197	; 0xc5
 8002fa6:	d805      	bhi.n	8002fb4 <SX1262ReadBuffer+0x18c>
		limit = len + 3;
 8002fa8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002fac:	3303      	adds	r3, #3
 8002fae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002fb2:	e002      	b.n	8002fba <SX1262ReadBuffer+0x192>
	else
		limit = READ_MSG_LEN;
 8002fb4:	23c8      	movs	r3, #200	; 0xc8
 8002fb6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	for (uint8_t i = 0; i < limit; ++i)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002fc0:	e00c      	b.n	8002fdc <SX1262ReadBuffer+0x1b4>
		radio->spi_read_msg[i] = read_msg[i];
 8002fc2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002fc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	5c89      	ldrb	r1, [r1, r2]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < limit; ++i)
 8002fd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002fdc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002fe0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3ec      	bcc.n	8002fc2 <SX1262ReadBuffer+0x19a>
	for (uint8_t i = len + 3; i < READ_MSG_LEN; ++i)
 8002fe8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002fec:	3303      	adds	r3, #3
 8002fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ff2:	e009      	b.n	8003008 <SX1262ReadBuffer+0x1e0>
		radio->spi_read_msg[i] = 0;
 8002ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = len + 3; i < READ_MSG_LEN; ++i)
 8002ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003002:	3301      	adds	r3, #1
 8003004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003008:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800300c:	2bc7      	cmp	r3, #199	; 0xc7
 800300e:	d9f1      	bls.n	8002ff4 <SX1262ReadBuffer+0x1cc>
 8003010:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8003014:	bf00      	nop
 8003016:	373c      	adds	r7, #60	; 0x3c
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003020 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == mcu.dio2.pin)
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_GPIO_EXTI_Callback+0x38>)
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	429a      	cmp	r2, r3
 8003032:	d104      	bne.n	800303e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		SX1262dio2Interrupt(&mcu, &radio);
 8003034:	4909      	ldr	r1, [pc, #36]	; (800305c <HAL_GPIO_EXTI_Callback+0x3c>)
 8003036:	4808      	ldr	r0, [pc, #32]	; (8003058 <HAL_GPIO_EXTI_Callback+0x38>)
 8003038:	f7ff f9e7 	bl	800240a <SX1262dio2Interrupt>

	else if (GPIO_Pin == mcu.dio1.pin)
	{
		radio.msg_pending = true;
	}
}
 800303c:	e008      	b.n	8003050 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == mcu.dio1.pin)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_GPIO_EXTI_Callback+0x38>)
 8003040:	8c1b      	ldrh	r3, [r3, #32]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	429a      	cmp	r2, r3
 8003046:	d103      	bne.n	8003050 <HAL_GPIO_EXTI_Callback+0x30>
		radio.msg_pending = true;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_GPIO_EXTI_Callback+0x3c>)
 800304a:	2201      	movs	r2, #1
 800304c:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000030 	.word	0x20000030
 800305c:	20000074 	.word	0x20000074

08003060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b092      	sub	sp, #72	; 0x48
 8003064:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003066:	f000 ffa5 	bl	8003fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800306a:	f000 faa3 	bl	80035b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800306e:	f000 fbcd 	bl	800380c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003072:	f000 fae7 	bl	8003644 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003076:	f000 fb8b 	bl	8003790 <MX_SPI1_Init>
  MX_RTC_Init();
 800307a:	f000 fb51 	bl	8003720 <MX_RTC_Init>
  MX_LPTIM1_Init();
 800307e:	f000 fb1f 	bl	80036c0 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  MCU_init(&mcu, &hspi1, GPIOA, NSS_Pin, GPIOB, NRESET_Pin, GPIOB, BUSY_Pin, GPIOB, DIO1_Pin, GPIOA,
 8003082:	2340      	movs	r3, #64	; 0x40
 8003084:	930d      	str	r3, [sp, #52]	; 0x34
 8003086:	4ba8      	ldr	r3, [pc, #672]	; (8003328 <main+0x2c8>)
 8003088:	930c      	str	r3, [sp, #48]	; 0x30
 800308a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003090:	4ba6      	ldr	r3, [pc, #664]	; (800332c <main+0x2cc>)
 8003092:	930a      	str	r3, [sp, #40]	; 0x28
 8003094:	2301      	movs	r3, #1
 8003096:	9309      	str	r3, [sp, #36]	; 0x24
 8003098:	4ba4      	ldr	r3, [pc, #656]	; (800332c <main+0x2cc>)
 800309a:	9308      	str	r3, [sp, #32]
 800309c:	2301      	movs	r3, #1
 800309e:	9307      	str	r3, [sp, #28]
 80030a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030a4:	9306      	str	r3, [sp, #24]
 80030a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030aa:	9305      	str	r3, [sp, #20]
 80030ac:	4b9f      	ldr	r3, [pc, #636]	; (800332c <main+0x2cc>)
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b4:	9303      	str	r3, [sp, #12]
 80030b6:	4b9d      	ldr	r3, [pc, #628]	; (800332c <main+0x2cc>)
 80030b8:	9302      	str	r3, [sp, #8]
 80030ba:	2304      	movs	r3, #4
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	4b9b      	ldr	r3, [pc, #620]	; (800332c <main+0x2cc>)
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2310      	movs	r3, #16
 80030c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80030c8:	4999      	ldr	r1, [pc, #612]	; (8003330 <main+0x2d0>)
 80030ca:	489a      	ldr	r0, [pc, #616]	; (8003334 <main+0x2d4>)
 80030cc:	f7ff f9eb 	bl	80024a6 <MCU_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  i2c_status += sensor_init(&pr, &hi2c1, VSENS_GPIO_Port, VSENS_Pin);
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d4:	4a94      	ldr	r2, [pc, #592]	; (8003328 <main+0x2c8>)
 80030d6:	4998      	ldr	r1, [pc, #608]	; (8003338 <main+0x2d8>)
 80030d8:	4898      	ldr	r0, [pc, #608]	; (800333c <main+0x2dc>)
 80030da:	f7fd fd4c 	bl	8000b76 <sensor_init>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b97      	ldr	r3, [pc, #604]	; (8003340 <main+0x2e0>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b95      	ldr	r3, [pc, #596]	; (8003340 <main+0x2e0>)
 80030ec:	701a      	strb	r2, [r3, #0]
  Radio_struct_init(&radio);
 80030ee:	4895      	ldr	r0, [pc, #596]	; (8003344 <main+0x2e4>)
 80030f0:	f7ff f834 	bl	800215c <Radio_struct_init>
  counter += SX1262GfskInit(&mcu, &radio, 0, 900);
 80030f4:	f44f 7361 	mov.w	r3, #900	; 0x384
 80030f8:	2200      	movs	r2, #0
 80030fa:	4992      	ldr	r1, [pc, #584]	; (8003344 <main+0x2e4>)
 80030fc:	488d      	ldr	r0, [pc, #564]	; (8003334 <main+0x2d4>)
 80030fe:	f7fe ff01 	bl	8001f04 <SX1262GfskInit>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	4b90      	ldr	r3, [pc, #576]	; (8003348 <main+0x2e8>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b8e      	ldr	r3, [pc, #568]	; (8003348 <main+0x2e8>)
 8003110:	701a      	strb	r2, [r3, #0]

  last_message_time = HAL_GetTick();
 8003112:	f000 ffbf 	bl	8004094 <HAL_GetTick>
 8003116:	4603      	mov	r3, r0
 8003118:	2200      	movs	r2, #0
 800311a:	461c      	mov	r4, r3
 800311c:	4615      	mov	r5, r2
 800311e:	4b8b      	ldr	r3, [pc, #556]	; (800334c <main+0x2ec>)
 8003120:	e9c3 4500 	strd	r4, r5, [r3]

  SleepParams_t sleep;
  sleep.rtcMode = RTC_DISABLED;
 8003124:	2300      	movs	r3, #0
 8003126:	717b      	strb	r3, [r7, #5]
  sleep.startMode = WARM_START;
 8003128:	2301      	movs	r3, #1
 800312a:	713b      	strb	r3, [r7, #4]


  HAL_PWREx_EnableSRAM2ContentRetention();
 800312c:	f002 ff00 	bl	8005f30 <HAL_PWREx_EnableSRAM2ContentRetention>
  HAL_PWREx_EnableLowPowerRunMode();
 8003130:	f002 ff2a 	bl	8005f88 <HAL_PWREx_EnableLowPowerRunMode>

  while (1)
  {
	  if (!active)
 8003134:	4b86      	ldr	r3, [pc, #536]	; (8003350 <main+0x2f0>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d164      	bne.n	8003206 <main+0x1a6>
	  {
		  if (!active1) {
 800313c:	4b85      	ldr	r3, [pc, #532]	; (8003354 <main+0x2f4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d13a      	bne.n	80031ba <main+0x15a>

			  active1 = 1;
 8003144:	4b83      	ldr	r3, [pc, #524]	; (8003354 <main+0x2f4>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
			  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 800314a:	2200      	movs	r2, #0
 800314c:	497d      	ldr	r1, [pc, #500]	; (8003344 <main+0x2e4>)
 800314e:	4879      	ldr	r0, [pc, #484]	; (8003334 <main+0x2d4>)
 8003150:	f7fd fe65 	bl	8000e1e <SX1262SetStandby>

			  SX1262SetSleep(&mcu, &radio, sleep);
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	497b      	ldr	r1, [pc, #492]	; (8003344 <main+0x2e4>)
 8003158:	4876      	ldr	r0, [pc, #472]	; (8003334 <main+0x2d4>)
 800315a:	f7fe f9ff 	bl	800155c <SX1262SetSleep>

	//---------------------------------------------------------//deinit i2c/spi

			  DeInitializeTPMS();
 800315e:	f000 fc1d 	bl	800399c <DeInitializeTPMS>

	//---------------------------------------------------------// STOP2

			  HAL_SuspendTick();
 8003162:	f000 ffc7 	bl	80040f4 <HAL_SuspendTick>

			  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x9C40, 1,0);
 8003166:	2300      	movs	r3, #0
 8003168:	2201      	movs	r2, #1
 800316a:	f649 4140 	movw	r1, #40000	; 0x9c40
 800316e:	487a      	ldr	r0, [pc, #488]	; (8003358 <main+0x2f8>)
 8003170:	f004 f830 	bl	80071d4 <HAL_RTCEx_SetWakeUpTimer_IT>


	//		  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
			  HAL_PWR_EnterSTANDBYMode();
 8003174:	f002 fe60 	bl	8005e38 <HAL_PWR_EnterSTANDBYMode>

			  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8003178:	4877      	ldr	r0, [pc, #476]	; (8003358 <main+0x2f8>)
 800317a:	f004 f8c7 	bl	800730c <HAL_RTCEx_DeactivateWakeUpTimer>

			  HAL_ResumeTick();
 800317e:	f000 ffc9 	bl	8004114 <HAL_ResumeTick>

	//---------------------------------------------------------//init i2c/spi

			  InitializeTPMS();
 8003182:	f000 fc75 	bl	8003a70 <InitializeTPMS>

	//---------------------------------------------------------//

			  tst = 16;
 8003186:	4b75      	ldr	r3, [pc, #468]	; (800335c <main+0x2fc>)
 8003188:	2210      	movs	r2, #16
 800318a:	601a      	str	r2, [r3, #0]
			  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 800318c:	2200      	movs	r2, #0
 800318e:	496d      	ldr	r1, [pc, #436]	; (8003344 <main+0x2e4>)
 8003190:	4868      	ldr	r0, [pc, #416]	; (8003334 <main+0x2d4>)
 8003192:	f7fd fe44 	bl	8000e1e <SX1262SetStandby>
			  tst = 17;
 8003196:	4b71      	ldr	r3, [pc, #452]	; (800335c <main+0x2fc>)
 8003198:	2211      	movs	r2, #17
 800319a:	601a      	str	r2, [r3, #0]
			  radio.msg_pending = false;
 800319c:	4b69      	ldr	r3, [pc, #420]	; (8003344 <main+0x2e4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
			  SX1262SetRx(&mcu, &radio, 0xFFFF);
 80031a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a8:	4966      	ldr	r1, [pc, #408]	; (8003344 <main+0x2e4>)
 80031aa:	4862      	ldr	r0, [pc, #392]	; (8003334 <main+0x2d4>)
 80031ac:	f7fe f9f6 	bl	800159c <SX1262SetRx>
			  i++;
 80031b0:	4b6b      	ldr	r3, [pc, #428]	; (8003360 <main+0x300>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a6a      	ldr	r2, [pc, #424]	; (8003360 <main+0x300>)
 80031b8:	6013      	str	r3, [r2, #0]
		  }
		  uint32_t current = HAL_GetTick();
 80031ba:	f000 ff6b 	bl	8004094 <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]
		  while (HAL_GetTick() - current < 100)
 80031c0:	e013      	b.n	80031ea <main+0x18a>
		  {
			  if (radio.msg_pending)
 80031c2:	4b60      	ldr	r3, [pc, #384]	; (8003344 <main+0x2e4>)
 80031c4:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <main+0x180>
			  {
				  active = 1;
 80031cc:	4b60      	ldr	r3, [pc, #384]	; (8003350 <main+0x2f0>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
				  first_wakeup = 1;
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <main+0x304>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
				  rtc_reset_counter = 0;
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <main+0x308>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
				  break;
 80031de:	e00b      	b.n	80031f8 <main+0x198>
			  }
			  rtc_reset_counter++;
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <main+0x308>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	4a60      	ldr	r2, [pc, #384]	; (8003368 <main+0x308>)
 80031e8:	6013      	str	r3, [r2, #0]
		  while (HAL_GetTick() - current < 100)
 80031ea:	f000 ff53 	bl	8004094 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b63      	cmp	r3, #99	; 0x63
 80031f6:	d9e4      	bls.n	80031c2 <main+0x162>
		  }
		  if (!active) {active1 = 0;}
 80031f8:	4b55      	ldr	r3, [pc, #340]	; (8003350 <main+0x2f0>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <main+0x1a6>
 8003200:	4b54      	ldr	r3, [pc, #336]	; (8003354 <main+0x2f4>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
	  }


	  if (radio.msg_pending)
 8003206:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <main+0x2e4>)
 8003208:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8160 	beq.w	80034d2 <main+0x472>
	  {
		  SX1262SetStandby(&mcu, &radio, STDBY_RC); // 1ms
 8003212:	2200      	movs	r2, #0
 8003214:	494b      	ldr	r1, [pc, #300]	; (8003344 <main+0x2e4>)
 8003216:	4847      	ldr	r0, [pc, #284]	; (8003334 <main+0x2d4>)
 8003218:	f7fd fe01 	bl	8000e1e <SX1262SetStandby>

		  SX1262dio1Interrupt(&mcu, &radio);
 800321c:	4949      	ldr	r1, [pc, #292]	; (8003344 <main+0x2e4>)
 800321e:	4845      	ldr	r0, [pc, #276]	; (8003334 <main+0x2d4>)
 8003220:	f7ff f8b3 	bl	800238a <SX1262dio1Interrupt>

		  SX1262ClearIrqStatus(&mcu, &radio, 0xFFFF);
 8003224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003228:	4946      	ldr	r1, [pc, #280]	; (8003344 <main+0x2e4>)
 800322a:	4842      	ldr	r0, [pc, #264]	; (8003334 <main+0x2d4>)
 800322c:	f7fe f9fb 	bl	8001626 <SX1262ClearIrqStatus>

		  SX1262SetSleep(&mcu, &radio, sleep);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4944      	ldr	r1, [pc, #272]	; (8003344 <main+0x2e4>)
 8003234:	483f      	ldr	r0, [pc, #252]	; (8003334 <main+0x2d4>)
 8003236:	f7fe f991 	bl	800155c <SX1262SetSleep>

		  if ((radio.tpms_rx_msg[0] >> 4) == REQUEST_MSG)
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <main+0x2e4>)
 800323c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b0b      	cmp	r3, #11
 8003246:	f040 8109 	bne.w	800345c <main+0x3fc>
		  {
			  wait_time = ((radio.tpms_rx_msg[1] << 8) | radio.tpms_rx_msg[2])  + (10 * ID);
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <main+0x2e4>)
 800324c:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	b21a      	sxth	r2, r3
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <main+0x2e4>)
 8003256:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 800325a:	b21b      	sxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b21b      	sxth	r3, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	3314      	adds	r3, #20
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <main+0x30c>)
 8003268:	801a      	strh	r2, [r3, #0]

			  if (wait_time >= 10000)
 800326a:	4b40      	ldr	r3, [pc, #256]	; (800336c <main+0x30c>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003272:	4293      	cmp	r3, r2
 8003274:	d906      	bls.n	8003284 <main+0x224>
			  {
				  wait_time = 3000;
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <main+0x30c>)
 8003278:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800327c:	801a      	strh	r2, [r3, #0]
				  active = 0;
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <main+0x2f0>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
			  }

			  uint8_t tx_freq = radio.tpms_rx_msg[0] & 0b11;
 8003284:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <main+0x2e4>)
 8003286:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	71fb      	strb	r3, [r7, #7]
					  break;
				  }
				  break;

			  case 2:
			      switch (tx_freq)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d01c      	beq.n	80032d0 <main+0x270>
 8003296:	2b03      	cmp	r3, #3
 8003298:	dc25      	bgt.n	80032e6 <main+0x286>
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <main+0x244>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d00b      	beq.n	80032ba <main+0x25a>
					  sleep_time = 2979;
					  wait_time -= 3;
					  break;

				  default:
					  break;
 80032a2:	e020      	b.n	80032e6 <main+0x286>
				      sleep_time = 511;
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <main+0x310>)
 80032a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032aa:	601a      	str	r2, [r3, #0]
					  wait_time += 2;
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <main+0x30c>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	3302      	adds	r3, #2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <main+0x30c>)
 80032b6:	801a      	strh	r2, [r3, #0]
					  break;
 80032b8:	e016      	b.n	80032e8 <main+0x288>
					  sleep_time = 1003;
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <main+0x310>)
 80032bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80032c0:	601a      	str	r2, [r3, #0]
					  wait_time += 33;
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <main+0x30c>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	3321      	adds	r3, #33	; 0x21
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <main+0x30c>)
 80032cc:	801a      	strh	r2, [r3, #0]
					  break;
 80032ce:	e00b      	b.n	80032e8 <main+0x288>
					  sleep_time = 2979;
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <main+0x310>)
 80032d2:	f640 32a3 	movw	r2, #2979	; 0xba3
 80032d6:	601a      	str	r2, [r3, #0]
					  wait_time -= 3;
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <main+0x30c>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	3b03      	subs	r3, #3
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <main+0x30c>)
 80032e2:	801a      	strh	r2, [r3, #0]
					  break;
 80032e4:	e000      	b.n	80032e8 <main+0x288>
					  break;
 80032e6:	bf00      	nop
				  }
				  break;
 80032e8:	bf00      	nop
			      break;

			  default:
				  break;
			  }
			  sleep_time += (int8_t)(radio.tpms_rx_msg[3]);
 80032ea:	4b16      	ldr	r3, [pc, #88]	; (8003344 <main+0x2e4>)
 80032ec:	f893 33cf 	ldrb.w	r3, [r3, #975]	; 0x3cf
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <main+0x310>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <main+0x310>)
 80032fc:	6013      	str	r3, [r2, #0]
			  wait_time += (int8_t)(radio.tpms_rx_msg[4]);
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <main+0x2e4>)
 8003300:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8003304:	b25b      	sxtb	r3, r3
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <main+0x30c>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	4413      	add	r3, r2
 800330e:	b29a      	uxth	r2, r3
 8003310:	4b16      	ldr	r3, [pc, #88]	; (800336c <main+0x30c>)
 8003312:	801a      	strh	r2, [r3, #0]
			  TPMS_sleep(wait_time);
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <main+0x30c>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fc15 	bl	8003b48 <TPMS_sleep>
			  tx_counter = 0;
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <main+0x314>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]

			  while (tx_counter < TRANSMITS)
 8003324:	e086      	b.n	8003434 <main+0x3d4>
 8003326:	bf00      	nop
 8003328:	48000800 	.word	0x48000800
 800332c:	48000400 	.word	0x48000400
 8003330:	200005d8 	.word	0x200005d8
 8003334:	20000030 	.word	0x20000030
 8003338:	2000051c 	.word	0x2000051c
 800333c:	200004ec 	.word	0x200004ec
 8003340:	2000063c 	.word	0x2000063c
 8003344:	20000074 	.word	0x20000074
 8003348:	2000063d 	.word	0x2000063d
 800334c:	20000640 	.word	0x20000640
 8003350:	20000658 	.word	0x20000658
 8003354:	20000659 	.word	0x20000659
 8003358:	200005ac 	.word	0x200005ac
 800335c:	20000650 	.word	0x20000650
 8003360:	20000654 	.word	0x20000654
 8003364:	2000065b 	.word	0x2000065b
 8003368:	20000664 	.word	0x20000664
 800336c:	2000064e 	.word	0x2000064e
 8003370:	20000000 	.word	0x20000000
 8003374:	20000660 	.word	0x20000660
			  {
				  sensor_measure(&pr, TEMP_OSR_256, PRESS_OSR_256); // 10ms
 8003378:	2240      	movs	r2, #64	; 0x40
 800337a:	2150      	movs	r1, #80	; 0x50
 800337c:	487e      	ldr	r0, [pc, #504]	; (8003578 <main+0x518>)
 800337e:	f7fd fc3a 	bl	8000bf6 <sensor_measure>

				  tpms_msg[0] = ID;
 8003382:	4b7e      	ldr	r3, [pc, #504]	; (800357c <main+0x51c>)
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
				  tpms_msg[1] = pr.temperature_reg >> 16;
 8003388:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <main+0x518>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b7a      	ldr	r3, [pc, #488]	; (800357c <main+0x51c>)
 8003392:	705a      	strb	r2, [r3, #1]
				  tpms_msg[2] = pr.temperature_reg >> 8;
 8003394:	4b78      	ldr	r3, [pc, #480]	; (8003578 <main+0x518>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b77      	ldr	r3, [pc, #476]	; (800357c <main+0x51c>)
 800339e:	709a      	strb	r2, [r3, #2]
				  tpms_msg[3] = pr.pressure_reg >> 16;
 80033a0:	4b75      	ldr	r3, [pc, #468]	; (8003578 <main+0x518>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b74      	ldr	r3, [pc, #464]	; (800357c <main+0x51c>)
 80033aa:	70da      	strb	r2, [r3, #3]
				  tpms_msg[4] = pr.pressure_reg >> 8;
 80033ac:	4b72      	ldr	r3, [pc, #456]	; (8003578 <main+0x518>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <main+0x51c>)
 80033b6:	711a      	strb	r2, [r3, #4]

				  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 80033b8:	2200      	movs	r2, #0
 80033ba:	4971      	ldr	r1, [pc, #452]	; (8003580 <main+0x520>)
 80033bc:	4871      	ldr	r0, [pc, #452]	; (8003584 <main+0x524>)
 80033be:	f7fd fd2e 	bl	8000e1e <SX1262SetStandby>

				  HAL_GPIO_WritePin(RF_SWITCH_SUPP_GPIO_Port, RF_SWITCH_SUPP_Pin, GPIO_PIN_SET);
 80033c2:	2201      	movs	r2, #1
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	4870      	ldr	r0, [pc, #448]	; (8003588 <main+0x528>)
 80033c8:	f001 fa6e 	bl	80048a8 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(RF_SWITCH_GPIO_Port, RF_SWITCH_Pin, GPIO_PIN_SET);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d2:	486e      	ldr	r0, [pc, #440]	; (800358c <main+0x52c>)
 80033d4:	f001 fa68 	bl	80048a8 <HAL_GPIO_WritePin>

				  SX1262SendPayload(&mcu, &radio, tpms_msg, radio.packetParams.Params.Gfsk.PayloadLength - 1, 10, false);
 80033d8:	4b69      	ldr	r3, [pc, #420]	; (8003580 <main+0x520>)
 80033da:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80033de:	3b01      	subs	r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2200      	movs	r2, #0
 80033e4:	9201      	str	r2, [sp, #4]
 80033e6:	220a      	movs	r2, #10
 80033e8:	9200      	str	r2, [sp, #0]
 80033ea:	4a64      	ldr	r2, [pc, #400]	; (800357c <main+0x51c>)
 80033ec:	4964      	ldr	r1, [pc, #400]	; (8003580 <main+0x520>)
 80033ee:	4865      	ldr	r0, [pc, #404]	; (8003584 <main+0x524>)
 80033f0:	f7fe fba9 	bl	8001b46 <SX1262SendPayload>

				  HAL_Delay(5);
 80033f4:	2005      	movs	r0, #5
 80033f6:	f000 fe59 	bl	80040ac <HAL_Delay>

				  if(first_wakeup)
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <main+0x530>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11d      	bne.n	800343e <main+0x3de>
					  break;

				  if (tx_counter < TRANSMITS - 1)
 8003402:	4b64      	ldr	r3, [pc, #400]	; (8003594 <main+0x534>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d80e      	bhi.n	8003428 <main+0x3c8>
				  {

					  SX1262SetSleep(&mcu, &radio, sleep);
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	495c      	ldr	r1, [pc, #368]	; (8003580 <main+0x520>)
 800340e:	485d      	ldr	r0, [pc, #372]	; (8003584 <main+0x524>)
 8003410:	f7fe f8a4 	bl	800155c <SX1262SetSleep>

					  TPMS_sleep(sleep_time);
 8003414:	4b60      	ldr	r3, [pc, #384]	; (8003598 <main+0x538>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fb95 	bl	8003b48 <TPMS_sleep>
					  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 800341e:	2200      	movs	r2, #0
 8003420:	4957      	ldr	r1, [pc, #348]	; (8003580 <main+0x520>)
 8003422:	4858      	ldr	r0, [pc, #352]	; (8003584 <main+0x524>)
 8003424:	f7fd fcfb 	bl	8000e1e <SX1262SetStandby>
				  }
				  tx_counter++;
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <main+0x534>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b58      	ldr	r3, [pc, #352]	; (8003594 <main+0x534>)
 8003432:	701a      	strb	r2, [r3, #0]
			  while (tx_counter < TRANSMITS)
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <main+0x534>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b09      	cmp	r3, #9
 800343a:	d99d      	bls.n	8003378 <main+0x318>
 800343c:	e000      	b.n	8003440 <main+0x3e0>
					  break;
 800343e:	bf00      	nop
			  }
	//......................................................................
			  SX1262SetSleep(&mcu, &radio, sleep);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	494f      	ldr	r1, [pc, #316]	; (8003580 <main+0x520>)
 8003444:	484f      	ldr	r0, [pc, #316]	; (8003584 <main+0x524>)
 8003446:	f7fe f889 	bl	800155c <SX1262SetSleep>
			  TPMS_sleep(100);
 800344a:	2064      	movs	r0, #100	; 0x64
 800344c:	f000 fb7c 	bl	8003b48 <TPMS_sleep>
			  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 8003450:	2200      	movs	r2, #0
 8003452:	494b      	ldr	r1, [pc, #300]	; (8003580 <main+0x520>)
 8003454:	484b      	ldr	r0, [pc, #300]	; (8003584 <main+0x524>)
 8003456:	f7fd fce2 	bl	8000e1e <SX1262SetStandby>
 800345a:	e033      	b.n	80034c4 <main+0x464>
	//......................................................................
		  }
		  else if ((radio.tpms_rx_msg[0] >> 4) == CFGR_MSG)
 800345c:	4b48      	ldr	r3, [pc, #288]	; (8003580 <main+0x520>)
 800345e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d12c      	bne.n	80034c4 <main+0x464>
		  {
			  int8_t   target_power     =  radio.tpms_rx_msg[1];
 800346a:	4b45      	ldr	r3, [pc, #276]	; (8003580 <main+0x520>)
 800346c:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
 8003470:	72fb      	strb	r3, [r7, #11]
			  uint16_t target_freqInMHz = (radio.tpms_rx_msg[2] << 8) | radio.tpms_rx_msg[3];
 8003472:	4b43      	ldr	r3, [pc, #268]	; (8003580 <main+0x520>)
 8003474:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	b21a      	sxth	r2, r3
 800347c:	4b40      	ldr	r3, [pc, #256]	; (8003580 <main+0x520>)
 800347e:	f893 33cf 	ldrb.w	r3, [r3, #975]	; 0x3cf
 8003482:	b21b      	sxth	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b21b      	sxth	r3, r3
 8003488:	813b      	strh	r3, [r7, #8]

			  if ((target_power != radio.power) || (target_freqInMHz * 1000000 != radio.rfFrequency))
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <main+0x520>)
 800348c:	f993 33ea 	ldrsb.w	r3, [r3, #1002]	; 0x3ea
 8003490:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8003494:	429a      	cmp	r2, r3
 8003496:	d108      	bne.n	80034aa <main+0x44a>
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	4a40      	ldr	r2, [pc, #256]	; (800359c <main+0x53c>)
 800349c:	fb02 f303 	mul.w	r3, r2, r3
 80034a0:	4a37      	ldr	r2, [pc, #220]	; (8003580 <main+0x520>)
 80034a2:	f8d2 23e4 	ldr.w	r2, [r2, #996]	; 0x3e4
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00c      	beq.n	80034c4 <main+0x464>
			  {
				  SX1262GfskInit(&mcu, &radio, target_power, target_freqInMHz);
 80034aa:	893b      	ldrh	r3, [r7, #8]
 80034ac:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80034b0:	4933      	ldr	r1, [pc, #204]	; (8003580 <main+0x520>)
 80034b2:	4834      	ldr	r0, [pc, #208]	; (8003584 <main+0x524>)
 80034b4:	f7fe fd26 	bl	8001f04 <SX1262GfskInit>
				  active = 0;
 80034b8:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <main+0x540>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
				  active1 = 0;
 80034be:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <main+0x544>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  radio.msg_pending = false;
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <main+0x520>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
		  first_rx = 1;
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <main+0x548>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
	  }

	  if (active)
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <main+0x540>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d040      	beq.n	800355c <main+0x4fc>
	  {
		  if (first_rx)
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <main+0x548>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <main+0x4b2>
		  {
			  if (radio.opMode == SLEEP_MODE)
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <main+0x520>)
 80034e4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d104      	bne.n	80034f6 <main+0x496>
				  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 80034ec:	2200      	movs	r2, #0
 80034ee:	4924      	ldr	r1, [pc, #144]	; (8003580 <main+0x520>)
 80034f0:	4824      	ldr	r0, [pc, #144]	; (8003584 <main+0x524>)
 80034f2:	f7fd fc94 	bl	8000e1e <SX1262SetStandby>
			  SX1262SetRx(&mcu, &radio, 0xFFFF);
 80034f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034fa:	4921      	ldr	r1, [pc, #132]	; (8003580 <main+0x520>)
 80034fc:	4821      	ldr	r0, [pc, #132]	; (8003584 <main+0x524>)
 80034fe:	f7fe f84d 	bl	800159c <SX1262SetRx>

			  wake_rx_tick = HAL_GetTick();
 8003502:	f000 fdc7 	bl	8004094 <HAL_GetTick>
 8003506:	4603      	mov	r3, r0
 8003508:	4a28      	ldr	r2, [pc, #160]	; (80035ac <main+0x54c>)
 800350a:	6013      	str	r3, [r2, #0]

			  first_rx = 0;
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <main+0x548>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
		  }

		  if (!first_rx)
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <main+0x548>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d120      	bne.n	800355c <main+0x4fc>
		  {
			  while(HAL_GetTick() - wake_rx_tick < 500)
 800351a:	e004      	b.n	8003526 <main+0x4c6>
			  {
				  if (radio.msg_pending)
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <main+0x520>)
 800351e:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <main+0x4da>
			  while(HAL_GetTick() - wake_rx_tick < 500)
 8003526:	f000 fdb5 	bl	8004094 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <main+0x54c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003536:	d3f1      	bcc.n	800351c <main+0x4bc>
 8003538:	e000      	b.n	800353c <main+0x4dc>
					  break;
 800353a:	bf00      	nop

			  }
			  if (!radio.msg_pending)
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <main+0x520>)
 800353e:	f893 33c5 	ldrb.w	r3, [r3, #965]	; 0x3c5
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <main+0x4f2>
				  active = 0;
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <main+0x540>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

			  SX1262SetStandby(&mcu, &radio, STDBY_RC);
 8003552:	2200      	movs	r2, #0
 8003554:	490a      	ldr	r1, [pc, #40]	; (8003580 <main+0x520>)
 8003556:	480b      	ldr	r0, [pc, #44]	; (8003584 <main+0x524>)
 8003558:	f7fd fc61 	bl	8000e1e <SX1262SetStandby>
		  }
	  }
	  //reset_test = RESET_TIME;
	  /* Checks if the system has to be reset to its default values */
	  if (rtc_reset_counter > RESET_TIME)
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <main+0x550>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8003564:	d903      	bls.n	800356e <main+0x50e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003566:	b672      	cpsid	i
}
 8003568:	bf00      	nop
	  {
		    __disable_irq();
		    HAL_NVIC_SystemReset();
 800356a:	f000 ff30 	bl	80043ce <HAL_NVIC_SystemReset>
	  }
	  first_wakeup = 0;
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <main+0x530>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	  if (!active)
 8003574:	e5de      	b.n	8003134 <main+0xd4>
 8003576:	bf00      	nop
 8003578:	200004ec 	.word	0x200004ec
 800357c:	20000648 	.word	0x20000648
 8003580:	20000074 	.word	0x20000074
 8003584:	20000030 	.word	0x20000030
 8003588:	48000800 	.word	0x48000800
 800358c:	48000400 	.word	0x48000400
 8003590:	2000065b 	.word	0x2000065b
 8003594:	20000660 	.word	0x20000660
 8003598:	20000000 	.word	0x20000000
 800359c:	000f4240 	.word	0x000f4240
 80035a0:	20000658 	.word	0x20000658
 80035a4:	20000659 	.word	0x20000659
 80035a8:	2000065a 	.word	0x2000065a
 80035ac:	2000065c 	.word	0x2000065c
 80035b0:	20000664 	.word	0x20000664

080035b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b096      	sub	sp, #88	; 0x58
 80035b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	2244      	movs	r2, #68	; 0x44
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fb90 	bl	8007ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c8:	463b      	mov	r3, r7
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80035d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035da:	f002 fc53 	bl	8005e84 <HAL_PWREx_ControlVoltageScaling>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80035e4:	f000 fad4 	bl	8003b90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80035e8:	2318      	movs	r3, #24
 80035ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80035ec:	2301      	movs	r3, #1
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80035f0:	2301      	movs	r3, #1
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 4;
 80035f4:	2304      	movs	r3, #4
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80035f8:	2340      	movs	r3, #64	; 0x40
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fcfb 	bl	8006000 <HAL_RCC_OscConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8003610:	f000 fabe 	bl	8003b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003614:	230f      	movs	r3, #15
 8003616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003618:	2300      	movs	r3, #0
 800361a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003628:	463b      	mov	r3, r7
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f003 f945 	bl	80068bc <HAL_RCC_ClockConfig>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003638:	f000 faaa 	bl	8003b90 <Error_Handler>
  }
}
 800363c:	bf00      	nop
 800363e:	3758      	adds	r7, #88	; 0x58
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <MX_I2C1_Init+0x74>)
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <MX_I2C1_Init+0x78>)
 800364c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000103;
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003650:	f240 1203 	movw	r2, #259	; 0x103
 8003654:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <MX_I2C1_Init+0x74>)
 800365e:	2201      	movs	r2, #1
 8003660:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <MX_I2C1_Init+0x74>)
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <MX_I2C1_Init+0x74>)
 800367c:	2200      	movs	r2, #0
 800367e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003682:	f001 f941 	bl	8004908 <HAL_I2C_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800368c:	f000 fa80 	bl	8003b90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003690:	2100      	movs	r1, #0
 8003692:	4809      	ldr	r0, [pc, #36]	; (80036b8 <MX_I2C1_Init+0x74>)
 8003694:	f001 fe58 	bl	8005348 <HAL_I2CEx_ConfigAnalogFilter>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800369e:	f000 fa77 	bl	8003b90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036a2:	2100      	movs	r1, #0
 80036a4:	4804      	ldr	r0, [pc, #16]	; (80036b8 <MX_I2C1_Init+0x74>)
 80036a6:	f001 fe9a 	bl	80053de <HAL_I2CEx_ConfigDigitalFilter>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80036b0:	f000 fa6e 	bl	8003b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2000051c 	.word	0x2000051c
 80036bc:	40005400 	.word	0x40005400

080036c0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <MX_LPTIM1_Init+0x5c>)
 80036c8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036d2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80036d6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036de:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <MX_LPTIM1_Init+0x58>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <MX_LPTIM1_Init+0x58>)
 8003700:	2200      	movs	r2, #0
 8003702:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003704:	4804      	ldr	r0, [pc, #16]	; (8003718 <MX_LPTIM1_Init+0x58>)
 8003706:	f001 feb7 	bl	8005478 <HAL_LPTIM_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_LPTIM1_Init+0x54>
  {
    Error_Handler();
 8003710:	f000 fa3e 	bl	8003b90 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000570 	.word	0x20000570
 800371c:	40007c00 	.word	0x40007c00

08003720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <MX_RTC_Init+0x68>)
 8003726:	4a19      	ldr	r2, [pc, #100]	; (800378c <MX_RTC_Init+0x6c>)
 8003728:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <MX_RTC_Init+0x68>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <MX_RTC_Init+0x68>)
 8003732:	227f      	movs	r2, #127	; 0x7f
 8003734:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <MX_RTC_Init+0x68>)
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <MX_RTC_Init+0x68>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <MX_RTC_Init+0x68>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <MX_RTC_Init+0x68>)
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <MX_RTC_Init+0x68>)
 8003750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003754:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <MX_RTC_Init+0x68>)
 8003758:	2200      	movs	r2, #0
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800375c:	480a      	ldr	r0, [pc, #40]	; (8003788 <MX_RTC_Init+0x68>)
 800375e:	f003 fc1d 	bl	8006f9c <HAL_RTC_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8003768:	f000 fa12 	bl	8003b90 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 800376c:	2300      	movs	r3, #0
 800376e:	2204      	movs	r2, #4
 8003770:	210a      	movs	r1, #10
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <MX_RTC_Init+0x68>)
 8003774:	f003 fd2e 	bl	80071d4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800377e:	f000 fa07 	bl	8003b90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200005ac 	.word	0x200005ac
 800378c:	40002800 	.word	0x40002800

08003790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <MX_SPI1_Init+0x74>)
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <MX_SPI1_Init+0x78>)
 8003798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800379a:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <MX_SPI1_Init+0x74>)
 800379c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <MX_SPI1_Init+0x74>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <MX_SPI1_Init+0x74>)
 80037aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <MX_SPI1_Init+0x74>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <MX_SPI1_Init+0x74>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_SPI1_Init+0x74>)
 80037be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <MX_SPI1_Init+0x74>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_SPI1_Init+0x74>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <MX_SPI1_Init+0x74>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <MX_SPI1_Init+0x74>)
 80037d8:	2200      	movs	r2, #0
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <MX_SPI1_Init+0x74>)
 80037de:	2207      	movs	r2, #7
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <MX_SPI1_Init+0x74>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <MX_SPI1_Init+0x74>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_SPI1_Init+0x74>)
 80037f0:	f003 fe14 	bl	800741c <HAL_SPI_Init>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80037fa:	f000 f9c9 	bl	8003b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200005d8 	.word	0x200005d8
 8003808:	40013000 	.word	0x40013000

0800380c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	60da      	str	r2, [r3, #12]
 8003820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  HAL_GPIO_WritePin(GPIOB, NRESET_Pin, GPIO_PIN_SET);
 8003822:	2201      	movs	r2, #1
 8003824:	2104      	movs	r1, #4
 8003826:	485a      	ldr	r0, [pc, #360]	; (8003990 <MX_GPIO_Init+0x184>)
 8003828:	f001 f83e 	bl	80048a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, NSS_Pin, GPIO_PIN_SET);
 800382c:	2201      	movs	r2, #1
 800382e:	2110      	movs	r1, #16
 8003830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003834:	f001 f838 	bl	80048a8 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	4b56      	ldr	r3, [pc, #344]	; (8003994 <MX_GPIO_Init+0x188>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	4a55      	ldr	r2, [pc, #340]	; (8003994 <MX_GPIO_Init+0x188>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003844:	4b53      	ldr	r3, [pc, #332]	; (8003994 <MX_GPIO_Init+0x188>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <MX_GPIO_Init+0x188>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <MX_GPIO_Init+0x188>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <MX_GPIO_Init+0x188>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003868:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <MX_GPIO_Init+0x188>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	4a49      	ldr	r2, [pc, #292]	; (8003994 <MX_GPIO_Init+0x188>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <MX_GPIO_Init+0x188>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|NSS_Pin, GPIO_PIN_RESET);
 8003880:	2200      	movs	r2, #0
 8003882:	2114      	movs	r1, #20
 8003884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003888:	f001 f80e 	bl	80048a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, NSS_Pin, GPIO_PIN_SET);
 800388c:	2201      	movs	r2, #1
 800388e:	2110      	movs	r1, #16
 8003890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003894:	f001 f808 	bl	80048a8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRESET_Pin|RF_SWITCH_Pin, GPIO_PIN_RESET);
 8003898:	2200      	movs	r2, #0
 800389a:	f248 0104 	movw	r1, #32772	; 0x8004
 800389e:	483c      	ldr	r0, [pc, #240]	; (8003990 <MX_GPIO_Init+0x184>)
 80038a0:	f001 f802 	bl	80048a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, NRESET_Pin, GPIO_PIN_SET);
 80038a4:	2201      	movs	r2, #1
 80038a6:	2104      	movs	r1, #4
 80038a8:	4839      	ldr	r0, [pc, #228]	; (8003990 <MX_GPIO_Init+0x184>)
 80038aa:	f000 fffd 	bl	80048a8 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_SWITCH_SUPP_Pin|VSENS_Pin, GPIO_PIN_RESET);
 80038ae:	2200      	movs	r2, #0
 80038b0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80038b4:	4838      	ldr	r0, [pc, #224]	; (8003998 <MX_GPIO_Init+0x18c>)
 80038b6:	f000 fff7 	bl	80048a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 80038ba:	2301      	movs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80038be:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80038c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f107 030c 	add.w	r3, r7, #12
 80038cc:	4619      	mov	r1, r3
 80038ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d2:	f000 fd8d 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin NSS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS_Pin;
 80038d6:	2314      	movs	r3, #20
 80038d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038da:	2301      	movs	r3, #1
 80038dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	f107 030c 	add.w	r3, r7, #12
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f0:	f000 fd7e 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin BUSY_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|BUSY_Pin;
 80038f4:	f240 4301 	movw	r3, #1025	; 0x401
 80038f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4619      	mov	r1, r3
 8003908:	4821      	ldr	r0, [pc, #132]	; (8003990 <MX_GPIO_Init+0x184>)
 800390a:	f000 fd71 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRESET_Pin RF_SWITCH_Pin */
  GPIO_InitStruct.Pin = NRESET_Pin|RF_SWITCH_Pin;
 800390e:	f248 0304 	movw	r3, #32772	; 0x8004
 8003912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4619      	mov	r1, r3
 8003926:	481a      	ldr	r0, [pc, #104]	; (8003990 <MX_GPIO_Init+0x184>)
 8003928:	f000 fd62 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 800392c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	4813      	ldr	r0, [pc, #76]	; (8003990 <MX_GPIO_Init+0x184>)
 8003944:	f000 fd54 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_SWITCH_SUPP_Pin VSENS_Pin */
  GPIO_InitStruct.Pin = RF_SWITCH_SUPP_Pin|VSENS_Pin;
 8003948:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800394c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394e:	2301      	movs	r3, #1
 8003950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4619      	mov	r1, r3
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <MX_GPIO_Init+0x18c>)
 8003962:	f000 fd45 	bl	80043f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003966:	2200      	movs	r2, #0
 8003968:	2100      	movs	r1, #0
 800396a:	2006      	movs	r0, #6
 800396c:	f000 fcf7 	bl	800435e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003970:	2006      	movs	r0, #6
 8003972:	f000 fd10 	bl	8004396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	2028      	movs	r0, #40	; 0x28
 800397c:	f000 fcef 	bl	800435e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003980:	2028      	movs	r0, #40	; 0x28
 8003982:	f000 fd08 	bl	8004396 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003986:	bf00      	nop
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	48000400 	.word	0x48000400
 8003994:	40021000 	.word	0x40021000
 8003998:	48000800 	.word	0x48000800

0800399c <DeInitializeTPMS>:

/* USER CODE BEGIN 4 */

void DeInitializeTPMS(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStructure;
	  GPIO_InitTypeDef GPIO_InitStructureA;

	  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80039a2:	2006      	movs	r0, #6
 80039a4:	f000 fd05 	bl	80043b2 <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80039a8:	2028      	movs	r0, #40	; 0x28
 80039aa:	f000 fd02 	bl	80043b2 <HAL_NVIC_DisableIRQ>
	  HAL_SPI_DeInit(&hspi1);
 80039ae:	482a      	ldr	r0, [pc, #168]	; (8003a58 <DeInitializeTPMS+0xbc>)
 80039b0:	f003 fdd7 	bl	8007562 <HAL_SPI_DeInit>
	  __HAL_RCC_SPI1_CLK_DISABLE();
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <DeInitializeTPMS+0xc0>)
 80039b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <DeInitializeTPMS+0xc0>)
 80039ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039be:	6613      	str	r3, [r2, #96]	; 0x60

	  HAL_I2C_DeInit(&hi2c1);
 80039c0:	4827      	ldr	r0, [pc, #156]	; (8003a60 <DeInitializeTPMS+0xc4>)
 80039c2:	f001 f830 	bl	8004a26 <HAL_I2C_DeInit>
	  __HAL_RCC_I2C1_CLK_DISABLE();
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <DeInitializeTPMS+0xc0>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <DeInitializeTPMS+0xc0>)
 80039cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58

	  GPIO_InitStructure.Pin = GPIO_PIN_All;
 80039d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80039d8:	2303      	movs	r3, #3
 80039da:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]

	  GPIO_InitStructureA.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 /*| GPIO_PIN_4*/ | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 /*| GPIO_PIN_13 | GPIO_PIN_14*/ | GPIO_PIN_15;
 80039e0:	f649 73ef 	movw	r3, #40943	; 0x9fef
 80039e4:	603b      	str	r3, [r7, #0]
	  GPIO_InitStructureA.Mode = GPIO_MODE_ANALOG;
 80039e6:	2303      	movs	r3, #3
 80039e8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStructureA.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStructureA);
 80039ee:	463b      	mov	r3, r7
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f6:	f000 fcfb 	bl	80043f0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	4619      	mov	r1, r3
 8003a00:	4818      	ldr	r0, [pc, #96]	; (8003a64 <DeInitializeTPMS+0xc8>)
 8003a02:	f000 fcf5 	bl	80043f0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4816      	ldr	r0, [pc, #88]	; (8003a68 <DeInitializeTPMS+0xcc>)
 8003a0e:	f000 fcef 	bl	80043f0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	4814      	ldr	r0, [pc, #80]	; (8003a6c <DeInitializeTPMS+0xd0>)
 8003a1a:	f000 fce9 	bl	80043f0 <HAL_GPIO_Init>


	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a30:	f023 0302 	bic.w	r3, r3, #2
 8003a34:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	64d3      	str	r3, [r2, #76]	; 0x4c
	  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <DeInitializeTPMS+0xc0>)
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003a4e:	bf00      	nop
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200005d8 	.word	0x200005d8
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	2000051c 	.word	0x2000051c
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48001c00 	.word	0x48001c00

08003a70 <InitializeTPMS>:


void InitializeTPMS(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4a30      	ldr	r2, [pc, #192]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9a:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <InitializeTPMS+0xcc>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa6:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <InitializeTPMS+0xcc>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <InitializeTPMS+0xcc>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <InitializeTPMS+0xcc>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <InitializeTPMS+0xcc>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <InitializeTPMS+0xcc>)
 8003ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <InitializeTPMS+0xcc>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_SPI1_CLK_ENABLE();
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <InitializeTPMS+0xcc>)
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <InitializeTPMS+0xcc>)
 8003adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <InitializeTPMS+0xcc>)
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <InitializeTPMS+0xcc>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <InitializeTPMS+0xcc>)
 8003af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003af8:	6593      	str	r3, [r2, #88]	; 0x58
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <InitializeTPMS+0xcc>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init();
 8003b06:	f7ff fe81 	bl	800380c <MX_GPIO_Init>
	MX_I2C1_Init();
 8003b0a:	f7ff fd9b 	bl	8003644 <MX_I2C1_Init>
	MX_SPI1_Init();
 8003b0e:	f7ff fe3f 	bl	8003790 <MX_SPI1_Init>

	__HAL_SPI_ENABLE(&hspi1);
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <InitializeTPMS+0xd0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <InitializeTPMS+0xd0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b20:	601a      	str	r2, [r3, #0]
	__HAL_I2C_ENABLE(&hi2c1);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <InitializeTPMS+0xd4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <InitializeTPMS+0xd4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	200005d8 	.word	0x200005d8
 8003b44:	2000051c 	.word	0x2000051c

08003b48 <TPMS_sleep>:


void TPMS_sleep(uint32_t period_ms)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	//---------------------------------------------------------//deinit i2c/spi

	DeInitializeTPMS();
 8003b50:	f7ff ff24 	bl	800399c <DeInitializeTPMS>

	//---------------------------------------------------------// STOP2

	HAL_SuspendTick();
 8003b54:	f000 face 	bl	80040f4 <HAL_SuspendTick>

	HAL_LPTIM_Counter_Start(&hlptim1, period_ms);
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	480c      	ldr	r0, [pc, #48]	; (8003b8c <TPMS_sleep+0x44>)
 8003b5c:	f001 fe14 	bl	8005788 <HAL_LPTIM_Counter_Start>
	HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 1, period_ms);
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2101      	movs	r1, #1
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <TPMS_sleep+0x44>)
 8003b66:	f001 fd4f 	bl	8005608 <HAL_LPTIM_TimeOut_Start_IT>

	//HAL_PWR_EnterSTANDBYMode();
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f002 fa1c 	bl	8005fa8 <HAL_PWREx_EnterSTOP2Mode>


	HAL_LPTIM_Counter_Stop(&hlptim1);
 8003b70:	4806      	ldr	r0, [pc, #24]	; (8003b8c <TPMS_sleep+0x44>)
 8003b72:	f001 fe4d 	bl	8005810 <HAL_LPTIM_Counter_Stop>


	HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <TPMS_sleep+0x44>)
 8003b78:	f001 fdc4 	bl	8005704 <HAL_LPTIM_TimeOut_Stop_IT>
	HAL_ResumeTick();
 8003b7c:	f000 faca 	bl	8004114 <HAL_ResumeTick>

	//---------------------------------------------------------//init i2c/spi

	InitializeTPMS();
 8003b80:	f7ff ff76 	bl	8003a70 <InitializeTPMS>

	//---------------------------------------------------------//
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000570 	.word	0x20000570

08003b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b94:	b672      	cpsid	i
}
 8003b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <Error_Handler+0x8>
	...

08003b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_MspInit+0x60>)
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <HAL_MspInit+0x60>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_MspInit+0x60>)
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_MspInit+0x60>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_MspInit+0x60>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_MspInit+0x60>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_5;
 8003bdc:	230a      	movs	r3, #10
 8003bde:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003be4:	f107 0308 	add.w	r3, r7, #8
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 f8b5 	bl	8005d58 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003bee:	f002 f913 	bl	8005e18 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b096      	sub	sp, #88	; 0x58
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c18:	f107 0310 	add.w	r3, r7, #16
 8003c1c:	2234      	movs	r2, #52	; 0x34
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 f861 	bl	8007ce8 <memset>
  if(hi2c->Instance==I2C1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_I2C_MspInit+0xac>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d138      	bne.n	8003ca2 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c30:	2340      	movs	r3, #64	; 0x40
 8003c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c3a:	f107 0310 	add.w	r3, r7, #16
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 f828 	bl	8006c94 <HAL_RCCEx_PeriphCLKConfig>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c4a:	f7ff ffa1 	bl	8003b90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c6c:	2312      	movs	r3, #18
 8003c6e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c74:	2303      	movs	r3, #3
 8003c76:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c78:	2304      	movs	r3, #4
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c80:	4619      	mov	r1, r3
 8003c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c86:	f000 fbb3 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	4a08      	ldr	r2, [pc, #32]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c94:	6593      	str	r3, [r2, #88]	; 0x58
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_I2C_MspInit+0xb0>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ca2:	bf00      	nop
 8003ca4:	3758      	adds	r7, #88	; 0x58
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40005400 	.word	0x40005400
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <HAL_I2C_MspDeInit+0x40>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_I2C_MspDeInit+0x44>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_I2C_MspDeInit+0x44>)
 8003ccc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCL_GPIO_Port, SCL_Pin);
 8003cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cda:	f000 fcfb 	bl	80046d4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDA_GPIO_Port, SDA_Pin);
 8003cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce6:	f000 fcf5 	bl	80046d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40005400 	.word	0x40005400
 8003cf8:	40021000 	.word	0x40021000

08003cfc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b090      	sub	sp, #64	; 0x40
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	2234      	movs	r2, #52	; 0x34
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f003 ffeb 	bl	8007ce8 <memset>
  if(hlptim->Instance==LPTIM1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_LPTIM_MspInit+0x70>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d123      	bne.n	8003d64 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d20:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8003d22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 ffb1 	bl	8006c94 <HAL_RCCEx_PeriphCLKConfig>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8003d38:	f7ff ff2a 	bl	8003b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_LPTIM_MspInit+0x74>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_LPTIM_MspInit+0x74>)
 8003d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_LPTIM_MspInit+0x74>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2100      	movs	r1, #0
 8003d58:	2041      	movs	r0, #65	; 0x41
 8003d5a:	f000 fb00 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003d5e:	2041      	movs	r0, #65	; 0x41
 8003d60:	f000 fb19 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003d64:	bf00      	nop
 8003d66:	3740      	adds	r7, #64	; 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40007c00 	.word	0x40007c00
 8003d70:	40021000 	.word	0x40021000

08003d74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b090      	sub	sp, #64	; 0x40
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	2234      	movs	r2, #52	; 0x34
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 ffaf 	bl	8007ce8 <memset>
  if(hrtc->Instance==RTC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_RTC_MspInit+0x68>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d11f      	bne.n	8003dd4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 ff75 	bl	8006c94 <HAL_RCCEx_PeriphCLKConfig>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003db0:	f7ff feee 	bl	8003b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_RTC_MspInit+0x6c>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RTC_MspInit+0x6c>)
 8003dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2003      	movs	r0, #3
 8003dca:	f000 fac8 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003dce:	2003      	movs	r0, #3
 8003dd0:	f000 fae1 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003dd4:	bf00      	nop
 8003dd6:	3740      	adds	r7, #64	; 0x40
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40002800 	.word	0x40002800
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_SPI_MspInit+0x7c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d128      	bne.n	8003e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e10:	6613      	str	r3, [r2, #96]	; 0x60
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <HAL_SPI_MspInit+0x80>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8003e36:	23c2      	movs	r3, #194	; 0xc2
 8003e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e42:	2303      	movs	r3, #3
 8003e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e46:	2305      	movs	r3, #5
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e54:	f000 facc 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e58:	bf00      	nop
 8003e5a:	3728      	adds	r7, #40	; 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40013000 	.word	0x40013000
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_SPI_MspDeInit+0x30>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10a      	bne.n	8003e90 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_SPI_MspDeInit+0x34>)
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_SPI_MspDeInit+0x34>)
 8003e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e84:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SCK_Pin|MISO_Pin|MOSI_Pin);
 8003e86:	21c2      	movs	r1, #194	; 0xc2
 8003e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e8c:	f000 fc22 	bl	80046d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40013000 	.word	0x40013000
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <NMI_Handler+0x4>

08003ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eaa:	e7fe      	b.n	8003eaa <HardFault_Handler+0x4>

08003eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <MemManage_Handler+0x4>

08003eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eb6:	e7fe      	b.n	8003eb6 <BusFault_Handler+0x4>

08003eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ebc:	e7fe      	b.n	8003ebc <UsageFault_Handler+0x4>

08003ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eec:	f000 f8be 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <RTC_WKUP_IRQHandler+0x10>)
 8003efa:	f003 fa65 	bl	80073c8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200005ac 	.word	0x200005ac

08003f08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO2_Pin);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 fce3 	bl	80048d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8003f1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f1e:	f000 fcdb 	bl	80048d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <LPTIM1_IRQHandler+0x10>)
 8003f2e:	f001 fc8b 	bl	8005848 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000570 	.word	0x20000570

08003f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <SystemInit+0x20>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <SystemInit+0x20>)
 8003f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <Reset_Handler>:
 8003f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f98 <LoopForever+0x2>
 8003f64:	f7ff ffea 	bl	8003f3c <SystemInit>
 8003f68:	480c      	ldr	r0, [pc, #48]	; (8003f9c <LoopForever+0x6>)
 8003f6a:	490d      	ldr	r1, [pc, #52]	; (8003fa0 <LoopForever+0xa>)
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <LoopForever+0xe>)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e002      	b.n	8003f78 <LoopCopyDataInit>

08003f72 <CopyDataInit>:
 8003f72:	58d4      	ldr	r4, [r2, r3]
 8003f74:	50c4      	str	r4, [r0, r3]
 8003f76:	3304      	adds	r3, #4

08003f78 <LoopCopyDataInit>:
 8003f78:	18c4      	adds	r4, r0, r3
 8003f7a:	428c      	cmp	r4, r1
 8003f7c:	d3f9      	bcc.n	8003f72 <CopyDataInit>
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <LoopForever+0x12>)
 8003f80:	4c0a      	ldr	r4, [pc, #40]	; (8003fac <LoopForever+0x16>)
 8003f82:	2300      	movs	r3, #0
 8003f84:	e001      	b.n	8003f8a <LoopFillZerobss>

08003f86 <FillZerobss>:
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	3204      	adds	r2, #4

08003f8a <LoopFillZerobss>:
 8003f8a:	42a2      	cmp	r2, r4
 8003f8c:	d3fb      	bcc.n	8003f86 <FillZerobss>
 8003f8e:	f003 fe87 	bl	8007ca0 <__libc_init_array>
 8003f92:	f7ff f865 	bl	8003060 <main>

08003f96 <LoopForever>:
 8003f96:	e7fe      	b.n	8003f96 <LoopForever>
 8003f98:	2000a000 	.word	0x2000a000
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000010 	.word	0x20000010
 8003fa4:	08007d78 	.word	0x08007d78
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	2000066c 	.word	0x2000066c

08003fb0 <ADC1_2_IRQHandler>:
 8003fb0:	e7fe      	b.n	8003fb0 <ADC1_2_IRQHandler>
	...

08003fb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <HAL_Init+0x3c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a0b      	ldr	r2, [pc, #44]	; (8003ff0 <HAL_Init+0x3c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fca:	2003      	movs	r0, #3
 8003fcc:	f000 f9bc 	bl	8004348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd0:	200f      	movs	r0, #15
 8003fd2:	f000 f80f 	bl	8003ff4 <HAL_InitTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	e001      	b.n	8003fe6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fe2:	f7ff fddb 	bl	8003b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_InitTick+0x6c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d023      	beq.n	8004050 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_InitTick+0x70>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_InitTick+0x6c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4619      	mov	r1, r3
 8004012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004016:	fbb3 f3f1 	udiv	r3, r3, r1
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f9d9 	bl	80043d6 <HAL_SYSTICK_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d809      	bhi.n	8004044 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004030:	2200      	movs	r2, #0
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	f000 f991 	bl	800435e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800403c:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_InitTick+0x74>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e007      	b.n	8004054 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e004      	b.n	8004054 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e001      	b.n	8004054 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000000c 	.word	0x2000000c
 8004064:	20000004 	.word	0x20000004
 8004068:	20000008 	.word	0x20000008

0800406c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_IncTick+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_IncTick+0x24>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_IncTick+0x24>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	2000000c 	.word	0x2000000c
 8004090:	20000668 	.word	0x20000668

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000668 	.word	0x20000668

080040ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff ffee 	bl	8004094 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d005      	beq.n	80040d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_Delay+0x44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d2:	bf00      	nop
 80040d4:	f7ff ffde 	bl	8004094 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f7      	bhi.n	80040d4 <HAL_Delay+0x28>
  {
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c

080040f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_SuspendTick+0x1c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_SuspendTick+0x1c>)
 80040fe:	f023 0302 	bic.w	r3, r3, #2
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010

08004114 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_ResumeTick+0x1c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_ResumeTick+0x1c>)
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	e000e010 	.word	0xe000e010

08004134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <__NVIC_SetPriorityGrouping+0x44>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004150:	4013      	ands	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800415c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <__NVIC_SetPriorityGrouping+0x44>)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	60d3      	str	r3, [r2, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <__NVIC_GetPriorityGrouping+0x18>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 0307 	and.w	r3, r3, #7
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db0b      	blt.n	80041c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	4907      	ldr	r1, [pc, #28]	; (80041d0 <__NVIC_EnableIRQ+0x38>)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2001      	movs	r0, #1
 80041ba:	fa00 f202 	lsl.w	r2, r0, r2
 80041be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db12      	blt.n	800420c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	490a      	ldr	r1, [pc, #40]	; (8004218 <__NVIC_DisableIRQ+0x44>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2001      	movs	r0, #1
 80041f6:	fa00 f202 	lsl.w	r2, r0, r2
 80041fa:	3320      	adds	r3, #32
 80041fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004200:	f3bf 8f4f 	dsb	sy
}
 8004204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004206:	f3bf 8f6f 	isb	sy
}
 800420a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
         );
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80042dc:	f3bf 8f4f 	dsb	sy
}
 80042e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <__NVIC_SystemReset+0x24>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80042ea:	4904      	ldr	r1, [pc, #16]	; (80042fc <__NVIC_SystemReset+0x24>)
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <__NVIC_SystemReset+0x28>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042f2:	f3bf 8f4f 	dsb	sy
}
 80042f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <__NVIC_SystemReset+0x20>
 80042fc:	e000ed00 	.word	0xe000ed00
 8004300:	05fa0004 	.word	0x05fa0004

08004304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004314:	d301      	bcc.n	800431a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004316:	2301      	movs	r3, #1
 8004318:	e00f      	b.n	800433a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <SysTick_Config+0x40>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004322:	210f      	movs	r1, #15
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	f7ff ff78 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <SysTick_Config+0x40>)
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SysTick_Config+0x40>)
 8004334:	2207      	movs	r2, #7
 8004336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	e000e010 	.word	0xe000e010

08004348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff feef 	bl	8004134 <__NVIC_SetPriorityGrouping>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004370:	f7ff ff04 	bl	800417c <__NVIC_GetPriorityGrouping>
 8004374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff78 	bl	8004270 <NVIC_EncodePriority>
 8004380:	4602      	mov	r2, r0
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff47 	bl	800421c <__NVIC_SetPriority>
}
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fef7 	bl	8004198 <__NVIC_EnableIRQ>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff07 	bl	80041d4 <__NVIC_DisableIRQ>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043d2:	f7ff ff81 	bl	80042d8 <__NVIC_SystemReset>

080043d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff ff90 	bl	8004304 <SysTick_Config>
 80043e4:	4603      	mov	r3, r0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	e14e      	b.n	800469e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8140 	beq.w	8004698 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d005      	beq.n	8004430 <HAL_GPIO_Init+0x40>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d130      	bne.n	8004492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004466:	2201      	movs	r2, #1
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0201 	and.w	r2, r3, #1
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b03      	cmp	r3, #3
 800449c:	d017      	beq.n	80044ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	2203      	movs	r2, #3
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d123      	bne.n	8004522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	08da      	lsrs	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3208      	adds	r2, #8
 80044e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	220f      	movs	r2, #15
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	08da      	lsrs	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3208      	adds	r2, #8
 800451c:	6939      	ldr	r1, [r7, #16]
 800451e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0203 	and.w	r2, r3, #3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 809a 	beq.w	8004698 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_GPIO_Init+0x2cc>)
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	4a54      	ldr	r2, [pc, #336]	; (80046bc <HAL_GPIO_Init+0x2cc>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6613      	str	r3, [r2, #96]	; 0x60
 8004570:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_GPIO_Init+0x2cc>)
 8004572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800457c:	4a50      	ldr	r2, [pc, #320]	; (80046c0 <HAL_GPIO_Init+0x2d0>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045a6:	d013      	beq.n	80045d0 <HAL_GPIO_Init+0x1e0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <HAL_GPIO_Init+0x2d4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00d      	beq.n	80045cc <HAL_GPIO_Init+0x1dc>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <HAL_GPIO_Init+0x2d8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <HAL_GPIO_Init+0x1d8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a44      	ldr	r2, [pc, #272]	; (80046cc <HAL_GPIO_Init+0x2dc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_GPIO_Init+0x1d4>
 80045c0:	2303      	movs	r3, #3
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x1e2>
 80045c4:	2307      	movs	r3, #7
 80045c6:	e004      	b.n	80045d2 <HAL_GPIO_Init+0x1e2>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e002      	b.n	80045d2 <HAL_GPIO_Init+0x1e2>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_GPIO_Init+0x1e2>
 80045d0:	2300      	movs	r3, #0
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	4093      	lsls	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045e2:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_GPIO_Init+0x2d0>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f0:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004614:	4a2e      	ldr	r2, [pc, #184]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800461a:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004644:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004692:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_GPIO_Init+0x2e0>)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f aea9 	bne.w	8004400 <HAL_GPIO_Init+0x10>
  }
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40010000 	.word	0x40010000
 80046c4:	48000400 	.word	0x48000400
 80046c8:	48000800 	.word	0x48000800
 80046cc:	48000c00 	.word	0x48000c00
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046e2:	e0b1      	b.n	8004848 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046e4:	2201      	movs	r2, #1
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a4 	beq.w	8004842 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80046fa:	4a5a      	ldr	r2, [pc, #360]	; (8004864 <HAL_GPIO_DeInit+0x190>)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004706:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	220f      	movs	r2, #15
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004722:	d013      	beq.n	800474c <HAL_GPIO_DeInit+0x78>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a50      	ldr	r2, [pc, #320]	; (8004868 <HAL_GPIO_DeInit+0x194>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00d      	beq.n	8004748 <HAL_GPIO_DeInit+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a4f      	ldr	r2, [pc, #316]	; (800486c <HAL_GPIO_DeInit+0x198>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <HAL_GPIO_DeInit+0x70>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <HAL_GPIO_DeInit+0x19c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <HAL_GPIO_DeInit+0x6c>
 800473c:	2303      	movs	r3, #3
 800473e:	e006      	b.n	800474e <HAL_GPIO_DeInit+0x7a>
 8004740:	2307      	movs	r3, #7
 8004742:	e004      	b.n	800474e <HAL_GPIO_DeInit+0x7a>
 8004744:	2302      	movs	r3, #2
 8004746:	e002      	b.n	800474e <HAL_GPIO_DeInit+0x7a>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_GPIO_DeInit+0x7a>
 800474c:	2300      	movs	r3, #0
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	f002 0203 	and.w	r2, r2, #3
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	4093      	lsls	r3, r2
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d132      	bne.n	80047c4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800475e:	4b45      	ldr	r3, [pc, #276]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	4943      	ldr	r1, [pc, #268]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 8004768:	4013      	ands	r3, r2
 800476a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	493f      	ldr	r1, [pc, #252]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 8004776:	4013      	ands	r3, r2
 8004778:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	493c      	ldr	r1, [pc, #240]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 8004784:	4013      	ands	r3, r2
 8004786:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004788:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	43db      	mvns	r3, r3
 8004790:	4938      	ldr	r1, [pc, #224]	; (8004874 <HAL_GPIO_DeInit+0x1a0>)
 8004792:	4013      	ands	r3, r2
 8004794:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80047a6:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <HAL_GPIO_DeInit+0x190>)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43da      	mvns	r2, r3
 80047b6:	482b      	ldr	r0, [pc, #172]	; (8004864 <HAL_GPIO_DeInit+0x190>)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	400a      	ands	r2, r1
 80047be:	3302      	adds	r3, #2
 80047c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2103      	movs	r1, #3
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3208      	adds	r2, #8
 80047e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	08d2      	lsrs	r2, r2, #3
 80047f8:	4019      	ands	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	2101      	movs	r1, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2103      	movs	r1, #3
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	401a      	ands	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af47 	bne.w	80046e4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40010000 	.word	0x40010000
 8004868:	48000400 	.word	0x48000400
 800486c:	48000800 	.word	0x48000800
 8004870:	48000c00 	.word	0x48000c00
 8004874:	40010400 	.word	0x40010400

08004878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	e001      	b.n	800489a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
 80048b4:	4613      	mov	r3, r2
 80048b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b8:	787b      	ldrb	r3, [r7, #1]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d006      	beq.n	80048fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ee:	4a05      	ldr	r2, [pc, #20]	; (8004904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fb92 	bl	8003020 <HAL_GPIO_EXTI_Callback>
  }
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40010400 	.word	0x40010400

08004908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e081      	b.n	8004a1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff f966 	bl	8003c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	; 0x24
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d107      	bne.n	8004982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	e006      	b.n	8004990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800498e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d104      	bne.n	80049a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e021      	b.n	8004a7c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff f92f 	bl	8003cb4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
 8004a94:	4613      	mov	r3, r2
 8004a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	f040 80da 	bne.w	8004c5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2C_Master_Transmit+0x30>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0d3      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004abc:	f7ff faea 	bl	8004094 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2319      	movs	r3, #25
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f9e6 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0be      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2221      	movs	r2, #33	; 0x21
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2210      	movs	r2, #16
 8004aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	893a      	ldrh	r2, [r7, #8]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2bff      	cmp	r3, #255	; 0xff
 8004b0e:	d90e      	bls.n	8004b2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	22ff      	movs	r2, #255	; 0xff
 8004b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	8979      	ldrh	r1, [r7, #10]
 8004b1e:	4b51      	ldr	r3, [pc, #324]	; (8004c64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fbdc 	bl	80052e4 <I2C_TransferConfig>
 8004b2c:	e06c      	b.n	8004c08 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	8979      	ldrh	r1, [r7, #10]
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fbcb 	bl	80052e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b4e:	e05b      	b.n	8004c08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	6a39      	ldr	r1, [r7, #32]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f9e3 	bl	8004f20 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e07b      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d034      	beq.n	8004c08 <HAL_I2C_Master_Transmit+0x184>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d130      	bne.n	8004c08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f975 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04d      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2bff      	cmp	r3, #255	; 0xff
 8004bc8:	d90e      	bls.n	8004be8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fb7f 	bl	80052e4 <I2C_TransferConfig>
 8004be6:	e00f      	b.n	8004c08 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	8979      	ldrh	r1, [r7, #10]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fb6e 	bl	80052e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d19e      	bne.n	8004b50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	6a39      	ldr	r1, [r7, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f9c2 	bl	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e01a      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_I2C_Master_Transmit+0x1e4>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	80002000 	.word	0x80002000
 8004c68:	fe00e800 	.word	0xfe00e800

08004c6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	461a      	mov	r2, r3
 8004c78:	460b      	mov	r3, r1
 8004c7a:	817b      	strh	r3, [r7, #10]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	f040 80db 	bne.w	8004e44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_I2C_Master_Receive+0x30>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0d4      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ca4:	f7ff f9f6 	bl	8004094 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2319      	movs	r3, #25
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f8f2 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0bf      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2222      	movs	r2, #34	; 0x22
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	893a      	ldrh	r2, [r7, #8]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2bff      	cmp	r3, #255	; 0xff
 8004cf6:	d90e      	bls.n	8004d16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	22ff      	movs	r2, #255	; 0xff
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	8979      	ldrh	r1, [r7, #10]
 8004d06:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <HAL_I2C_Master_Receive+0x1e4>)
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fae8 	bl	80052e4 <I2C_TransferConfig>
 8004d14:	e06d      	b.n	8004df2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	8979      	ldrh	r1, [r7, #10]
 8004d28:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <HAL_I2C_Master_Receive+0x1e4>)
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fad7 	bl	80052e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d36:	e05c      	b.n	8004df2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	6a39      	ldr	r1, [r7, #32]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f96b 	bl	8005018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e07c      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d034      	beq.n	8004df2 <HAL_I2C_Master_Receive+0x186>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d130      	bne.n	8004df2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f880 	bl	8004ea0 <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e04d      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2bff      	cmp	r3, #255	; 0xff
 8004db2:	d90e      	bls.n	8004dd2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	22ff      	movs	r2, #255	; 0xff
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	8979      	ldrh	r1, [r7, #10]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fa8a 	bl	80052e4 <I2C_TransferConfig>
 8004dd0:	e00f      	b.n	8004df2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	8979      	ldrh	r1, [r7, #10]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa79 	bl	80052e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d19d      	bne.n	8004d38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	6a39      	ldr	r1, [r7, #32]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f8cd 	bl	8004fa0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e01a      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2220      	movs	r2, #32
 8004e16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_I2C_Master_Receive+0x1e8>)
 8004e24:	400b      	ands	r3, r1
 8004e26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	80002400 	.word	0x80002400
 8004e54:	fe00e800 	.word	0xfe00e800

08004e58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d103      	bne.n	8004e76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d007      	beq.n	8004e94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	619a      	str	r2, [r3, #24]
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb0:	e022      	b.n	8004ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d01e      	beq.n	8004ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7ff f8eb 	bl	8004094 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d113      	bne.n	8004ef8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e00f      	b.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	4013      	ands	r3, r2
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d0cd      	beq.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f2c:	e02c      	b.n	8004f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f8ea 	bl	800510c <I2C_IsErrorOccurred>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02a      	b.n	8004f98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d01e      	beq.n	8004f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7ff f8a3 	bl	8004094 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d113      	bne.n	8004f88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e007      	b.n	8004f98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d1cb      	bne.n	8004f2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fac:	e028      	b.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f8aa 	bl	800510c <I2C_IsErrorOccurred>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e026      	b.n	8005010 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc2:	f7ff f867 	bl	8004094 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d113      	bne.n	8005000 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d1cf      	bne.n	8004fae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005024:	e064      	b.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f86e 	bl	800510c <I2C_IsErrorOccurred>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e062      	b.n	8005100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d138      	bne.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d105      	bne.n	8005062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e04e      	b.n	8005100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d107      	bne.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2204      	movs	r2, #4
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
 800507e:	e002      	b.n	8005086 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2220      	movs	r2, #32
 800508c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800509a:	400b      	ands	r3, r1
 800509c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e022      	b.n	8005100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe ffeb 	bl	8004094 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10f      	bne.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e007      	b.n	8005100 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d193      	bne.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	fe00e800 	.word	0xfe00e800

0800510c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d075      	beq.n	8005224 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2210      	movs	r2, #16
 800513e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005140:	e056      	b.n	80051f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d052      	beq.n	80051f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800514a:	f7fe ffa3 	bl	8004094 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <I2C_IsErrorOccurred+0x54>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d147      	bne.n	80051f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005172:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d12e      	bne.n	80051e2 <I2C_IsErrorOccurred+0xd6>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d02a      	beq.n	80051e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	2b20      	cmp	r3, #32
 8005190:	d027      	beq.n	80051e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051a2:	f7fe ff77 	bl	8004094 <HAL_GetTick>
 80051a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a8:	e01b      	b.n	80051e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051aa:	f7fe ff73 	bl	8004094 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b19      	cmp	r3, #25
 80051b6:	d914      	bls.n	80051e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d1dc      	bne.n	80051aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d003      	beq.n	8005206 <I2C_IsErrorOccurred+0xfa>
 80051fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005202:	2b00      	cmp	r3, #0
 8005204:	d09d      	beq.n	8005142 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2220      	movs	r2, #32
 8005214:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005246:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f043 0308 	orr.w	r3, r3, #8
 800525e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005268:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f043 0302 	orr.w	r3, r3, #2
 8005280:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01c      	beq.n	80052d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff fddc 	bl	8004e58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <I2C_IsErrorOccurred+0x1d4>)
 80052ac:	400b      	ands	r3, r1
 80052ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	fe00e800 	.word	0xfe00e800

080052e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	607b      	str	r3, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	817b      	strh	r3, [r7, #10]
 80052f2:	4613      	mov	r3, r2
 80052f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f6:	897b      	ldrh	r3, [r7, #10]
 80052f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052fc:	7a7b      	ldrb	r3, [r7, #9]
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005304:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	4313      	orrs	r3, r2
 800530e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005312:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	0d5b      	lsrs	r3, r3, #21
 800531e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <I2C_TransferConfig+0x60>)
 8005324:	430b      	orrs	r3, r1
 8005326:	43db      	mvns	r3, r3
 8005328:	ea02 0103 	and.w	r1, r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	03ff63ff 	.word	0x03ff63ff

08005348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b20      	cmp	r3, #32
 800535c:	d138      	bne.n	80053d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005368:	2302      	movs	r3, #2
 800536a:	e032      	b.n	80053d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2224      	movs	r2, #36	; 0x24
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800539a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d139      	bne.n	8005468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053fe:	2302      	movs	r3, #2
 8005400:	e033      	b.n	800546a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2224      	movs	r2, #36	; 0x24
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	e000      	b.n	800546a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005468:	2302      	movs	r3, #2
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0b6      	b.n	80055f8 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7fe fc29 	bl	8003cfc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if defined(LPTIM_RCR_REP)

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ca:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 80054d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fae4 	bl	8005aa8 <LPTIM_WaitForFlag>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d101      	bne.n	80054ea <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e086      	b.n	80055f8 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fb0c 	bl	8005b08 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 facb 	bl	8005a8c <HAL_LPTIM_GetState>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d101      	bne.n	8005500 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e07b      	b.n	80055f8 <HAL_LPTIM_Init+0x180>
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d004      	beq.n	800551a <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005518:	d103      	bne.n	8005522 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f023 031e 	bic.w	r3, r3, #30
 8005520:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800552a:	4293      	cmp	r3, r2
 800552c:	d005      	beq.n	800553a <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005538:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_LPTIM_Init+0x188>)
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800554a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005550:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005556:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800555c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005574:	4313      	orrs	r3, r2
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d004      	beq.n	800558e <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800558c:	d107      	bne.n	800559e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005596:	4313      	orrs	r3, r2
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00a      	beq.n	80055c0 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80055b2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80055b8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <HAL_LPTIM_Init+0x18c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	621a      	str	r2, [r3, #32]
 80055e2:	e004      	b.n	80055ee <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055ec:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	ff19f1fe 	.word	0xff19f1fe
 8005604:	40007c00 	.word	0x40007c00

08005608 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a36      	ldr	r2, [pc, #216]	; (80056fc <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d106      	bne.n	8005634 <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a35      	ldr	r2, [pc, #212]	; (8005700 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6213      	str	r3, [r2, #32]
 8005632:	e005      	b.n	8005640 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 8005634:	4b32      	ldr	r3, [pc, #200]	; (8005700 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	4a31      	ldr	r2, [pc, #196]	; (8005700 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 800563a:	f043 0302 	orr.w	r3, r3, #2
 800563e:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800564e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2210      	movs	r2, #16
 8005666:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005670:	2110      	movs	r1, #16
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fa18 	bl	8005aa8 <LPTIM_WaitForFlag>
 8005678:	4603      	mov	r3, r0
 800567a:	2b03      	cmp	r3, #3
 800567c:	d101      	bne.n	8005682 <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e038      	b.n	80056f4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2208      	movs	r2, #8
 8005688:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005692:	2108      	movs	r1, #8
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fa07 	bl	8005aa8 <LPTIM_WaitForFlag>
 800569a:	4603      	mov	r3, r0
 800569c:	2b03      	cmp	r3, #3
 800569e:	d101      	bne.n	80056a4 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e027      	b.n	80056f4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fa2f 	bl	8005b08 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f9ee 	bl	8005a8c <HAL_LPTIM_GetState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d101      	bne.n	80056ba <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e01c      	b.n	80056f4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0204 	orr.w	r2, r2, #4
 80056e8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40007c00 	.word	0x40007c00
 8005700:	40010400 	.word	0x40010400

08005704 <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_LPTIM_TimeOut_Stop_IT+0x7c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d106      	bne.n	8005724 <HAL_LPTIM_TimeOut_Stop_IT+0x20>
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	6213      	str	r3, [r2, #32]
 8005722:	e005      	b.n	8005730 <HAL_LPTIM_TimeOut_Stop_IT+0x2c>
 8005724:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <HAL_LPTIM_TimeOut_Stop_IT+0x80>)
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9e5 	bl	8005b08 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f9a4 	bl	8005a8c <HAL_LPTIM_GetState>
 8005744:	4603      	mov	r3, r0
 8005746:	2b03      	cmp	r3, #3
 8005748:	d101      	bne.n	800574e <HAL_LPTIM_TimeOut_Stop_IT+0x4a>
  {
    return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e014      	b.n	8005778 <HAL_LPTIM_TimeOut_Stop_IT+0x74>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800575c:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	609a      	str	r2, [r3, #8]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40007c00 	.word	0x40007c00
 8005784:	40010400 	.word	0x40010400

08005788 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d00c      	beq.n	80057bc <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057aa:	d107      	bne.n	80057bc <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80057ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2210      	movs	r2, #16
 80057d2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80057dc:	2110      	movs	r1, #16
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f962 	bl	8005aa8 <LPTIM_WaitForFlag>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d101      	bne.n	80057ee <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e00c      	b.n	8005808 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0204 	orr.w	r2, r2, #4
 80057fc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f971 	bl	8005b08 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f930 	bl	8005a8c <HAL_LPTIM_GetState>
 800582c:	4603      	mov	r3, r0
 800582e:	2b03      	cmp	r3, #3
 8005830:	d101      	bne.n	8005836 <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e004      	b.n	8005840 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10d      	bne.n	800587a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8af 	bl	80059d8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d10d      	bne.n	80058a4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d106      	bne.n	80058a4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2202      	movs	r2, #2
 800589c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8a4 	bl	80059ec <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d10d      	bne.n	80058ce <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d106      	bne.n	80058ce <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2204      	movs	r2, #4
 80058c6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f899 	bl	8005a00 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10d      	bne.n	80058f8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d106      	bne.n	80058f8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2208      	movs	r2, #8
 80058f0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f88e 	bl	8005a14 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b10      	cmp	r3, #16
 8005904:	d10d      	bne.n	8005922 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d106      	bne.n	8005922 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2210      	movs	r2, #16
 800591a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f883 	bl	8005a28 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b20      	cmp	r3, #32
 800592e:	d10d      	bne.n	800594c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b20      	cmp	r3, #32
 800593c:	d106      	bne.n	800594c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2220      	movs	r2, #32
 8005944:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f878 	bl	8005a3c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d10d      	bne.n	8005976 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d106      	bne.n	8005976 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2240      	movs	r2, #64	; 0x40
 800596e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f86d 	bl	8005a50 <HAL_LPTIM_DirectionDownCallback>
  }
#if defined(LPTIM_RCR_REP)

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d10d      	bne.n	80059a0 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b80      	cmp	r3, #128	; 0x80
 8005990:	d106      	bne.n	80059a0 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f862 	bl	8005a64 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ae:	d10f      	bne.n	80059d0 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059be:	d107      	bne.n	80059d0 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c8:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f854 	bl	8005a78 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a9a:	b2db      	uxtb	r3, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <LPTIM_WaitForFlag+0x58>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <LPTIM_WaitForFlag+0x5c>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	0b9b      	lsrs	r3, r3, #14
 8005ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d002      	beq.n	8005af2 <LPTIM_WaitForFlag+0x4a>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1ec      	bne.n	8005acc <LPTIM_WaitForFlag+0x24>

  return result;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000004 	.word	0x20000004
 8005b04:	d1b71759 	.word	0xd1b71759

08005b08 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b14:	f3ef 8310 	mrs	r3, PRIMASK
 8005b18:	613b      	str	r3, [r7, #16]
  return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b1e:	2301      	movs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f383 8810 	msr	PRIMASK, r3
}
 8005b28:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a87      	ldr	r2, [pc, #540]	; (8005d4c <LPTIM_Disable+0x244>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <LPTIM_Disable+0x34>
 8005b34:	4a86      	ldr	r2, [pc, #536]	; (8005d50 <LPTIM_Disable+0x248>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005b3a:	e00d      	b.n	8005b58 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005b3c:	4b85      	ldr	r3, [pc, #532]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005b48:	e006      	b.n	8005b58 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005b4a:	4b82      	ldr	r3, [pc, #520]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005b56:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	61fb      	str	r3, [r7, #28]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	61bb      	str	r3, [r7, #24]
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a6f      	ldr	r2, [pc, #444]	; (8005d4c <LPTIM_Disable+0x244>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d003      	beq.n	8005b9a <LPTIM_Disable+0x92>
 8005b92:	4a6f      	ldr	r2, [pc, #444]	; (8005d50 <LPTIM_Disable+0x248>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00d      	beq.n	8005bb4 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005b98:	e019      	b.n	8005bce <LPTIM_Disable+0xc6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005b9a:	4b6e      	ldr	r3, [pc, #440]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	4a6d      	ldr	r2, [pc, #436]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005ba6:	4b6b      	ldr	r3, [pc, #428]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	4a6a      	ldr	r2, [pc, #424]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8005bb2:	e00c      	b.n	8005bce <LPTIM_Disable+0xc6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005bb4:	4b67      	ldr	r3, [pc, #412]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	4a66      	ldr	r2, [pc, #408]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bba:	f043 0320 	orr.w	r3, r3, #32
 8005bbe:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005bc0:	4b64      	ldr	r3, [pc, #400]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	4a63      	ldr	r2, [pc, #396]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8005bcc:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <LPTIM_Disable+0xda>
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <LPTIM_Disable+0xda>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8096 	beq.w	8005d0e <LPTIM_Disable+0x206>
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a59      	ldr	r2, [pc, #356]	; (8005d4c <LPTIM_Disable+0x244>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <LPTIM_Disable+0xec>
 8005bec:	4a58      	ldr	r2, [pc, #352]	; (8005d50 <LPTIM_Disable+0x248>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <LPTIM_Disable+0xfe>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005bf2:	e011      	b.n	8005c18 <LPTIM_Disable+0x110>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005bf4:	4b57      	ldr	r3, [pc, #348]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	4a56      	ldr	r2, [pc, #344]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005bfc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005c04:	e008      	b.n	8005c18 <LPTIM_Disable+0x110>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8005c06:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	4a51      	ldr	r2, [pc, #324]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005c0e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8005c16:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01a      	beq.n	8005c54 <LPTIM_Disable+0x14c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005c36:	2108      	movs	r1, #8
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff35 	bl	8005aa8 <LPTIM_WaitForFlag>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d103      	bne.n	8005c4c <LPTIM_Disable+0x144>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2203      	movs	r2, #3
 8005c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2208      	movs	r2, #8
 8005c52:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <LPTIM_Disable+0x188>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005c72:	2110      	movs	r1, #16
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff17 	bl	8005aa8 <LPTIM_WaitForFlag>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d103      	bne.n	8005c88 <LPTIM_Disable+0x180>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	605a      	str	r2, [r3, #4]
    }
#if defined(LPTIM_RCR_REP)

    if (tmpRCR != 0UL)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01c      	beq.n	8005cd0 <LPTIM_Disable+0x1c8>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8005cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fef8 	bl	8005aa8 <LPTIM_WaitForFlag>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	d103      	bne.n	8005cc6 <LPTIM_Disable+0x1be>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <LPTIM_Disable+0x244>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <LPTIM_Disable+0x1da>
 8005cda:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <LPTIM_Disable+0x248>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <LPTIM_Disable+0x1f0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005ce0:	e016      	b.n	8005d10 <LPTIM_Disable+0x208>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cec:	4919      	ldr	r1, [pc, #100]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8005cf6:	e00b      	b.n	8005d10 <LPTIM_Disable+0x208>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005cf8:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d02:	4914      	ldr	r1, [pc, #80]	; (8005d54 <LPTIM_Disable+0x24c>)
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8005d0c:	e000      	b.n	8005d10 <LPTIM_Disable+0x208>
    }
  }
 8005d0e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d26:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	621a      	str	r2, [r3, #32]
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f383 8810 	msr	PRIMASK, r3
}
 8005d42:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005d44:	bf00      	nop
 8005d46:	3738      	adds	r7, #56	; 0x38
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40007c00 	.word	0x40007c00
 8005d50:	40009400 	.word	0x40009400
 8005d54:	40021000 	.word	0x40021000

08005d58 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005d60:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <HAL_PWR_ConfigPVD+0xb8>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f023 020e 	bic.w	r2, r3, #14
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4928      	ldr	r1, [pc, #160]	; (8005e10 <HAL_PWR_ConfigPVD+0xb8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8005d72:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005d7e:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d88:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005d8a:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	4a21      	ldr	r2, [pc, #132]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005d96:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da0:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <HAL_PWR_ConfigPVD+0xbc>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40007000 	.word	0x40007000
 8005e14:	40010400 	.word	0x40010400

08005e18 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_PWR_EnablePVD+0x1c>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <HAL_PWR_EnablePVD+0x1c>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6053      	str	r3, [r2, #4]
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40007000 	.word	0x40007000

08005e38 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_CR3_RRS_Msk);
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e46:	6093      	str	r3, [r2, #8]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	4a05      	ldr	r2, [pc, #20]	; (8005e64 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005e4e:	f043 0304 	orr.w	r3, r3, #4
 8005e52:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005e54:	bf30      	wfi
}
 8005e56:	bf00      	nop
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40007000 	.word	0x40007000
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40007000 	.word	0x40007000

08005e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e92:	d130      	bne.n	8005ef6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d038      	beq.n	8005f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2232      	movs	r2, #50	; 0x32
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	0c9b      	lsrs	r3, r3, #18
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ec8:	e002      	b.n	8005ed0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ed0:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005edc:	d102      	bne.n	8005ee4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f2      	bne.n	8005eca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef0:	d110      	bne.n	8005f14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e00f      	b.n	8005f16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f02:	d007      	beq.n	8005f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f04:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f0c:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40007000 	.word	0x40007000
 8005f28:	20000004 	.word	0x20000004
 8005f2c:	431bde83 	.word	0x431bde83

08005f30 <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 8005f34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f38:	f000 f802 	bl	8005f40 <HAL_PWREx_SetSRAM2ContentRetention>
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	6093      	str	r3, [r2, #8]
 8005f5a:	e00c      	b.n	8005f76 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f62:	d106      	bne.n	8005f72 <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a06      	ldr	r2, [pc, #24]	; (8005f84 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8005f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6e:	6093      	str	r3, [r2, #8]
 8005f70:	e001      	b.n	8005f76 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40007000 	.word	0x40007000

08005f88 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40007000 	.word	0x40007000

08005fa8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005fd4:	bf30      	wfi
 8005fd6:	e002      	b.n	8005fde <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005fd8:	bf40      	sev
    __WFE();
 8005fda:	bf20      	wfe
    __WFE();
 8005fdc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005fde:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	6113      	str	r3, [r2, #16]
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40007000 	.word	0x40007000
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f000 bc4b 	b.w	80068aa <HAL_RCC_OscConfig+0x8aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006014:	4b97      	ldr	r3, [pc, #604]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800601e:	4b95      	ldr	r3, [pc, #596]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80e6 	beq.w	8006202 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_RCC_OscConfig+0x4c>
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b0c      	cmp	r3, #12
 8006040:	f040 808d 	bne.w	800615e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b01      	cmp	r3, #1
 8006048:	f040 8089 	bne.w	800615e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800604c:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <HAL_RCC_OscConfig+0x66>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f000 bc22 	b.w	80068aa <HAL_RCC_OscConfig+0x8aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606a:	4b82      	ldr	r3, [pc, #520]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_RCC_OscConfig+0x80>
 8006076:	4b7f      	ldr	r3, [pc, #508]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607e:	e005      	b.n	800608c <HAL_RCC_OscConfig+0x8c>
 8006080:	4b7c      	ldr	r3, [pc, #496]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006086:	091b      	lsrs	r3, r3, #4
 8006088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800608c:	4293      	cmp	r3, r2
 800608e:	d224      	bcs.n	80060da <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fd9d 	bl	8006bd4 <RCC_SetFlashLatencyFromMSIRange>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f000 bc02 	b.w	80068aa <HAL_RCC_OscConfig+0x8aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a6:	4b73      	ldr	r3, [pc, #460]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a72      	ldr	r2, [pc, #456]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4b70      	ldr	r3, [pc, #448]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	496d      	ldr	r1, [pc, #436]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060c4:	4b6b      	ldr	r3, [pc, #428]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	4968      	ldr	r1, [pc, #416]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	604b      	str	r3, [r1, #4]
 80060d8:	e025      	b.n	8006126 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060da:	4b66      	ldr	r3, [pc, #408]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a65      	ldr	r2, [pc, #404]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060e0:	f043 0308 	orr.w	r3, r3, #8
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	4b63      	ldr	r3, [pc, #396]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	4960      	ldr	r1, [pc, #384]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	495b      	ldr	r1, [pc, #364]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fd5c 	bl	8006bd4 <RCC_SetFlashLatencyFromMSIRange>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e3c1      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006126:	f000 fcc9 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 800612a:	4602      	mov	r2, r0
 800612c:	4b51      	ldr	r3, [pc, #324]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	4950      	ldr	r1, [pc, #320]	; (8006278 <HAL_RCC_OscConfig+0x278>)
 8006138:	5ccb      	ldrb	r3, [r1, r3]
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	4a4e      	ldr	r2, [pc, #312]	; (800627c <HAL_RCC_OscConfig+0x27c>)
 8006144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006146:	4b4e      	ldr	r3, [pc, #312]	; (8006280 <HAL_RCC_OscConfig+0x280>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ff52 	bl	8003ff4 <HAL_InitTick>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d052      	beq.n	8006200 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	e3a5      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d032      	beq.n	80061cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a42      	ldr	r2, [pc, #264]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006172:	f7fd ff8f 	bl	8004094 <HAL_GetTick>
 8006176:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800617a:	f7fd ff8b 	bl	8004094 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e38e      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800618c:	4b39      	ldr	r3, [pc, #228]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006198:	4b36      	ldr	r3, [pc, #216]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a35      	ldr	r2, [pc, #212]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800619e:	f043 0308 	orr.w	r3, r3, #8
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b33      	ldr	r3, [pc, #204]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	4930      	ldr	r1, [pc, #192]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	492b      	ldr	r1, [pc, #172]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
 80061ca:	e01a      	b.n	8006202 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061cc:	4b29      	ldr	r3, [pc, #164]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a28      	ldr	r2, [pc, #160]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061d8:	f7fd ff5c 	bl	8004094 <HAL_GetTick>
 80061dc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061e0:	f7fd ff58 	bl	8004094 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e35b      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x1e0>
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d073      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d005      	beq.n	8006220 <HAL_RCC_OscConfig+0x220>
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d10e      	bne.n	8006238 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d10b      	bne.n	8006238 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d063      	beq.n	80062f4 <HAL_RCC_OscConfig+0x2f4>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d15f      	bne.n	80062f4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e338      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d106      	bne.n	8006250 <HAL_RCC_OscConfig+0x250>
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0b      	ldr	r2, [pc, #44]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	e025      	b.n	800629c <HAL_RCC_OscConfig+0x29c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006258:	d114      	bne.n	8006284 <HAL_RCC_OscConfig+0x284>
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4b03      	ldr	r3, [pc, #12]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a02      	ldr	r2, [pc, #8]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e013      	b.n	800629c <HAL_RCC_OscConfig+0x29c>
 8006274:	40021000 	.word	0x40021000
 8006278:	08007d30 	.word	0x08007d30
 800627c:	20000004 	.word	0x20000004
 8006280:	20000008 	.word	0x20000008
 8006284:	4b8f      	ldr	r3, [pc, #572]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a8e      	ldr	r2, [pc, #568]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800628a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b8c      	ldr	r3, [pc, #560]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a8b      	ldr	r2, [pc, #556]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800629a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d013      	beq.n	80062cc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fd fef6 	bl	8004094 <HAL_GetTick>
 80062a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fd fef2 	bl	8004094 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e2f5      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062be:	4b81      	ldr	r3, [pc, #516]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0x2ac>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fd fee2 	bl	8004094 <HAL_GetTick>
 80062d0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fd fede 	bl	8004094 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e2e1      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062e6:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x2d4>
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d060      	beq.n	80063c4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d005      	beq.n	8006314 <HAL_RCC_OscConfig+0x314>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b0c      	cmp	r3, #12
 800630c:	d119      	bne.n	8006342 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d116      	bne.n	8006342 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006314:	4b6b      	ldr	r3, [pc, #428]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_OscConfig+0x32c>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e2be      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	4962      	ldr	r1, [pc, #392]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006340:	e040      	b.n	80063c4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d023      	beq.n	8006392 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634a:	4b5e      	ldr	r3, [pc, #376]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a5d      	ldr	r2, [pc, #372]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006356:	f7fd fe9d 	bl	8004094 <HAL_GetTick>
 800635a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635e:	f7fd fe99 	bl	8004094 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e29c      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006370:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0f0      	beq.n	800635e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637c:	4b51      	ldr	r3, [pc, #324]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	494e      	ldr	r1, [pc, #312]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	e018      	b.n	80063c4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006392:	4b4c      	ldr	r3, [pc, #304]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a4b      	ldr	r2, [pc, #300]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fd fe79 	bl	8004094 <HAL_GetTick>
 80063a2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a6:	f7fd fe75 	bl	8004094 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e278      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f0      	bne.n	80063a6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8082 	beq.w	80064d6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d05f      	beq.n	800649a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80063da:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 80063dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d037      	beq.n	8006460 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e250      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8006412:	4b2c      	ldr	r3, [pc, #176]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006418:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006422:	f7fd fe37 	bl	8004094 <HAL_GetTick>
 8006426:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642a:	f7fd fe33 	bl	8004094 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b11      	cmp	r3, #17
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e236      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800643c:	4b21      	ldr	r3, [pc, #132]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800643e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1ef      	bne.n	800642a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800644c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006450:	f023 0210 	bic.w	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	491a      	ldr	r1, [pc, #104]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006460:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006466:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fd fe10 	bl	8004094 <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006478:	f7fd fe0c 	bl	8004094 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b11      	cmp	r3, #17
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e20f      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800648a:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0ef      	beq.n	8006478 <HAL_RCC_OscConfig+0x478>
 8006498:	e01d      	b.n	80064d6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 800649c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064aa:	f7fd fdf3 	bl	8004094 <HAL_GetTick>
 80064ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064b0:	e00a      	b.n	80064c8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064b2:	f7fd fdef 	bl	8004094 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b11      	cmp	r3, #17
 80064be:	d903      	bls.n	80064c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1f2      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
 80064c4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064c8:	4ba7      	ldr	r3, [pc, #668]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80064ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ed      	bne.n	80064b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80b9 	beq.w	8006656 <HAL_RCC_OscConfig+0x656>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80064ea:	4b9f      	ldr	r3, [pc, #636]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10e      	bne.n	8006514 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	4b9c      	ldr	r3, [pc, #624]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	4a9b      	ldr	r2, [pc, #620]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6593      	str	r3, [r2, #88]	; 0x58
 8006502:	4b99      	ldr	r3, [pc, #612]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006514:	4b95      	ldr	r3, [pc, #596]	; (800676c <HAL_RCC_OscConfig+0x76c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d118      	bne.n	8006552 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006520:	4b92      	ldr	r3, [pc, #584]	; (800676c <HAL_RCC_OscConfig+0x76c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a91      	ldr	r2, [pc, #580]	; (800676c <HAL_RCC_OscConfig+0x76c>)
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652c:	f7fd fdb2 	bl	8004094 <HAL_GetTick>
 8006530:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006534:	f7fd fdae 	bl	8004094 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e1b1      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006546:	4b89      	ldr	r3, [pc, #548]	; (800676c <HAL_RCC_OscConfig+0x76c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d02c      	beq.n	80065b8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800655e:	4b82      	ldr	r3, [pc, #520]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	497d      	ldr	r1, [pc, #500]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d010      	beq.n	80065a6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006584:	4b78      	ldr	r3, [pc, #480]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	4a77      	ldr	r2, [pc, #476]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800658c:	f043 0304 	orr.w	r3, r3, #4
 8006590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006594:	4b74      	ldr	r3, [pc, #464]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	4a73      	ldr	r2, [pc, #460]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065a4:	e018      	b.n	80065d8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065a6:	4b70      	ldr	r3, [pc, #448]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ac:	4a6e      	ldr	r2, [pc, #440]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b6:	e00f      	b.n	80065d8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065b8:	4b6b      	ldr	r3, [pc, #428]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	4a6a      	ldr	r2, [pc, #424]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80065c8:	4b67      	ldr	r3, [pc, #412]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	4a66      	ldr	r2, [pc, #408]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065d0:	f023 0304 	bic.w	r3, r3, #4
 80065d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d014      	beq.n	800660a <HAL_RCC_OscConfig+0x60a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e0:	f7fd fd58 	bl	8004094 <HAL_GetTick>
 80065e4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x5fa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e8:	f7fd fd54 	bl	8004094 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x5fa>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e157      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fa:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0ef      	beq.n	80065e8 <HAL_RCC_OscConfig+0x5e8>
 8006608:	e01b      	b.n	8006642 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660a:	f7fd fd43 	bl	8004094 <HAL_GetTick>
 800660e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x624>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fd fd3f 	bl	8004094 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b64      	cmp	r3, #100	; 0x64
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x624>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e142      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006624:	4b50      	ldr	r3, [pc, #320]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1ef      	bne.n	8006612 <HAL_RCC_OscConfig+0x612>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006632:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006638:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800663a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800663e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006646:	2b01      	cmp	r3, #1
 8006648:	d105      	bne.n	8006656 <HAL_RCC_OscConfig+0x656>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	4a46      	ldr	r2, [pc, #280]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03c      	beq.n	80066dc <HAL_RCC_OscConfig+0x6dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01c      	beq.n	80066a4 <HAL_RCC_OscConfig+0x6a4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800666a:	4b3f      	ldr	r3, [pc, #252]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800666c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006670:	4a3d      	ldr	r2, [pc, #244]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667a:	f7fd fd0b 	bl	8004094 <HAL_GetTick>
 800667e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x694>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006682:	f7fd fd07 	bl	8004094 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x694>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e10a      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006694:	4b34      	ldr	r3, [pc, #208]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0ef      	beq.n	8006682 <HAL_RCC_OscConfig+0x682>
 80066a2:	e01b      	b.n	80066dc <HAL_RCC_OscConfig+0x6dc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066a4:	4b30      	ldr	r3, [pc, #192]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80066a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066aa:	4a2f      	ldr	r2, [pc, #188]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fd fcee 	bl	8004094 <HAL_GetTick>
 80066b8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x6ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066bc:	f7fd fcea 	bl	8004094 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0ed      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066ce:	4b26      	ldr	r3, [pc, #152]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80066d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ef      	bne.n	80066bc <HAL_RCC_OscConfig+0x6bc>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80e1 	beq.w	80068a8 <HAL_RCC_OscConfig+0x8a8>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	f040 80b5 	bne.w	800685a <HAL_RCC_OscConfig+0x85a>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f003 0203 	and.w	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	429a      	cmp	r2, r3
 8006702:	d124      	bne.n	800674e <HAL_RCC_OscConfig+0x74e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	3b01      	subs	r3, #1
 8006710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006712:	429a      	cmp	r2, r3
 8006714:	d11b      	bne.n	800674e <HAL_RCC_OscConfig+0x74e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d113      	bne.n	800674e <HAL_RCC_OscConfig+0x74e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	3b01      	subs	r3, #1
 8006734:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006736:	429a      	cmp	r2, r3
 8006738:	d109      	bne.n	800674e <HAL_RCC_OscConfig+0x74e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	3b01      	subs	r3, #1
 8006748:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800674a:	429a      	cmp	r2, r3
 800674c:	d05f      	beq.n	800680e <HAL_RCC_OscConfig+0x80e>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d05a      	beq.n	800680a <HAL_RCC_OscConfig+0x80a>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a03      	ldr	r2, [pc, #12]	; (8006768 <HAL_RCC_OscConfig+0x768>)
 800675a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006760:	f7fd fc98 	bl	8004094 <HAL_GetTick>
 8006764:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006766:	e00c      	b.n	8006782 <HAL_RCC_OscConfig+0x782>
 8006768:	40021000 	.word	0x40021000
 800676c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006770:	f7fd fc90 	bl	8004094 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x782>
              {
                return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e093      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006782:	4b4c      	ldr	r3, [pc, #304]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f0      	bne.n	8006770 <HAL_RCC_OscConfig+0x770>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800678e:	4b49      	ldr	r3, [pc, #292]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	4b49      	ldr	r3, [pc, #292]	; (80068b8 <HAL_RCC_OscConfig+0x8b8>)
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800679e:	3a01      	subs	r2, #1
 80067a0:	0112      	lsls	r2, r2, #4
 80067a2:	4311      	orrs	r1, r2
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067a8:	0212      	lsls	r2, r2, #8
 80067aa:	4311      	orrs	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067b0:	0852      	lsrs	r2, r2, #1
 80067b2:	3a01      	subs	r2, #1
 80067b4:	0552      	lsls	r2, r2, #21
 80067b6:	4311      	orrs	r1, r2
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80067bc:	0852      	lsrs	r2, r2, #1
 80067be:	3a01      	subs	r2, #1
 80067c0:	0652      	lsls	r2, r2, #25
 80067c2:	430a      	orrs	r2, r1
 80067c4:	493b      	ldr	r1, [pc, #236]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80067ca:	4b3a      	ldr	r3, [pc, #232]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a39      	ldr	r2, [pc, #228]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067d4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067d6:	4b37      	ldr	r3, [pc, #220]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	4a36      	ldr	r2, [pc, #216]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067e0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067e2:	f7fd fc57 	bl	8004094 <HAL_GetTick>
 80067e6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x7fc>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fd fc53 	bl	8004094 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x7fc>
              {
                return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e056      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067fc:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x7ea>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006808:	e04e      	b.n	80068a8 <HAL_RCC_OscConfig+0x8a8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e04d      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800680e:	4b29      	ldr	r3, [pc, #164]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d146      	bne.n	80068a8 <HAL_RCC_OscConfig+0x8a8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800681a:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006824:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006826:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 800682c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006830:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006832:	f7fd fc2f 	bl	8004094 <HAL_GetTick>
 8006836:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x84c>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683a:	f7fd fc2b 	bl	8004094 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x84c>
            {
              return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e02e      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x83a>
 8006858:	e026      	b.n	80068a8 <HAL_RCC_OscConfig+0x8a8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d021      	beq.n	80068a4 <HAL_RCC_OscConfig+0x8a4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006860:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800686a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686c:	f7fd fc12 	bl	8004094 <HAL_GetTick>
 8006870:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x886>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006874:	f7fd fc0e 	bl	8004094 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x886>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e011      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f0      	bne.n	8006874 <HAL_RCC_OscConfig+0x874>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	4a07      	ldr	r2, [pc, #28]	; (80068b4 <HAL_RCC_OscConfig+0x8b4>)
 8006898:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800689c:	f023 0303 	bic.w	r3, r3, #3
 80068a0:	60d3      	str	r3, [r2, #12]
 80068a2:	e001      	b.n	80068a8 <HAL_RCC_OscConfig+0x8a8>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <HAL_RCC_OscConfig+0x8aa>
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40021000 	.word	0x40021000
 80068b8:	f99f808c 	.word	0xf99f808c

080068bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0e7      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068d0:	4b75      	ldr	r3, [pc, #468]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d910      	bls.n	8006900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b72      	ldr	r3, [pc, #456]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 0207 	bic.w	r2, r3, #7
 80068e6:	4970      	ldr	r1, [pc, #448]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ee:	4b6e      	ldr	r3, [pc, #440]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d001      	beq.n	8006900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0cf      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	4b66      	ldr	r3, [pc, #408]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006918:	429a      	cmp	r2, r3
 800691a:	d908      	bls.n	800692e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800691c:	4b63      	ldr	r3, [pc, #396]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	4960      	ldr	r1, [pc, #384]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d04c      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006942:	4b5a      	ldr	r3, [pc, #360]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d121      	bne.n	8006992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e0a6      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d107      	bne.n	800696a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695a:	4b54      	ldr	r3, [pc, #336]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d115      	bne.n	8006992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e09a      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006972:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e08e      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006982:	4b4a      	ldr	r3, [pc, #296]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e086      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006992:	4b46      	ldr	r3, [pc, #280]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f023 0203 	bic.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4943      	ldr	r1, [pc, #268]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a4:	f7fd fb76 	bl	8004094 <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ac:	f7fd fb72 	bl	8004094 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e06e      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	4b3a      	ldr	r3, [pc, #232]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 020c 	and.w	r2, r3, #12
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1eb      	bne.n	80069ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	4b31      	ldr	r3, [pc, #196]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d208      	bcs.n	8006a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f0:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	492b      	ldr	r1, [pc, #172]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a02:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d210      	bcs.n	8006a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f023 0207 	bic.w	r2, r3, #7
 8006a18:	4923      	ldr	r1, [pc, #140]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a20:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d001      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e036      	b.n	8006aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4918      	ldr	r1, [pc, #96]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	4910      	ldr	r1, [pc, #64]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a70:	f000 f824 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <HAL_RCC_ClockConfig+0x1f0>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	490b      	ldr	r1, [pc, #44]	; (8006ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8006a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a90:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd faad 	bl	8003ff4 <HAL_InitTick>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40022000 	.word	0x40022000
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	08007d30 	.word	0x08007d30
 8006ab4:	20000004 	.word	0x20000004
 8006ab8:	20000008 	.word	0x20000008

08006abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aca:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ad4:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x34>
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	d121      	bne.n	8006b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11e      	bne.n	8006b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006af0:	4b34      	ldr	r3, [pc, #208]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006afc:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	e005      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b0c:	4b2d      	ldr	r3, [pc, #180]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b18:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b2c:	e00a      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d102      	bne.n	8006b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b34:	4b25      	ldr	r3, [pc, #148]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e004      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d101      	bne.n	8006b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b40:	4b23      	ldr	r3, [pc, #140]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d134      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b4a:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0xac>
 8006b60:	e005      	b.n	8006b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8006b64:	617b      	str	r3, [r7, #20]
      break;
 8006b66:	e005      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b68:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b6a:	617b      	str	r3, [r7, #20]
      break;
 8006b6c:	e002      	b.n	8006b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	617b      	str	r3, [r7, #20]
      break;
 8006b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	3301      	adds	r3, #1
 8006b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b82:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	fb03 f202 	mul.w	r2, r3, r2
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	0e5b      	lsrs	r3, r3, #25
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3724      	adds	r7, #36	; 0x24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	08007d40 	.word	0x08007d40
 8006bcc:	00f42400 	.word	0x00f42400
 8006bd0:	003d0900 	.word	0x003d0900

08006bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006be0:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006bec:	f7ff f93c 	bl	8005e68 <HAL_PWREx_GetVoltageRange>
 8006bf0:	6178      	str	r0, [r7, #20]
 8006bf2:	e014      	b.n	8006c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8006c00:	4b22      	ldr	r3, [pc, #136]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c0c:	f7ff f92c 	bl	8005e68 <HAL_PWREx_GetVoltageRange>
 8006c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d10b      	bne.n	8006c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d919      	bls.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8006c30:	d902      	bls.n	8006c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c32:	2302      	movs	r3, #2
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	e013      	b.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c38:	2301      	movs	r3, #1
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	e010      	b.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d902      	bls.n	8006c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c44:	2303      	movs	r3, #3
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	e00a      	b.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b80      	cmp	r3, #128	; 0x80
 8006c4e:	d102      	bne.n	8006c56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c50:	2302      	movs	r3, #2
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	e004      	b.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b70      	cmp	r3, #112	; 0x70
 8006c5a:	d101      	bne.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f023 0207 	bic.w	r2, r3, #7
 8006c68:	4909      	ldr	r1, [pc, #36]	; (8006c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d001      	beq.n	8006c82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40022000 	.word	0x40022000

08006c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 809c 	beq.w	8006dea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cb6:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ccc:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd0:	4a3e      	ldr	r2, [pc, #248]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8006cd8:	4b3c      	ldr	r3, [pc, #240]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ce8:	4b39      	ldr	r3, [pc, #228]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a38      	ldr	r2, [pc, #224]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cf4:	f7fd f9ce 	bl	8004094 <HAL_GetTick>
 8006cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cfa:	e009      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cfc:	f7fd f9ca 	bl	8004094 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d902      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8006d0e:	e005      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d10:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ef      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8006d1c:	7cfb      	ldrb	r3, [r7, #19]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d158      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d22:	4b2a      	ldr	r3, [pc, #168]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01e      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d019      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d3e:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d4a:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d50:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d014      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7c:	f7fd f98a 	bl	8004094 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d82:	e009      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x104>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d84:	f7fd f986 	bl	8004094 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	; 0x64
 8006d90:	d902      	bls.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x104>
          {
            ret = HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	74fb      	strb	r3, [r7, #19]
            break;
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x112>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0ee      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8006da6:	7cfb      	ldrb	r3, [r7, #19]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dac:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	4904      	ldr	r1, [pc, #16]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dc2:	e009      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dc4:	7cfb      	ldrb	r3, [r7, #19]
 8006dc6:	74bb      	strb	r3, [r7, #18]
 8006dc8:	e006      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd8:	7c7b      	ldrb	r3, [r7, #17]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x156>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b6e      	ldr	r3, [pc, #440]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4a6d      	ldr	r2, [pc, #436]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df6:	4b68      	ldr	r3, [pc, #416]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfc:	f023 0203 	bic.w	r2, r3, #3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4964      	ldr	r1, [pc, #400]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e18:	4b5f      	ldr	r3, [pc, #380]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	f023 020c 	bic.w	r2, r3, #12
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	495c      	ldr	r1, [pc, #368]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e3a:	4b57      	ldr	r3, [pc, #348]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4953      	ldr	r1, [pc, #332]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e5c:	4b4e      	ldr	r3, [pc, #312]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	494b      	ldr	r1, [pc, #300]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e7e:	4b46      	ldr	r3, [pc, #280]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	4942      	ldr	r1, [pc, #264]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00a      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	493a      	ldr	r1, [pc, #232]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ec2:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	4931      	ldr	r1, [pc, #196]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ee4:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	4929      	ldr	r1, [pc, #164]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	4920      	ldr	r1, [pc, #128]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d015      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f28:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	4918      	ldr	r1, [pc, #96]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f46:	d105      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f52:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f60:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	490a      	ldr	r1, [pc, #40]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7e:	d105      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000

08006f9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d073      	beq.n	8007096 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc fed6 	bl	8003d74 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006fce:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	22ca      	movs	r2, #202	; 0xca
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2253      	movs	r2, #83	; 0x53
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f87f 	bl	80070ec <RTC_EnterInitMode>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d14e      	bne.n	8007096 <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700a:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6912      	ldr	r2, [r2, #16]
 8007032:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6919      	ldr	r1, [r3, #16]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	041a      	lsls	r2, r3, #16
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f885 	bl	8007158 <RTC_ExitInitMode>
 800704e:	4603      	mov	r3, r0
 8007050:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11e      	bne.n	8007096 <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007066:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6999      	ldr	r1, [r3, #24]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	22ff      	movs	r2, #255	; 0xff
 800708c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070b6:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80070b8:	f7fc ffec 	bl	8004094 <HAL_GetTick>
 80070bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070be:	e009      	b.n	80070d4 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070c0:	f7fc ffe8 	bl	8004094 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ce:	d901      	bls.n	80070d4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e007      	b.n	80070e4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0ee      	beq.n	80070c0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d123      	bne.n	800714e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007114:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007116:	f7fc ffbd 	bl	8004094 <HAL_GetTick>
 800711a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800711c:	e00d      	b.n	800713a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800711e:	f7fc ffb9 	bl	8004094 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712c:	d905      	bls.n	800713a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2203      	movs	r2, #3
 8007136:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <RTC_EnterInitMode+0x62>
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d1e7      	bne.n	800711e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007164:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <RTC_ExitInitMode+0x78>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <RTC_ExitInitMode+0x78>)
 800716a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <RTC_ExitInitMode+0x78>)
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff ff8f 	bl	80070a0 <HAL_RTC_WaitForSynchro>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01e      	beq.n	80071c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2203      	movs	r2, #3
 800718c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
 8007194:	e017      	b.n	80071c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <RTC_ExitInitMode+0x78>)
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <RTC_ExitInitMode+0x78>)
 800719c:	f023 0320 	bic.w	r3, r3, #32
 80071a0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff ff7c 	bl	80070a0 <HAL_RTC_WaitForSynchro>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2203      	movs	r2, #3
 80071b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <RTC_ExitInitMode+0x78>)
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <RTC_ExitInitMode+0x78>)
 80071c0:	f043 0320 	orr.w	r3, r3, #32
 80071c4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40002800 	.word	0x40002800

080071d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e087      	b.n	8007300 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	22ca      	movs	r2, #202	; 0xca
 8007206:	625a      	str	r2, [r3, #36]	; 0x24
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2253      	movs	r2, #83	; 0x53
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721e:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2204      	movs	r2, #4
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d120      	bne.n	8007278 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 8007236:	f7fc ff2d 	bl	8004094 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800723c:	e015      	b.n	800726a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800723e:	f7fc ff29 	bl	8004094 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724c:	d90d      	bls.n	800726a <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	22ff      	movs	r2, #255	; 0xff
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e04a      	b.n	8007300 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0e2      	beq.n	800723e <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	0419      	lsls	r1, r3, #16
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	430a      	orrs	r2, r1
 8007284:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f023 0107 	bic.w	r1, r3, #7
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	430a      	orrs	r2, r1
 8007298:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80072a0:	4b19      	ldr	r3, [pc, #100]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	4a18      	ldr	r2, [pc, #96]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072aa:	6053      	str	r3, [r2, #4]
 80072ac:	e005      	b.n	80072ba <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072b8:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	4a12      	ldr	r2, [pc, #72]	; (8007308 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 80072c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072c4:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072d4:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699a      	ldr	r2, [r3, #24]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	22ff      	movs	r2, #255	; 0xff
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40010400 	.word	0x40010400

0800730c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800731e:	2302      	movs	r3, #2
 8007320:	e04d      	b.n	80073be <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	22ca      	movs	r2, #202	; 0xca
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2253      	movs	r2, #83	; 0x53
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007350:	619a      	str	r2, [r3, #24]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	699a      	ldr	r2, [r3, #24]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007360:	619a      	str	r2, [r3, #24]

  tickstart = HAL_GetTick();
 8007362:	f7fc fe97 	bl	8004094 <HAL_GetTick>
 8007366:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007368:	e015      	b.n	8007396 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800736a:	f7fc fe93 	bl	8004094 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007378:	d90d      	bls.n	8007396 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	22ff      	movs	r2, #255	; 0xff
 8007380:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2203      	movs	r2, #3
 8007386:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e013      	b.n	80073be <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0e2      	beq.n	800736a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80073d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073d6:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2204      	movs	r2, #4
 80073ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f80a 	bl	8007408 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	40010400 	.word	0x40010400

08007408 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e095      	b.n	800755a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800743e:	d009      	beq.n	8007454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	61da      	str	r2, [r3, #28]
 8007446:	e005      	b.n	8007454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fc fcb8 	bl	8003de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007494:	d902      	bls.n	800749c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e002      	b.n	80074a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800749c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074aa:	d007      	beq.n	80074bc <HAL_SPI_Init+0xa0>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074b4:	d002      	beq.n	80074bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fe:	ea42 0103 	orr.w	r1, r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007506:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	0c1b      	lsrs	r3, r3, #16
 8007518:	f003 0204 	and.w	r2, r3, #4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007538:	ea42 0103 	orr.w	r1, r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e01a      	b.n	80075aa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fc fc6b 	bl	8003e68 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b08a      	sub	sp, #40	; 0x28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075c0:	2301      	movs	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x26>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e1fb      	b.n	80079d0 <HAL_SPI_TransmitReceive+0x41e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e0:	f7fc fd58 	bl	8004094 <HAL_GetTick>
 80075e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80075f4:	887b      	ldrh	r3, [r7, #2]
 80075f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80075f8:	887b      	ldrh	r3, [r7, #2]
 80075fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075fc:	7efb      	ldrb	r3, [r7, #27]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d00e      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x6e>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007608:	d106      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d102      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x66>
 8007612:	7efb      	ldrb	r3, [r7, #27]
 8007614:	2b04      	cmp	r3, #4
 8007616:	d003      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007618:	2302      	movs	r3, #2
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800761e:	e1cd      	b.n	80079bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x80>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x80>
 800762c:	887b      	ldrh	r3, [r7, #2]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007638:	e1c0      	b.n	80079bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b04      	cmp	r3, #4
 8007644:	d003      	beq.n	800764e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2205      	movs	r2, #5
 800764a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	887a      	ldrh	r2, [r7, #2]
 800765e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	887a      	ldrh	r2, [r7, #2]
 8007674:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	887a      	ldrh	r2, [r7, #2]
 800767a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007690:	d802      	bhi.n	8007698 <HAL_SPI_TransmitReceive+0xe6>
 8007692:	8a3b      	ldrh	r3, [r7, #16]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d908      	bls.n	80076aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076a6:	605a      	str	r2, [r3, #4]
 80076a8:	e007      	b.n	80076ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d007      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076e0:	d97c      	bls.n	80077dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x13e>
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d169      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	881a      	ldrh	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007714:	e056      	b.n	80077c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b02      	cmp	r3, #2
 8007722:	d11b      	bne.n	800775c <HAL_SPI_TransmitReceive+0x1aa>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <HAL_SPI_TransmitReceive+0x1aa>
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	2b01      	cmp	r3, #1
 8007732:	d113      	bne.n	800775c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	881a      	ldrh	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	1c9a      	adds	r2, r3, #2
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b01      	cmp	r3, #1
 8007768:	d11c      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x1f2>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	b292      	uxth	r2, r2
 8007782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077a0:	2301      	movs	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077a4:	f7fc fc76 	bl	8004094 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d807      	bhi.n	80077c4 <HAL_SPI_TransmitReceive+0x212>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d003      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80077c2:	e0fb      	b.n	80079bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1a3      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x164>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d19d      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x164>
 80077da:	e0df      	b.n	800799c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x23a>
 80077e4:	8a7b      	ldrh	r3, [r7, #18]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	f040 80cb 	bne.w	8007982 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d912      	bls.n	800781c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b02      	subs	r3, #2
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800781a:	e0b2      	b.n	8007982 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007842:	e09e      	b.n	8007982 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d134      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x30a>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d02f      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x30a>
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	2b01      	cmp	r3, #1
 8007860:	d12c      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	d912      	bls.n	8007892 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	881a      	ldrh	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	1c9a      	adds	r2, r3, #2
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b02      	subs	r3, #2
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007890:	e012      	b.n	80078b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d148      	bne.n	800795c <HAL_SPI_TransmitReceive+0x3aa>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d042      	beq.n	800795c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d923      	bls.n	800792a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	b292      	uxth	r2, r2
 80078ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	1c9a      	adds	r2, r3, #2
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b02      	subs	r3, #2
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	d81f      	bhi.n	8007958 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	e016      	b.n	8007958 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f103 020c 	add.w	r2, r3, #12
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007958:	2301      	movs	r3, #1
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800795c:	f7fc fb9a 	bl	8004094 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007968:	429a      	cmp	r2, r3
 800796a:	d803      	bhi.n	8007974 <HAL_SPI_TransmitReceive+0x3c2>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d102      	bne.n	800797a <HAL_SPI_TransmitReceive+0x3c8>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007980:	e01c      	b.n	80079bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f af5b 	bne.w	8007844 <HAL_SPI_TransmitReceive+0x292>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	f47f af54 	bne.w	8007844 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f937 	bl	8007c14 <SPI_EndRxTxTransaction>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60
 80079b8:	e000      	b.n	80079bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80079ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3728      	adds	r7, #40	; 0x28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079e8:	f7fc fb54 	bl	8004094 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079f8:	f7fc fb4c 	bl	8004094 <HAL_GetTick>
 80079fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079fe:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	015b      	lsls	r3, r3, #5
 8007a04:	0d1b      	lsrs	r3, r3, #20
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a0e:	e054      	b.n	8007aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d050      	beq.n	8007aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a18:	f7fc fb3c 	bl	8004094 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d902      	bls.n	8007a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d13d      	bne.n	8007aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a46:	d111      	bne.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a50:	d004      	beq.n	8007a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5a:	d107      	bne.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a74:	d10f      	bne.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e017      	b.n	8007ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d19b      	bne.n	8007a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000004 	.word	0x20000004

08007ae8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08a      	sub	sp, #40	; 0x28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007afa:	f7fc facb 	bl	8004094 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4413      	add	r3, r2
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007b0a:	f7fc fac3 	bl	8004094 <HAL_GetTick>
 8007b0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b18:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	00da      	lsls	r2, r3, #3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	0d1b      	lsrs	r3, r3, #20
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	fb02 f303 	mul.w	r3, r2, r3
 8007b2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b30:	e060      	b.n	8007bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b38:	d107      	bne.n	8007b4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d050      	beq.n	8007bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b52:	f7fc fa9f 	bl	8004094 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d902      	bls.n	8007b68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d13d      	bne.n	8007be4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b80:	d111      	bne.n	8007ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8a:	d004      	beq.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d107      	bne.n	8007ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bae:	d10f      	bne.n	8007bd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e010      	b.n	8007c06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d196      	bne.n	8007b32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3728      	adds	r7, #40	; 0x28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000004 	.word	0x20000004

08007c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ff5b 	bl	8007ae8 <SPI_WaitFifoStateUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e027      	b.n	8007c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2180      	movs	r1, #128	; 0x80
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fec0 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e014      	b.n	8007c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff ff34 	bl	8007ae8 <SPI_WaitFifoStateUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e000      	b.n	8007c98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <__libc_init_array>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4d0d      	ldr	r5, [pc, #52]	; (8007cd8 <__libc_init_array+0x38>)
 8007ca4:	4c0d      	ldr	r4, [pc, #52]	; (8007cdc <__libc_init_array+0x3c>)
 8007ca6:	1b64      	subs	r4, r4, r5
 8007ca8:	10a4      	asrs	r4, r4, #2
 8007caa:	2600      	movs	r6, #0
 8007cac:	42a6      	cmp	r6, r4
 8007cae:	d109      	bne.n	8007cc4 <__libc_init_array+0x24>
 8007cb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ce0 <__libc_init_array+0x40>)
 8007cb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ce4 <__libc_init_array+0x44>)
 8007cb4:	f000 f820 	bl	8007cf8 <_init>
 8007cb8:	1b64      	subs	r4, r4, r5
 8007cba:	10a4      	asrs	r4, r4, #2
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	42a6      	cmp	r6, r4
 8007cc0:	d105      	bne.n	8007cce <__libc_init_array+0x2e>
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc8:	4798      	blx	r3
 8007cca:	3601      	adds	r6, #1
 8007ccc:	e7ee      	b.n	8007cac <__libc_init_array+0xc>
 8007cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd2:	4798      	blx	r3
 8007cd4:	3601      	adds	r6, #1
 8007cd6:	e7f2      	b.n	8007cbe <__libc_init_array+0x1e>
 8007cd8:	08007d70 	.word	0x08007d70
 8007cdc:	08007d70 	.word	0x08007d70
 8007ce0:	08007d70 	.word	0x08007d70
 8007ce4:	08007d74 	.word	0x08007d74

08007ce8 <memset>:
 8007ce8:	4402      	add	r2, r0
 8007cea:	4603      	mov	r3, r0
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d100      	bne.n	8007cf2 <memset+0xa>
 8007cf0:	4770      	bx	lr
 8007cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf6:	e7f9      	b.n	8007cec <memset+0x4>

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
